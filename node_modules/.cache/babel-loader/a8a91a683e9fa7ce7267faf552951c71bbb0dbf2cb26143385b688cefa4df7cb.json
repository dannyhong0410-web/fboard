{"ast":null,"code":"import _objectSpread from\"C:/Users/\\uD64D\\uC131\\uAD00/Desktop/FBoard/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Yahoo Finance API를 사용한 FX 데이터 서비스\n// 주요 환율 심볼 매핑\nconst FX_SYMBOLS={'USD/KRW':'KRW=X',// 달러/원\n'EUR/KRW':'EURKRW=X',// 유로/원\n'JPY/KRW':'JPYKRW=X',// 엔/원\n'CNY/KRW':'CNYKRW=X',// 위안/원\n'GBP/KRW':'GBPKRW=X',// 파운드/원\n'EUR/USD':'EURUSD=X',// 유로/달러\n'USD/JPY':'USDJPY=X',// 달러/엔\n'GBP/USD':'GBPUSD=X',// 파운드/달러\n'USD/CNY':'USDCNY=X',// 달러/위안\n'EUR/JPY':'EURJPY=X',// 유로/엔\n'AUD/USD':'AUDUSD=X',// 호주달러/달러\n'USD/CAD':'USDCAD=X',// 달러/캐나다달러\n'USD/CHF':'USDCHF=X',// 달러/스위스프랑\n'NZD/USD':'NZDUSD=X',// 뉴질랜드달러/달러\n'USD/SGD':'USDSGD=X',// 달러/싱가포르달러\n'DXY':'DX-Y.NYB'// 달러 인덱스\n};// 현실적인 더미 FX 데이터 (2024년 12월 기준)\nconst DUMMY_FX_DATA=[{title:'USD/KRW',value:1345.67,change:0.15,isPositive:true},{title:'EUR/KRW',value:1459.23,change:-0.21,isPositive:false},{title:'JPY/KRW',value:9.12,change:0.45,isPositive:true},{title:'CNY/KRW',value:186.34,change:-0.12,isPositive:false},{title:'GBP/KRW',value:1702.45,change:0.32,isPositive:true},{title:'EUR/USD',value:1.0856,change:-0.21,isPositive:false},{title:'USD/JPY',value:148.45,change:0.45,isPositive:true},{title:'GBP/USD',value:1.2654,change:0.32,isPositive:true},{title:'USD/CNY',value:7.2345,change:-0.12,isPositive:false},{title:'EUR/JPY',value:161.23,change:0.24,isPositive:true},{title:'AUD/USD',value:0.6756,change:0.18,isPositive:true},{title:'USD/CAD',value:1.3456,change:-0.08,isPositive:false},{title:'USD/CHF',value:0.8923,change:0.12,isPositive:true},{title:'NZD/USD',value:0.6234,change:0.25,isPositive:true},{title:'USD/SGD',value:1.3456,change:-0.05,isPositive:false},{title:'DXY',value:102.45,change:0.35,isPositive:true}];// CORS 프록시 URL들 (주식 API와 동일한 방식)\nconst CORS_PROXIES=['https://cors-anywhere.herokuapp.com/','https://api.allorigins.win/raw?url=','https://corsproxy.io/?',''// 직접 호출도 시도\n];// 프록시를 사용한 API 호출 (주식 API와 동일한 방식)\nconst fetchWithProxy=async function(url){let proxyIndex=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;if(proxyIndex>=CORS_PROXIES.length){throw new Error('All proxy attempts failed');}try{const proxyUrl=CORS_PROXIES[proxyIndex]+url;const response=await fetch(proxyUrl,{method:'GET',headers:{'Accept':'application/json','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return response;}catch(error){console.log(\"Proxy \".concat(proxyIndex,\" failed, trying next...\"));return fetchWithProxy(url,proxyIndex+1);}};// Yahoo Finance API에서 환율 데이터 가져오기 (주식 API와 동일한 방식)\nconst fetchFXDataFromYahoo=async symbol=>{try{const url=\"https://query1.finance.yahoo.com/v8/finance/chart/\".concat(symbol,\"?interval=1d&range=1d\");const response=await fetchWithProxy(url);const data=await response.json();if(!data.chart||!data.chart.result||data.chart.result.length===0){throw new Error('No chart data available');}const result=data.chart.result[0];const meta=result.meta;const quotes=result.indicators.quote[0];// 가장 최근 데이터 (주식 API와 동일한 방식)\nconst latestIndex=quotes.close.length-1;const currentPrice=meta.regularMarketPrice||quotes.close[latestIndex]||0;return{symbol:symbol,price:currentPrice,change:meta.regularMarketPrice-meta.previousClose||0,changePercent:(meta.regularMarketPrice-meta.previousClose)/meta.previousClose*100||0,previousClose:meta.previousClose||0,open:quotes.open[latestIndex]||0,high:quotes.high[latestIndex]||0,low:quotes.low[latestIndex]||0,volume:quotes.volume[latestIndex]||0,currency:meta.currency||'USD'};}catch(error){console.error(\"Error fetching \".concat(symbol,\":\"),error);throw error;}};// 모든 환율 데이터 가져오기 (주식 API와 동일한 방식)\nexport const fetchAllFXData=async()=>{try{console.log('🔄 Fetching FX data from Yahoo Finance...');const promises=[];// 모든 환율 심볼에 대해 병렬로 데이터 가져오기\nfor(const[name,symbol]of Object.entries(FX_SYMBOLS)){promises.push(fetchFXDataFromYahoo(symbol).then(data=>{console.log(\"\\u2705 \".concat(name,\": \").concat(data.price,\" (\").concat(data.changePercent>0?'+':'').concat(data.changePercent.toFixed(2),\"%)\"));return{title:name,value:data.price,change:data.changePercent,isPositive:data.changePercent>=0,symbol:symbol,isRealData:true,dataSource:'Yahoo Finance'};}).catch(error=>{console.log(\"\\u274C Error fetching \".concat(name,\":\"),error.message);// 개별 FX 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_FX_DATA.find(item=>item.title===name);if(dummyData){console.log(\"\\uD83D\\uDCCA Using dummy data for \".concat(name));return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:symbol});}return null;}));}// 모든 요청 완료 대기\nconst results=await Promise.all(promises);// null 값 필터링\nconst validData=results.filter(data=>data!==null);console.log(\"\\u2705 Successfully loaded \".concat(validData.length,\"/\").concat(Object.keys(FX_SYMBOLS).length,\" FX rates\"));return validData;}catch(error){console.error('❌ Error fetching FX data:',error);console.log('📊 Falling back to dummy data...');// 전체 실패 시 더미 데이터 반환\nreturn DUMMY_FX_DATA.map(item=>_objectSpread(_objectSpread({},item),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:FX_SYMBOLS[item.title]||''}));}};// 특정 환율 데이터 가져오기\nexport const fetchFXRate=async symbol=>{const yahooSymbol=FX_SYMBOLS[symbol];if(!yahooSymbol){throw new Error(\"Unknown symbol: \".concat(symbol));}return await fetchFXDataFromYahoo(yahooSymbol);};// Yahoo Finance URL 매핑\nexport const YAHOO_FINANCE_URLS={'USD/KRW':'https://finance.yahoo.com/quote/KRW=X','EUR/KRW':'https://finance.yahoo.com/quote/EURKRW=X','JPY/KRW':'https://finance.yahoo.com/quote/JPYKRW=X','CNY/KRW':'https://finance.yahoo.com/quote/CNYKRW=X','GBP/KRW':'https://finance.yahoo.com/quote/GBPKRW=X','EUR/USD':'https://finance.yahoo.com/quote/EURUSD=X','USD/JPY':'https://finance.yahoo.com/quote/USDJPY=X','GBP/USD':'https://finance.yahoo.com/quote/GBPUSD=X','USD/CNY':'https://finance.yahoo.com/quote/USDCNY=X','EUR/JPY':'https://finance.yahoo.com/quote/EURJPY=X','AUD/USD':'https://finance.yahoo.com/quote/AUDUSD=X','USD/CAD':'https://finance.yahoo.com/quote/USDCAD=X','USD/CHF':'https://finance.yahoo.com/quote/USDCHF=X','NZD/USD':'https://finance.yahoo.com/quote/NZDUSD=X','USD/SGD':'https://finance.yahoo.com/quote/USDSGD=X','DXY':'https://finance.yahoo.com/quote/DX-Y.NYB'};// FX vs 주식 API 비교 테스트\nexport const compareFXvsStockAPI=async()=>{try{console.log('🔍 Comparing FX vs Stock API...');// FX 심볼 테스트\nconst fxSymbol='KRW=X';const fxUrl=\"https://query1.finance.yahoo.com/v8/finance/chart/\".concat(fxSymbol,\"?interval=1d&range=1d\");// 주식 심볼 테스트\nconst stockSymbol='^GSPC';const stockUrl=\"https://query1.finance.yahoo.com/v8/finance/chart/\".concat(stockSymbol,\"?interval=1d&range=1d\");console.log(\"\\uD83D\\uDD17 FX URL: \".concat(fxUrl));console.log(\"\\uD83D\\uDD17 Stock URL: \".concat(stockUrl));// FX API 테스트\ntry{console.log('🧪 Testing FX API...');const fxResponse=await fetch(fxUrl,{method:'GET',headers:{'Accept':'application/json','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}});console.log(\"\\uD83D\\uDCCA FX response status: \".concat(fxResponse.status));console.log(\"\\uD83D\\uDCCA FX response headers:\",Object.fromEntries(fxResponse.headers.entries()));if(fxResponse.ok){const fxData=await fxResponse.json();console.log(\"\\uD83D\\uDCCA FX data keys:\",Object.keys(fxData));if(fxData&&fxData.chart&&fxData.chart.result&&fxData.chart.result[0]){const fxMeta=fxData.chart.result[0].meta;console.log(\"\\uD83D\\uDCCA FX meta data:\",fxMeta);console.log(\"\\u2705 FX API works! USD/KRW: \".concat(fxMeta.regularMarketPrice));}}}catch(fxError){console.log(\"\\u274C FX API failed:\",fxError.message);}// 주식 API 테스트\ntry{console.log('🧪 Testing Stock API...');const stockResponse=await fetch(stockUrl,{method:'GET',headers:{'Accept':'application/json','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}});console.log(\"\\uD83D\\uDCCA Stock response status: \".concat(stockResponse.status));console.log(\"\\uD83D\\uDCCA Stock response headers:\",Object.fromEntries(stockResponse.headers.entries()));if(stockResponse.ok){const stockData=await stockResponse.json();console.log(\"\\uD83D\\uDCCA Stock data keys:\",Object.keys(stockData));if(stockData&&stockData.chart&&stockData.chart.result&&stockData.chart.result[0]){const stockMeta=stockData.chart.result[0].meta;console.log(\"\\uD83D\\uDCCA Stock meta data:\",stockMeta);console.log(\"\\u2705 Stock API works! S&P 500: \".concat(stockMeta.regularMarketPrice));}}}catch(stockError){console.log(\"\\u274C Stock API failed:\",stockError.message);}}catch(error){console.error(\"\\u274C Comparison test failed:\",error);}};// Yahoo Finance API 테스트 함수\nexport const testYahooFinanceAPI=async()=>{try{console.log('🧪 Testing Yahoo Finance API...');// 간단한 테스트: USD/KRW 환율 가져오기\nconst testSymbol='KRW=X';const testUrl=\"https://query1.finance.yahoo.com/v8/finance/chart/\".concat(testSymbol,\"?interval=1d&range=1d\");console.log(\"\\uD83D\\uDD17 Testing URL: \".concat(testUrl));const response=await fetch(testUrl,{method:'GET',headers:{'Accept':'application/json','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}});console.log(\"\\uD83D\\uDCCA Response status: \".concat(response.status));console.log(\"\\uD83D\\uDCCA Response headers:\",Object.fromEntries(response.headers.entries()));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();console.log(\"\\uD83D\\uDCCA Response data keys:\",Object.keys(data));if(data&&data.chart&&data.chart.result&&data.chart.result[0]){const result=data.chart.result[0];const meta=result.meta;console.log(\"\\uD83D\\uDCCA Meta data:\",meta);if(meta.regularMarketPrice){console.log(\"\\u2705 Yahoo Finance API test successful! USD/KRW: \".concat(meta.regularMarketPrice));return true;}}console.log(\"\\u274C No valid data in response\");return false;}catch(error){console.error(\"\\u274C Yahoo Finance API test failed:\",error);return false;}};","map":{"version":3,"names":["FX_SYMBOLS","DUMMY_FX_DATA","title","value","change","isPositive","CORS_PROXIES","fetchWithProxy","url","proxyIndex","arguments","length","undefined","Error","proxyUrl","response","fetch","method","headers","ok","concat","status","error","console","log","fetchFXDataFromYahoo","symbol","data","json","chart","result","meta","quotes","indicators","quote","latestIndex","close","currentPrice","regularMarketPrice","price","previousClose","changePercent","open","high","low","volume","currency","fetchAllFXData","promises","name","Object","entries","push","then","toFixed","isRealData","dataSource","catch","message","dummyData","find","item","_objectSpread","results","Promise","all","validData","filter","keys","map","fetchFXRate","yahooSymbol","YAHOO_FINANCE_URLS","compareFXvsStockAPI","fxSymbol","fxUrl","stockSymbol","stockUrl","fxResponse","fromEntries","fxData","fxMeta","fxError","stockResponse","stockData","stockMeta","stockError","testYahooFinanceAPI","testSymbol","testUrl"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/fxApi.js"],"sourcesContent":["// Yahoo Finance API를 사용한 FX 데이터 서비스\r\n\r\n// 주요 환율 심볼 매핑\r\nconst FX_SYMBOLS = {\r\n  'USD/KRW': 'KRW=X', // 달러/원\r\n  'EUR/KRW': 'EURKRW=X', // 유로/원\r\n  'JPY/KRW': 'JPYKRW=X', // 엔/원\r\n  'CNY/KRW': 'CNYKRW=X', // 위안/원\r\n  'GBP/KRW': 'GBPKRW=X', // 파운드/원\r\n  'EUR/USD': 'EURUSD=X', // 유로/달러\r\n  'USD/JPY': 'USDJPY=X', // 달러/엔\r\n  'GBP/USD': 'GBPUSD=X', // 파운드/달러\r\n  'USD/CNY': 'USDCNY=X', // 달러/위안\r\n  'EUR/JPY': 'EURJPY=X', // 유로/엔\r\n  'AUD/USD': 'AUDUSD=X', // 호주달러/달러\r\n  'USD/CAD': 'USDCAD=X', // 달러/캐나다달러\r\n  'USD/CHF': 'USDCHF=X', // 달러/스위스프랑\r\n  'NZD/USD': 'NZDUSD=X', // 뉴질랜드달러/달러\r\n  'USD/SGD': 'USDSGD=X', // 달러/싱가포르달러\r\n  'DXY': 'DX-Y.NYB' // 달러 인덱스\r\n};\r\n\r\n// 현실적인 더미 FX 데이터 (2024년 12월 기준)\r\nconst DUMMY_FX_DATA = [\r\n  { title: 'USD/KRW', value: 1345.67, change: 0.15, isPositive: true },\r\n  { title: 'EUR/KRW', value: 1459.23, change: -0.21, isPositive: false },\r\n  { title: 'JPY/KRW', value: 9.12, change: 0.45, isPositive: true },\r\n  { title: 'CNY/KRW', value: 186.34, change: -0.12, isPositive: false },\r\n  { title: 'GBP/KRW', value: 1702.45, change: 0.32, isPositive: true },\r\n  { title: 'EUR/USD', value: 1.0856, change: -0.21, isPositive: false },\r\n  { title: 'USD/JPY', value: 148.45, change: 0.45, isPositive: true },\r\n  { title: 'GBP/USD', value: 1.2654, change: 0.32, isPositive: true },\r\n  { title: 'USD/CNY', value: 7.2345, change: -0.12, isPositive: false },\r\n  { title: 'EUR/JPY', value: 161.23, change: 0.24, isPositive: true },\r\n  { title: 'AUD/USD', value: 0.6756, change: 0.18, isPositive: true },\r\n  { title: 'USD/CAD', value: 1.3456, change: -0.08, isPositive: false },\r\n  { title: 'USD/CHF', value: 0.8923, change: 0.12, isPositive: true },\r\n  { title: 'NZD/USD', value: 0.6234, change: 0.25, isPositive: true },\r\n  { title: 'USD/SGD', value: 1.3456, change: -0.05, isPositive: false },\r\n  { title: 'DXY', value: 102.45, change: 0.35, isPositive: true }\r\n];\r\n\r\n// CORS 프록시 URL들 (주식 API와 동일한 방식)\r\nconst CORS_PROXIES = [\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://corsproxy.io/?',\r\n  '' // 직접 호출도 시도\r\n];\r\n\r\n// 프록시를 사용한 API 호출 (주식 API와 동일한 방식)\r\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\r\n  if (proxyIndex >= CORS_PROXIES.length) {\r\n    throw new Error('All proxy attempts failed');\r\n  }\r\n\r\n  try {\r\n    const proxyUrl = CORS_PROXIES[proxyIndex] + url;\r\n    const response = await fetch(proxyUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.log(`Proxy ${proxyIndex} failed, trying next...`);\r\n    return fetchWithProxy(url, proxyIndex + 1);\r\n  }\r\n};\r\n\r\n// Yahoo Finance API에서 환율 데이터 가져오기 (주식 API와 동일한 방식)\r\nconst fetchFXDataFromYahoo = async (symbol) => {\r\n  try {\r\n    const url = `https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?interval=1d&range=1d`;\r\n    const response = await fetchWithProxy(url);\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\r\n      throw new Error('No chart data available');\r\n    }\r\n    \r\n    const result = data.chart.result[0];\r\n    const meta = result.meta;\r\n    const quotes = result.indicators.quote[0];\r\n    \r\n    // 가장 최근 데이터 (주식 API와 동일한 방식)\r\n    const latestIndex = quotes.close.length - 1;\r\n    const currentPrice = meta.regularMarketPrice || quotes.close[latestIndex] || 0;\r\n    \r\n    return {\r\n      symbol: symbol,\r\n      price: currentPrice,\r\n      change: meta.regularMarketPrice - meta.previousClose || 0,\r\n      changePercent: ((meta.regularMarketPrice - meta.previousClose) / meta.previousClose * 100) || 0,\r\n      previousClose: meta.previousClose || 0,\r\n      open: quotes.open[latestIndex] || 0,\r\n      high: quotes.high[latestIndex] || 0,\r\n      low: quotes.low[latestIndex] || 0,\r\n      volume: quotes.volume[latestIndex] || 0,\r\n      currency: meta.currency || 'USD'\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error fetching ${symbol}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 모든 환율 데이터 가져오기 (주식 API와 동일한 방식)\r\nexport const fetchAllFXData = async () => {\r\n  try {\r\n    console.log('🔄 Fetching FX data from Yahoo Finance...');\r\n    \r\n    const promises = [];\r\n    \r\n    // 모든 환율 심볼에 대해 병렬로 데이터 가져오기\r\n    for (const [name, symbol] of Object.entries(FX_SYMBOLS)) {\r\n      promises.push(\r\n        fetchFXDataFromYahoo(symbol)\r\n          .then(data => {\r\n            console.log(`✅ ${name}: ${data.price} (${data.changePercent > 0 ? '+' : ''}${data.changePercent.toFixed(2)}%)`);\r\n            return {\r\n              title: name,\r\n              value: data.price,\r\n              change: data.changePercent,\r\n              isPositive: data.changePercent >= 0,\r\n              symbol: symbol,\r\n              isRealData: true,\r\n              dataSource: 'Yahoo Finance'\r\n            };\r\n          })\r\n          .catch(error => {\r\n            console.log(`❌ Error fetching ${name}:`, error.message);\r\n            // 개별 FX 실패 시 더미 데이터 사용\r\n            const dummyData = DUMMY_FX_DATA.find(item => item.title === name);\r\n            if (dummyData) {\r\n              console.log(`📊 Using dummy data for ${name}`);\r\n              return {\r\n                ...dummyData,\r\n                isRealData: false,\r\n                dataSource: 'Dummy Data (Error)',\r\n                symbol: symbol\r\n              };\r\n            }\r\n            return null;\r\n          })\r\n      );\r\n    }\r\n    \r\n    // 모든 요청 완료 대기\r\n    const results = await Promise.all(promises);\r\n    \r\n    // null 값 필터링\r\n    const validData = results.filter(data => data !== null);\r\n    \r\n    console.log(`✅ Successfully loaded ${validData.length}/${Object.keys(FX_SYMBOLS).length} FX rates`);\r\n    \r\n    return validData;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching FX data:', error);\r\n    console.log('📊 Falling back to dummy data...');\r\n    \r\n    // 전체 실패 시 더미 데이터 반환\r\n    return DUMMY_FX_DATA.map(item => ({\r\n      ...item,\r\n      isRealData: false,\r\n      dataSource: 'Dummy Data (Error)',\r\n      symbol: FX_SYMBOLS[item.title] || ''\r\n    }));\r\n  }\r\n};\r\n\r\n// 특정 환율 데이터 가져오기\r\nexport const fetchFXRate = async (symbol) => {\r\n  const yahooSymbol = FX_SYMBOLS[symbol];\r\n  if (!yahooSymbol) {\r\n    throw new Error(`Unknown symbol: ${symbol}`);\r\n  }\r\n  \r\n  return await fetchFXDataFromYahoo(yahooSymbol);\r\n};\r\n\r\n// Yahoo Finance URL 매핑\r\nexport const YAHOO_FINANCE_URLS = {\r\n  'USD/KRW': 'https://finance.yahoo.com/quote/KRW=X',\r\n  'EUR/KRW': 'https://finance.yahoo.com/quote/EURKRW=X',\r\n  'JPY/KRW': 'https://finance.yahoo.com/quote/JPYKRW=X',\r\n  'CNY/KRW': 'https://finance.yahoo.com/quote/CNYKRW=X',\r\n  'GBP/KRW': 'https://finance.yahoo.com/quote/GBPKRW=X',\r\n  'EUR/USD': 'https://finance.yahoo.com/quote/EURUSD=X',\r\n  'USD/JPY': 'https://finance.yahoo.com/quote/USDJPY=X',\r\n  'GBP/USD': 'https://finance.yahoo.com/quote/GBPUSD=X',\r\n  'USD/CNY': 'https://finance.yahoo.com/quote/USDCNY=X',\r\n  'EUR/JPY': 'https://finance.yahoo.com/quote/EURJPY=X',\r\n  'AUD/USD': 'https://finance.yahoo.com/quote/AUDUSD=X',\r\n  'USD/CAD': 'https://finance.yahoo.com/quote/USDCAD=X',\r\n  'USD/CHF': 'https://finance.yahoo.com/quote/USDCHF=X',\r\n  'NZD/USD': 'https://finance.yahoo.com/quote/NZDUSD=X',\r\n  'USD/SGD': 'https://finance.yahoo.com/quote/USDSGD=X',\r\n  'DXY': 'https://finance.yahoo.com/quote/DX-Y.NYB'\r\n};\r\n\r\n// FX vs 주식 API 비교 테스트\r\nexport const compareFXvsStockAPI = async () => {\r\n  try {\r\n    console.log('🔍 Comparing FX vs Stock API...');\r\n    \r\n    // FX 심볼 테스트\r\n    const fxSymbol = 'KRW=X';\r\n    const fxUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${fxSymbol}?interval=1d&range=1d`;\r\n    \r\n    // 주식 심볼 테스트\r\n    const stockSymbol = '^GSPC';\r\n    const stockUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${stockSymbol}?interval=1d&range=1d`;\r\n    \r\n    console.log(`🔗 FX URL: ${fxUrl}`);\r\n    console.log(`🔗 Stock URL: ${stockUrl}`);\r\n    \r\n    // FX API 테스트\r\n    try {\r\n      console.log('🧪 Testing FX API...');\r\n      const fxResponse = await fetch(fxUrl, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n        }\r\n      });\r\n      \r\n      console.log(`📊 FX response status: ${fxResponse.status}`);\r\n      console.log(`📊 FX response headers:`, Object.fromEntries(fxResponse.headers.entries()));\r\n      \r\n      if (fxResponse.ok) {\r\n        const fxData = await fxResponse.json();\r\n        console.log(`📊 FX data keys:`, Object.keys(fxData));\r\n        \r\n        if (fxData && fxData.chart && fxData.chart.result && fxData.chart.result[0]) {\r\n          const fxMeta = fxData.chart.result[0].meta;\r\n          console.log(`📊 FX meta data:`, fxMeta);\r\n          console.log(`✅ FX API works! USD/KRW: ${fxMeta.regularMarketPrice}`);\r\n        }\r\n      }\r\n    } catch (fxError) {\r\n      console.log(`❌ FX API failed:`, fxError.message);\r\n    }\r\n    \r\n    // 주식 API 테스트\r\n    try {\r\n      console.log('🧪 Testing Stock API...');\r\n      const stockResponse = await fetch(stockUrl, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n        }\r\n      });\r\n      \r\n      console.log(`📊 Stock response status: ${stockResponse.status}`);\r\n      console.log(`📊 Stock response headers:`, Object.fromEntries(stockResponse.headers.entries()));\r\n      \r\n      if (stockResponse.ok) {\r\n        const stockData = await stockResponse.json();\r\n        console.log(`📊 Stock data keys:`, Object.keys(stockData));\r\n        \r\n        if (stockData && stockData.chart && stockData.chart.result && stockData.chart.result[0]) {\r\n          const stockMeta = stockData.chart.result[0].meta;\r\n          console.log(`📊 Stock meta data:`, stockMeta);\r\n          console.log(`✅ Stock API works! S&P 500: ${stockMeta.regularMarketPrice}`);\r\n        }\r\n      }\r\n    } catch (stockError) {\r\n      console.log(`❌ Stock API failed:`, stockError.message);\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error(`❌ Comparison test failed:`, error);\r\n  }\r\n};\r\n\r\n// Yahoo Finance API 테스트 함수\r\nexport const testYahooFinanceAPI = async () => {\r\n  try {\r\n    console.log('🧪 Testing Yahoo Finance API...');\r\n    \r\n    // 간단한 테스트: USD/KRW 환율 가져오기\r\n    const testSymbol = 'KRW=X';\r\n    const testUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${testSymbol}?interval=1d&range=1d`;\r\n    \r\n    console.log(`🔗 Testing URL: ${testUrl}`);\r\n    \r\n    const response = await fetch(testUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n      }\r\n    });\r\n    \r\n    console.log(`📊 Response status: ${response.status}`);\r\n    console.log(`📊 Response headers:`, Object.fromEntries(response.headers.entries()));\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log(`📊 Response data keys:`, Object.keys(data));\r\n    \r\n    if (data && data.chart && data.chart.result && data.chart.result[0]) {\r\n      const result = data.chart.result[0];\r\n      const meta = result.meta;\r\n      console.log(`📊 Meta data:`, meta);\r\n      \r\n      if (meta.regularMarketPrice) {\r\n        console.log(`✅ Yahoo Finance API test successful! USD/KRW: ${meta.regularMarketPrice}`);\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    console.log(`❌ No valid data in response`);\r\n    return false;\r\n    \r\n  } catch (error) {\r\n    console.error(`❌ Yahoo Finance API test failed:`, error);\r\n    return false;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}