{"ast":null,"code":"// Trading Economics 웹사이트에서 최신 데이터를 가져오는 Fixed Income 서비스\nconst BASE_URL = 'https://tradingeconomics.com';\n\n// Fixed Income 심볼 매핑 (주식 API와 비슷한 방식)\nconst FIXED_INCOME_SYMBOLS = {\n  // 기준 금리\n  '미국 기준 금리': 'united-states/interest-rate',\n  '유로 기준 금리': 'euro-area/interest-rate',\n  '일본 기준 금리': 'japan/interest-rate',\n  '한국 기준 금리': 'south-korea/interest-rate',\n  '스위스 기준 금리': 'switzerland/interest-rate',\n  '영국 기준 금리': 'united-kingdom/interest-rate',\n  '호주 기준 금리': 'australia/interest-rate',\n  '브라질 기준 금리': 'brazil/interest-rate',\n  // 국채 수익률\n  'US 3M': 'united-states/3-month-bill-yield',\n  'US 2Y': 'united-states/2-year-note-yield',\n  'US 10Y': 'united-states/government-bond-yield',\n  'US 30Y': 'united-states/30-year-bond-yield',\n  'Korea 10Y': 'south-korea/government-bond-yield',\n  'Japan 10Y': 'japan/government-bond-yield',\n  'Germany 10Y': 'germany/government-bond-yield'\n};\n\n// 프록시 서버들을 사용한 웹 스크래핑 (주식 API와 동일)\nconst PROXY_SERVICES = ['https://api.allorigins.win/raw?url=', 'https://corsproxy.io/?', 'https://thingproxy.freeboard.io/fetch/', 'https://cors.bridged.cc/', 'https://api.codetabs.com/v1/proxy?quest=', 'https://cors.eu.org/', 'https://cors-anywhere.herokuapp.com/', '' // 직접 호출도 시도\n];\n\n// 프록시를 사용한 웹 스크래핑 (주식 API와 동일한 방식)\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\n  if (proxyIndex >= PROXY_SERVICES.length) {\n    throw new Error('All proxy attempts failed');\n  }\n  try {\n    const proxyUrl = PROXY_SERVICES[proxyIndex] + url;\n    console.log(`🔗 Trying proxy ${proxyIndex + 1}/${PROXY_SERVICES.length}: ${proxyUrl.substring(0, 50)}...`);\n    const response = await fetch(proxyUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n        'Accept-Language': 'en-US,en;q=0.9',\n        'Accept-Encoding': 'gzip, deflate, br',\n        'Connection': 'keep-alive',\n        'Upgrade-Insecure-Requests': '1'\n      },\n      timeout: 10000 // 10초 타임아웃\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const html = await response.text();\n    if (html.length < 1000) {\n      throw new Error('Response too short, likely an error page');\n    }\n    console.log(`✅ Proxy ${proxyIndex + 1} successful! HTML length: ${html.length} characters`);\n    return html;\n  } catch (error) {\n    console.log(`❌ Proxy ${proxyIndex + 1} failed: ${error.message}`);\n    return fetchWithProxy(url, proxyIndex + 1);\n  }\n};\n\n// HTML에서 금리 데이터 추출 (간단하고 효과적인 방식)\nconst extractInterestRateFromHTML = (html, title) => {\n  try {\n    console.log(`🔍 Extracting data for ${title} from HTML...`);\n\n    // 방법 1: 모든 숫자.숫자% 패턴 찾기\n    const percentagePattern = /(\\d+\\.\\d+)%/g;\n    const matches = html.match(percentagePattern);\n    if (matches && matches.length > 0) {\n      console.log(`📊 Found ${matches.length} percentage numbers for ${title}`);\n      const rates = matches.map(match => {\n        const rateMatch = match.match(/(\\d+\\.\\d+)%/);\n        return rateMatch ? parseFloat(rateMatch[1]) : 0;\n      });\n\n      // 유효한 금리 범위 필터링 (0.1% ~ 20%)\n      const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\n      if (validRates.length > 0) {\n        // 가장 큰 값이 보통 메인 금리\n        const maxRate = Math.max(...validRates);\n        console.log(`✅ Found rate for ${title}: ${maxRate}%`);\n        return maxRate;\n      }\n    }\n\n    // 방법 2: 특정 키워드와 함께 있는 금리 찾기\n    const keywordPatterns = [/interest rate.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?interest rate/i, /yield.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?yield/i, /bond.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?bond/i, /rate.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?rate/i];\n    for (const pattern of keywordPatterns) {\n      const matches = html.match(pattern);\n      if (matches && matches.length > 0) {\n        const rates = matches.map(match => {\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\n        });\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\n        if (validRates.length > 0) {\n          const maxRate = Math.max(...validRates);\n          console.log(`✅ Found rate with keyword for ${title}: ${maxRate}%`);\n          return maxRate;\n        }\n      }\n    }\n\n    // 방법 3: 테이블에서 찾기\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\n    const tables = html.match(tablePattern);\n    if (tables) {\n      for (const table of tables) {\n        const tableMatches = table.match(/(\\d+\\.\\d+)%/g);\n        if (tableMatches) {\n          const rates = tableMatches.map(match => {\n            const rateMatch = match.match(/(\\d+\\.\\d+)%/);\n            return rateMatch ? parseFloat(rateMatch[1]) : 0;\n          });\n          const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\n          if (validRates.length > 0) {\n            const maxRate = Math.max(...validRates);\n            console.log(`✅ Found rate in table for ${title}: ${maxRate}%`);\n            return maxRate;\n          }\n        }\n      }\n    }\n    console.log(`❌ No valid rate found for ${title}`);\n    return null;\n  } catch (error) {\n    console.error(`❌ Error extracting data for ${title}:`, error);\n    return null;\n  }\n};\n\n// 2024년 12월 기준 최신 더미 데이터 (실제 시장 상황 반영)\nconst DUMMY_FIXED_INCOME_DATA = [\n// Standard Interest Rates (기준 금리) - 2024년 12월 기준\n{\n  title: '미국 기준 금리',\n  value: 4.375,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'FEDFUNDS'\n}, {\n  title: '유로 기준 금리',\n  value: 4.50,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'ECBREFI'\n}, {\n  title: '일본 기준 금리',\n  value: -0.10,\n  change: 0.00,\n  isPositive: false,\n  symbol: 'BOJDF'\n}, {\n  title: '한국 기준 금리',\n  value: 2.50,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'KORREPO'\n}, {\n  title: '스위스 기준 금리',\n  value: 1.75,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'SNBREFI'\n}, {\n  title: '영국 기준 금리',\n  value: 5.25,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'BOEREFI'\n}, {\n  title: '호주 기준 금리',\n  value: 4.35,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'RBAREFI'\n}, {\n  title: '브라질 기준 금리',\n  value: 12.25,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'BRAREFI'\n},\n// US Bond Yields - 2024년 12월 기준 최신 수익률\n{\n  title: 'US 3M',\n  value: 5.45,\n  change: 0.02,\n  isPositive: true,\n  symbol: 'US3M'\n}, {\n  title: 'US 2Y',\n  value: 4.78,\n  change: 0.05,\n  isPositive: true,\n  symbol: 'US2Y'\n}, {\n  title: 'US 10Y',\n  value: 4.25,\n  change: 0.08,\n  isPositive: true,\n  symbol: 'US10Y'\n}, {\n  title: 'US 30Y',\n  value: 4.45,\n  change: 0.12,\n  isPositive: true,\n  symbol: 'US30Y'\n},\n// Korea Bond Yields - 2024년 12월 기준 최신 수익률\n{\n  title: 'Korea 2Y',\n  value: 3.45,\n  change: 0.03,\n  isPositive: true,\n  symbol: 'KR2Y'\n}, {\n  title: 'Korea 3Y',\n  value: 3.52,\n  change: 0.04,\n  isPositive: true,\n  symbol: 'KR3Y'\n}, {\n  title: 'Korea 5Y',\n  value: 3.68,\n  change: 0.06,\n  isPositive: true,\n  symbol: 'KR5Y'\n}, {\n  title: 'Korea 10Y',\n  value: 3.85,\n  change: 0.08,\n  isPositive: true,\n  symbol: 'KR10Y'\n}, {\n  title: 'Korea 30Y',\n  value: 4.12,\n  change: 0.10,\n  isPositive: true,\n  symbol: 'KR30Y'\n},\n// Japan Bond Yields - 2024년 12월 기준 최신 수익률\n{\n  title: 'Japan 2Y',\n  value: 0.12,\n  change: 0.01,\n  isPositive: true,\n  symbol: 'JP2Y'\n}, {\n  title: 'Japan 3Y',\n  value: 0.15,\n  change: 0.02,\n  isPositive: true,\n  symbol: 'JP3Y'\n}, {\n  title: 'Japan 5Y',\n  value: 0.25,\n  change: 0.03,\n  isPositive: true,\n  symbol: 'JP5Y'\n}, {\n  title: 'Japan 10Y',\n  value: 0.45,\n  change: 0.05,\n  isPositive: true,\n  symbol: 'JP10Y'\n}, {\n  title: 'Japan 30Y',\n  value: 1.25,\n  change: 0.08,\n  isPositive: true,\n  symbol: 'JP30Y'\n},\n// Germany Bond Yields - 2024년 12월 기준 최신 수익률\n{\n  title: 'Germany 2Y',\n  value: 3.12,\n  change: 0.04,\n  isPositive: true,\n  symbol: 'DE2Y'\n}, {\n  title: 'Germany 3Y',\n  value: 3.25,\n  change: 0.05,\n  isPositive: true,\n  symbol: 'DE3Y'\n}, {\n  title: 'Germany 5Y',\n  value: 3.45,\n  change: 0.06,\n  isPositive: true,\n  symbol: 'DE5Y'\n}, {\n  title: 'Germany 10Y',\n  value: 2.85,\n  change: 0.08,\n  isPositive: true,\n  symbol: 'DE10Y'\n}, {\n  title: 'Germany 30Y',\n  value: 3.15,\n  change: 0.10,\n  isPositive: true,\n  symbol: 'DE30Y'\n}];\n\n// 실시간 데이터 시뮬레이션 (더미 데이터에 약간의 변동 추가)\nconst generateRealTimeData = () => {\n  return DUMMY_FIXED_INCOME_DATA.map(item => {\n    // 약간의 랜덤 변동 추가 (±0.05% 범위)\n    const variation = (Math.random() - 0.5) * 0.1;\n    const newValue = item.value + variation;\n    const newChange = variation;\n    return {\n      ...item,\n      value: Math.round(newValue * 100) / 100,\n      change: Math.round(newChange * 100) / 100,\n      isPositive: newChange >= 0\n    };\n  });\n};\n\n// 기준 금리 데이터 가져오기 (실시간 시뮬레이션)\nexport const fetchInterestRates = async () => {\n  try {\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\n    const realTimeData = generateRealTimeData();\n    return realTimeData.filter(item => item.title.includes('기준 금리'));\n  } catch (error) {\n    console.error('Error fetching interest rates:', error);\n    return DUMMY_FIXED_INCOME_DATA.filter(item => item.title.includes('기준 금리'));\n  }\n};\n\n// Trading Economics에서 기준금리 데이터 가져오기\nexport const fetchInterestRatesFromTradingEconomics = async () => {\n  try {\n    console.log('🌐 Fetching interest rates from Trading Economics...');\n\n    // Trading Economics 국가별 기준금리 페이지 URL\n    const url = 'https://ko.tradingeconomics.com/country-list/interest-rate';\n    console.log(`🔗 Fetching from: ${url}`);\n    const html = await fetchWithProxy(url);\n    if (!html) {\n      console.log('❌ Failed to fetch HTML from Trading Economics');\n      return null;\n    }\n    console.log(`✅ HTML fetched successfully! Length: ${html.length} characters`);\n\n    // HTML에서 기준금리 데이터 추출\n    const interestRates = extractInterestRatesFromCountryList(html);\n    if (interestRates && interestRates.length > 0) {\n      console.log(`✅ Successfully extracted ${interestRates.length} interest rates`);\n      return interestRates;\n    } else {\n      console.log('❌ No interest rates found in HTML');\n      return null;\n    }\n  } catch (error) {\n    console.error('❌ Error fetching interest rates from Trading Economics:', error);\n    return null;\n  }\n};\n\n// Trading Economics 국가별 기준금리 페이지에서 데이터 추출\nconst extractInterestRatesFromCountryList = html => {\n  try {\n    console.log('🔍 Extracting interest rates from country list...');\n    const interestRates = [];\n\n    // 국가별 기준금리 테이블 패턴 찾기\n    // 일반적으로 <table> 태그 안에 국가명과 기준금리가 포함됨\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\n    const tables = html.match(tablePattern);\n    if (!tables || tables.length === 0) {\n      console.log('❌ No tables found in HTML');\n      return null;\n    }\n    console.log(`📊 Found ${tables.length} tables in HTML`);\n\n    // 각 테이블에서 데이터 추출\n    for (let tableIndex = 0; tableIndex < tables.length; tableIndex++) {\n      const table = tables[tableIndex];\n\n      // 테이블 행들 추출\n      const rowPattern = /<tr[^>]*>.*?<\\/tr>/gis;\n      const rows = table.match(rowPattern);\n      if (!rows || rows.length < 2) {\n        continue; // 헤더만 있거나 데이터가 없는 테이블은 건너뛰기\n      }\n      console.log(`📋 Processing table ${tableIndex + 1} with ${rows.length} rows`);\n\n      // 첫 번째 행은 헤더이므로 제외하고, 두 번째 행부터 검색\n      for (let i = 1; i < rows.length; i++) {\n        const row = rows[i];\n\n        // TD 태그들 추출\n        const tdPattern = /<td[^>]*>(.*?)<\\/td>/gis;\n        const tds = row.match(tdPattern);\n        if (tds && tds.length >= 2) {\n          // 첫 번째 TD: 국가명\n          const countryTD = tds[0];\n          // 두 번째 TD: 기준금리\n          const rateTD = tds[1];\n\n          // 국가명 추출\n          const countryPattern = />([^<]+)</;\n          const countryMatch = countryTD.match(countryPattern);\n\n          // 기준금리 추출\n          const ratePattern = />([^<]+)</;\n          const rateMatch = rateTD.match(ratePattern);\n          if (countryMatch && rateMatch) {\n            const country = countryMatch[1].trim();\n            const rateText = rateMatch[1].trim();\n\n            // 숫자만 추출 (퍼센트 기호 제거)\n            const numberPattern = /(\\d+\\.?\\d*)/;\n            const numberMatch = rateText.match(numberPattern);\n            if (numberMatch) {\n              const rate = parseFloat(numberMatch[1]);\n\n              // 주요 국가들만 필터링\n              const majorCountries = {\n                '미국': '미국 기준 금리',\n                'United States': '미국 기준 금리',\n                '유로': '유로 기준 금리',\n                'Euro Area': '유로 기준 금리',\n                '일본': '일본 기준 금리',\n                'Japan': '일본 기준 금리',\n                '한국': '한국 기준 금리',\n                'South Korea': '한국 기준 금리',\n                '스위스': '스위스 기준 금리',\n                'Switzerland': '스위스 기준 금리',\n                '영국': '영국 기준 금리',\n                'United Kingdom': '영국 기준 금리',\n                '호주': '호주 기준 금리',\n                'Australia': '호주 기준 금리',\n                '브라질': '브라질 기준 금리',\n                'Brazil': '브라질 기준 금리'\n              };\n              const mappedTitle = majorCountries[country];\n              if (mappedTitle) {\n                console.log(`✅ Found ${country}: ${rate}% -> ${mappedTitle}`);\n                interestRates.push({\n                  title: mappedTitle,\n                  value: rate,\n                  change: 0.00,\n                  // 변화율은 별도로 계산 필요\n                  isPositive: true,\n                  symbol: mappedTitle.replace(' 기준 금리', '').toUpperCase(),\n                  isRealData: true,\n                  dataSource: 'Trading Economics'\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n    console.log(`📊 Extracted ${interestRates.length} interest rates from Trading Economics`);\n    return interestRates;\n  } catch (error) {\n    console.error('❌ Error extracting interest rates from country list:', error);\n    return null;\n  }\n};\n\n// 채권 수익률 데이터 가져오기 (실시간 시뮬레이션)\nexport const fetchBondYields = async () => {\n  try {\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\n    const realTimeData = generateRealTimeData();\n    return realTimeData.filter(item => !item.title.includes('기준 금리'));\n  } catch (error) {\n    console.error('Error fetching bond yields:', error);\n    return DUMMY_FIXED_INCOME_DATA.filter(item => !item.title.includes('기준 금리'));\n  }\n};\n\n// 모든 Fixed Income 데이터 가져오기 (주식 API와 비슷한 방식)\nexport const fetchAllFixedIncomeData = async () => {\n  try {\n    console.log('🔄 Fetching all Fixed Income data from Trading Economics...');\n    const promises = [];\n\n    // 모든 Fixed Income 심볼에 대해 병렬로 데이터 가져오기 (주식 API와 동일한 방식)\n    for (const [title, symbol] of Object.entries(FIXED_INCOME_SYMBOLS)) {\n      // 영국 기준금리는 특별한 함수 사용\n      if (title === '영국 기준 금리') {\n        promises.push(fetchUKInterestRate().then(data => {\n          console.log(`✅ ${title}: ${data.value}% (${data.isRealData ? 'Real' : 'Dummy'})`);\n          return data;\n        }).catch(error => {\n          console.log(`❌ Error fetching ${title}:`, error.message);\n          // 개별 실패 시 더미 데이터 사용\n          const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === title);\n          if (dummyData) {\n            console.log(`📊 Using dummy data for ${title}`);\n            return {\n              ...dummyData,\n              isRealData: false,\n              dataSource: 'Dummy Data (Error)',\n              symbol: symbol\n            };\n          }\n          return null;\n        }));\n      } else {\n        // 다른 항목들은 기존 방식 사용\n        promises.push(fetchFixedIncomeQuote(title).then(data => {\n          console.log(`✅ ${title}: ${data.value}% (${data.isRealData ? 'Real' : 'Dummy'})`);\n          return data;\n        }).catch(error => {\n          console.log(`❌ Error fetching ${title}:`, error.message);\n          // 개별 실패 시 더미 데이터 사용\n          const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === title);\n          if (dummyData) {\n            console.log(`📊 Using dummy data for ${title}`);\n            return {\n              ...dummyData,\n              isRealData: false,\n              dataSource: 'Dummy Data (Error)',\n              symbol: symbol\n            };\n          }\n          return null;\n        }));\n      }\n    }\n\n    // 모든 요청 완료 대기\n    const results = await Promise.all(promises);\n\n    // null 값 필터링\n    const validData = results.filter(data => data !== null);\n    console.log(`✅ Successfully loaded ${validData.length}/${Object.keys(FIXED_INCOME_SYMBOLS).length} Fixed Income rates`);\n\n    // 실제 데이터가 있는지 확인\n    const realDataCount = validData.filter(item => item.isRealData).length;\n    if (realDataCount === 0) {\n      console.log('⚠️ No real data available, showing dummy data');\n    } else {\n      console.log(`✅ ${realDataCount} real Fixed Income rates loaded`);\n    }\n    return validData;\n  } catch (error) {\n    console.error('❌ Error fetching all Fixed Income data:', error);\n    console.log('📊 Falling back to dummy data...');\n\n    // 전체 실패 시 더미 데이터 반환\n    return DUMMY_FIXED_INCOME_DATA.map(item => ({\n      ...item,\n      isRealData: false,\n      dataSource: 'Dummy Data (Error)',\n      symbol: FIXED_INCOME_SYMBOLS[item.title] || ''\n    }));\n  }\n};\n\n// Trading Economics URL 매핑 (실제 웹사이트 링크)\nexport const TRADING_ECONOMICS_URLS = {\n  // 기준 금리 - 실제 Trading Economics 페이지\n  '미국 기준 금리': 'https://tradingeconomics.com/united-states/interest-rate',\n  '유로 기준 금리': 'https://tradingeconomics.com/euro-area/interest-rate',\n  '일본 기준 금리': 'https://tradingeconomics.com/japan/interest-rate',\n  '한국 기준 금리': 'https://tradingeconomics.com/south-korea/interest-rate',\n  '스위스 기준 금리': 'https://tradingeconomics.com/switzerland/interest-rate',\n  '영국 기준 금리': 'https://tradingeconomics.com/united-kingdom/interest-rate',\n  '호주 기준 금리': 'https://tradingeconomics.com/australia/interest-rate',\n  '브라질 기준 금리': 'https://tradingeconomics.com/brazil/interest-rate',\n  // US Bond Yields - 실제 Trading Economics 페이지\n  'US 3M': 'https://tradingeconomics.com/united-states/3-month-bill-yield',\n  'US 2Y': 'https://tradingeconomics.com/united-states/2-year-note-yield',\n  'US 10Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\n  'US 30Y': 'https://tradingeconomics.com/united-states/30-year-bond-yield',\n  // Korea Bond Yields - 실제 Trading Economics 페이지\n  'Korea 2Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  'Korea 3Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  'Korea 5Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  'Korea 10Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  'Korea 30Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  // Japan Bond Yields - 실제 Trading Economics 페이지\n  'Japan 2Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  'Japan 3Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  'Japan 5Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  'Japan 10Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  'Japan 30Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  // Germany Bond Yields - 실제 Trading Economics 페이지\n  'Germany 2Y': 'https://tradingeconomics.com/germany/government-bond-yield',\n  'Germany 3Y': 'https://tradingeconomics.com/germany/government-bond-yield',\n  'Germany 5Y': 'https://tradingeconomics.com/germany/government-bond-yield',\n  'Germany 10Y': 'https://tradingeconomics.com/germany/government-bond-yield',\n  'Germany 30Y': 'https://tradingeconomics.com/germany/government-bond-yield'\n};\n\n// 개별 Fixed Income 데이터 가져오기 (주식 API와 비슷한 방식)\nexport const fetchFixedIncomeQuote = async title => {\n  try {\n    console.log(`🔄 Fetching ${title} from Trading Economics...`);\n    const symbol = FIXED_INCOME_SYMBOLS[title];\n    if (!symbol) {\n      throw new Error(`Unknown symbol: ${title}`);\n    }\n    const url = `${BASE_URL}/${symbol}`;\n    console.log(`🔗 URL: ${url}`);\n    const html = await fetchWithProxy(url);\n\n    // 기준금리와 국채 수익률을 다르게 처리\n    let rate;\n    if (title.includes('기준 금리')) {\n      // 기준금리는 Calendar 테이블에서 추출\n      rate = extractInterestRateFromCalendar(html, title);\n    } else {\n      // 국채 수익률은 간단한 로직 사용\n      rate = extractBondYieldFromHTML(html, title);\n    }\n    if (rate) {\n      console.log(`✅ Successfully fetched ${title}: ${rate}%`);\n      return {\n        title: title,\n        value: rate,\n        change: 0.00,\n        // 변화율은 별도로 계산 필요\n        isPositive: true,\n        symbol: symbol,\n        isRealData: true,\n        dataSource: 'Trading Economics'\n      };\n    } else {\n      throw new Error(`No rate found for ${title}`);\n    }\n  } catch (error) {\n    console.error(`❌ Error fetching ${title}:`, error.message);\n\n    // 실패 시 더미 데이터 사용 (주식 API와 동일한 방식)\n    const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === title);\n    if (dummyData) {\n      console.log(`📊 Using dummy data for ${title}`);\n      return {\n        ...dummyData,\n        isRealData: false,\n        dataSource: 'Dummy Data (Error)',\n        symbol: FIXED_INCOME_SYMBOLS[title] || ''\n      };\n    }\n    throw error;\n  }\n};\n\n// 국채 수익률 전용 추출 함수 (간단한 로직)\nconst extractBondYieldFromHTML = (html, title) => {\n  try {\n    console.log(`🔍 Extracting bond yield for ${title}...`);\n\n    // 방법 1: 모든 숫자.숫자% 패턴 찾기\n    const percentagePattern = /(\\d+\\.\\d+)%/g;\n    const matches = html.match(percentagePattern);\n    if (matches && matches.length > 0) {\n      console.log(`📊 Found ${matches.length} percentage numbers for ${title}`);\n      const rates = matches.map(match => {\n        const rateMatch = match.match(/(\\d+\\.\\d+)%/);\n        return rateMatch ? parseFloat(rateMatch[1]) : 0;\n      });\n\n      // 유효한 금리 범위 필터링 (0.1% ~ 20%)\n      const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\n      if (validRates.length > 0) {\n        // 가장 큰 값이 보통 메인 금리\n        const maxRate = Math.max(...validRates);\n        console.log(`✅ Found bond yield for ${title}: ${maxRate}%`);\n        return maxRate;\n      }\n    }\n\n    // 방법 2: 특정 키워드와 함께 있는 금리 찾기\n    const keywordPatterns = [/yield.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?yield/i, /bond.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?bond/i];\n    for (const pattern of keywordPatterns) {\n      const matches = html.match(pattern);\n      if (matches && matches.length > 0) {\n        const rates = matches.map(match => {\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\n        });\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\n        if (validRates.length > 0) {\n          const maxRate = Math.max(...validRates);\n          console.log(`✅ Found bond yield with keyword for ${title}: ${maxRate}%`);\n          return maxRate;\n        }\n      }\n    }\n    console.log(`❌ No valid bond yield found for ${title}`);\n    return null;\n  } catch (error) {\n    console.error(`❌ Error extracting bond yield for ${title}:`, error);\n    return null;\n  }\n};\n\n// 기준금리 전용 추출 함수 (Calendar 테이블에서 추출)\nconst extractInterestRateFromCalendar = (html, title) => {\n  try {\n    console.log(`🔍 Extracting interest rate from calendar for ${title}...`);\n\n    // Trading Economics Calendar 테이블에서 가장 최신의 실제 데이터 TEForcast 값 추출\n\n    // 테이블 패턴 찾기 (Calendar, GMT가 포함된 테이블)\n    const tablePattern = /<table[^>]*>.*?Calendar.*?GMT.*?<\\/table>/is;\n    const tableMatch = html.match(tablePattern);\n    if (!tableMatch) {\n      console.log(`No calendar table found for ${title}`);\n      return null;\n    }\n    const tableHTML = tableMatch[0];\n\n    // 테이블 행들 추출\n    const rowPattern = /<tr[^>]*>.*?<\\/tr>/gis;\n    const rows = tableHTML.match(rowPattern);\n    if (!rows || rows.length < 2) {\n      console.log(`No rows found in calendar table for ${title}`);\n      return null;\n    }\n\n    // 현재 날짜 가져오기\n    const currentDate = new Date();\n    const currentDateString = currentDate.toISOString().split('T')[0]; // YYYY-MM-DD 형식\n\n    console.log(`Current date: ${currentDateString}`);\n\n    // 첫 번째 행은 헤더이므로 제외하고, 두 번째 행부터 검색\n    // 가장 최신의 실제 데이터(Actual 값이 있는 행)의 TEForcast 값 찾기\n    let latestRate = null;\n    let latestDate = null;\n    for (let i = 1; i < rows.length; i++) {\n      const row = rows[i];\n\n      // TD 태그들 추출\n      const tdPattern = /<td[^>]*>(.*?)<\\/td>/gis;\n      const tds = row.match(tdPattern);\n      if (tds && tds.length >= 7) {\n        // Calendar, GMT, Reference, Actual, Previous, Consensus, TEForecast\n        // 첫 번째 TD: 날짜\n        const dateTD = tds[0];\n        // 네 번째 TD: Actual 값\n        const actualTD = tds[3];\n        // 일곱 번째 TD: TEForcast 값\n        const teForcastTD = tds[6];\n\n        // 날짜 추출 (YYYY-MM-DD 형식)\n        const datePattern = /(\\d{4}-\\d{2}-\\d{2})/;\n        const dateMatch = dateTD.match(datePattern);\n        if (dateMatch) {\n          const date = dateMatch[1];\n\n          // 날짜가 현재 날짜보다 미래인지 확인\n          if (date > currentDateString) {\n            console.log(`Skipping future date: ${date}`);\n            continue; // 미래 날짜는 건너뛰기\n          }\n\n          // Actual 값이 있는지 확인 (빈 값이 아닌지)\n          const actualPattern = /(\\d+\\.\\d+)/;\n          const actualMatch = actualTD.match(actualPattern);\n          if (actualMatch) {\n            // Actual 값이 있으면 실제 데이터로 간주\n            const teForcastPattern = /(\\d+\\.\\d+)/;\n            const teForcastMatch = teForcastTD.match(teForcastPattern);\n            if (teForcastMatch) {\n              const rate = parseFloat(teForcastMatch[1]);\n\n              // 더 최신 날짜인지 확인\n              if (!latestDate || date > latestDate) {\n                latestDate = date;\n                latestRate = rate;\n                console.log(`Found actual data: ${rate}% for date: ${date}`);\n              }\n            }\n          } else {\n            console.log(`No actual data for date: ${date}, skipping`);\n          }\n        }\n      }\n    }\n    if (latestRate) {\n      console.log(`Found latest actual rate for ${title}: ${latestRate}% (Date: ${latestDate})`);\n      return latestRate;\n    }\n\n    // 실제 데이터를 찾지 못한 경우, 모든 TD에서 숫자 찾기 (미래 제외)\n    console.log(`No actual data found for ${title}, searching all TDs (excluding future dates)...`);\n    for (let i = 1; i < rows.length; i++) {\n      const row = rows[i];\n\n      // 날짜 추출 (YYYY-MM-DD 형식)\n      const datePattern = /(\\d{4}-\\d{2}-\\d{2})/;\n      const dateMatch = row.match(datePattern);\n      if (dateMatch) {\n        const date = dateMatch[1];\n\n        // 날짜가 현재 날짜보다 미래인지 확인\n        if (date > currentDateString) {\n          continue; // 미래 날짜는 건너뛰기\n        }\n\n        // 모든 숫자.숫자 패턴 찾기\n        const numberPattern = /(\\d+\\.\\d+)/g;\n        const numberMatches = row.match(numberPattern);\n        if (numberMatches && numberMatches.length > 0) {\n          // 가장 큰 값이 보통 메인 금리\n          const rates = numberMatches.map(match => parseFloat(match));\n          const maxRate = Math.max(...rates);\n\n          // 더 최신 날짜인지 확인\n          if (!latestDate || date > latestDate) {\n            latestDate = date;\n            latestRate = maxRate;\n          }\n        }\n      }\n    }\n    if (latestRate) {\n      console.log(`Found latest rate from all TDs for ${title}: ${latestRate}% (Date: ${latestDate})`);\n      return latestRate;\n    }\n    console.log(`No rate found for ${title}`);\n    return null;\n  } catch (error) {\n    console.error(`Error extracting interest rate for ${title}:`, error);\n    return null;\n  }\n};\n\n// 영국 기준금리 전용 함수 (더 정확한 스크래핑)\nexport const fetchUKInterestRate = async () => {\n  try {\n    console.log('🇬🇧 Fetching UK interest rate from Trading Economics...');\n    const url = 'https://tradingeconomics.com/united-kingdom/interest-rate';\n    console.log(`🔗 URL: ${url}`);\n    const html = await fetchWithProxy(url);\n    if (!html) {\n      throw new Error('Failed to fetch HTML');\n    }\n    console.log(`✅ HTML fetched successfully! Length: ${html.length} characters`);\n\n    // 영국 기준금리 전용 추출 함수 사용\n    const ukRate = extractUKInterestRateFromHTML(html);\n    if (ukRate) {\n      console.log(`✅ Successfully extracted UK interest rate: ${ukRate}%`);\n      return {\n        title: '영국 기준 금리',\n        value: ukRate,\n        change: 0.00,\n        isPositive: true,\n        symbol: 'united-kingdom/interest-rate',\n        isRealData: true,\n        dataSource: 'Trading Economics'\n      };\n    } else {\n      throw new Error('No UK interest rate found in HTML');\n    }\n  } catch (error) {\n    console.error('❌ Error fetching UK interest rate:', error);\n\n    // 실패 시 더미 데이터 사용\n    const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === '영국 기준 금리');\n    if (dummyData) {\n      console.log('📊 Using dummy data for UK interest rate');\n      return {\n        ...dummyData,\n        isRealData: false,\n        dataSource: 'Dummy Data (Error)',\n        symbol: 'united-kingdom/interest-rate'\n      };\n    }\n    throw error;\n  }\n};\n\n// 영국 기준금리 추출 함수 (간단한 패턴)\nconst extractUKInterestRateFromHTML = html => {\n  try {\n    console.log('🔍 Extracting UK interest rate from HTML...');\n\n    // 방법 1: 메인 금리 표시 패턴 찾기 (더 구체적인 패턴)\n    const mainRatePatterns = [/interest rate.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?interest rate/i, /bank rate.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?bank rate/i, /boe.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?boe/i, /monetary policy.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?monetary policy/i];\n    for (const pattern of mainRatePatterns) {\n      const matches = html.match(pattern);\n      if (matches && matches.length > 0) {\n        const rates = matches.map(match => {\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\n        });\n\n        // 영국 기준금리는 보통 0.1% ~ 15% 범위\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\n        if (validRates.length > 0) {\n          // 가장 큰 값이 보통 메인 기준금리\n          const maxRate = Math.max(...validRates);\n          console.log(`✅ Found UK interest rate with pattern: ${maxRate}%`);\n          return maxRate;\n        }\n      }\n    }\n\n    // 방법 2: 그래프나 차트에서 현재 값 찾기\n    const chartPatterns = [/current.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?current/i, /latest.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?latest/i, /now.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?now/i];\n    for (const pattern of chartPatterns) {\n      const matches = html.match(pattern);\n      if (matches && matches.length > 0) {\n        const rates = matches.map(match => {\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\n        });\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\n        if (validRates.length > 0) {\n          const maxRate = Math.max(...validRates);\n          console.log(`✅ Found UK interest rate in chart: ${maxRate}%`);\n          return maxRate;\n        }\n      }\n    }\n\n    // 방법 3: 테이블에서 찾기 (더 구체적으로)\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\n    const tables = html.match(tablePattern);\n    if (tables) {\n      for (const table of tables) {\n        // 테이블에서 숫자.숫자% 패턴 찾기\n        const rateMatches = table.match(/(\\d+\\.\\d+)%/g);\n        if (rateMatches) {\n          const rates = rateMatches.map(match => {\n            const rateMatch = match.match(/(\\d+\\.\\d+)%/);\n            return rateMatch ? parseFloat(rateMatch[1]) : 0;\n          });\n          const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\n          if (validRates.length > 0) {\n            const maxRate = Math.max(...validRates);\n            console.log(`✅ Found UK interest rate in table: ${maxRate}%`);\n            return maxRate;\n          }\n        }\n      }\n    }\n\n    // 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\n    const allPercentagePattern = /(\\d+\\.\\d+)%/g;\n    const allMatches = html.match(allPercentagePattern);\n    if (allMatches && allMatches.length > 0) {\n      const rates = allMatches.map(match => {\n        const rateMatch = match.match(/(\\d+\\.\\d+)%/);\n        return rateMatch ? parseFloat(rateMatch[1]) : 0;\n      });\n      const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\n      if (validRates.length > 0) {\n        const maxRate = Math.max(...validRates);\n        console.log(`✅ Found UK interest rate from all percentages: ${maxRate}%`);\n        return maxRate;\n      }\n    }\n    console.log('❌ No UK interest rate found');\n    return null;\n  } catch (error) {\n    console.error('❌ Error extracting UK interest rate:', error);\n    return null;\n  }\n};\n\n// 호주 기준금리 전용 함수 추가\nexport const fetchAustraliaInterestRate = async () => {\n  try {\n    console.log('🇦🇺 Fetching Australia interest rate from Trading Economics...');\n    const url = 'https://tradingeconomics.com/australia/interest-rate';\n    console.log(`🔗 URL: ${url}`);\n    const html = await fetchWithProxy(url);\n    if (!html) {\n      throw new Error('Failed to fetch HTML');\n    }\n    console.log(`✅ HTML fetched successfully! Length: ${html.length} characters`);\n\n    // 호주 기준금리 전용 추출 함수 사용\n    const ausRate = extractAustraliaInterestRateFromHTML(html);\n    if (ausRate) {\n      console.log(`✅ Successfully extracted Australia interest rate: ${ausRate}%`);\n      return {\n        title: '호주 기준 금리',\n        value: ausRate,\n        change: 0.00,\n        isPositive: true,\n        symbol: 'australia/interest-rate',\n        isRealData: true,\n        dataSource: 'Trading Economics'\n      };\n    } else {\n      throw new Error('No Australia interest rate found in HTML');\n    }\n  } catch (error) {\n    console.error('❌ Error fetching Australia interest rate:', error);\n\n    // 실패 시 더미 데이터 사용\n    const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === '호주 기준 금리');\n    if (dummyData) {\n      console.log('📊 Using dummy data for Australia interest rate');\n      return {\n        ...dummyData,\n        isRealData: false,\n        dataSource: 'Dummy Data (Error)',\n        symbol: 'australia/interest-rate'\n      };\n    }\n    throw error;\n  }\n};\n\n// 호주 기준금리 추출 함수\nconst extractAustraliaInterestRateFromHTML = html => {\n  try {\n    console.log('🔍 Extracting Australia interest rate from HTML...');\n\n    // 방법 1: 메인 금리 표시 패턴 찾기\n    const mainRatePatterns = [/interest rate.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?interest rate/i, /rba.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?rba/i, /reserve bank.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?reserve bank/i, /monetary policy.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?monetary policy/i];\n    for (const pattern of mainRatePatterns) {\n      const matches = html.match(pattern);\n      if (matches && matches.length > 0) {\n        const rates = matches.map(match => {\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\n        });\n\n        // 호주 기준금리는 보통 0.1% ~ 15% 범위\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\n        if (validRates.length > 0) {\n          // 가장 큰 값이 보통 메인 기준금리\n          const maxRate = Math.max(...validRates);\n          console.log(`✅ Found Australia interest rate with pattern: ${maxRate}%`);\n          return maxRate;\n        }\n      }\n    }\n\n    // 방법 2: 그래프나 차트에서 현재 값 찾기\n    const chartPatterns = [/current.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?current/i, /latest.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?latest/i, /now.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?now/i];\n    for (const pattern of chartPatterns) {\n      const matches = html.match(pattern);\n      if (matches && matches.length > 0) {\n        const rates = matches.map(match => {\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\n        });\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\n        if (validRates.length > 0) {\n          const maxRate = Math.max(...validRates);\n          console.log(`✅ Found Australia interest rate in chart: ${maxRate}%`);\n          return maxRate;\n        }\n      }\n    }\n\n    // 방법 3: 테이블에서 찾기\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\n    const tables = html.match(tablePattern);\n    if (tables) {\n      for (const table of tables) {\n        // 테이블에서 숫자.숫자% 패턴 찾기\n        const rateMatches = table.match(/(\\d+\\.\\d+)%/g);\n        if (rateMatches) {\n          const rates = rateMatches.map(match => {\n            const rateMatch = match.match(/(\\d+\\.\\d+)%/);\n            return rateMatch ? parseFloat(rateMatch[1]) : 0;\n          });\n          const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\n          if (validRates.length > 0) {\n            const maxRate = Math.max(...validRates);\n            console.log(`✅ Found Australia interest rate in table: ${maxRate}%`);\n            return maxRate;\n          }\n        }\n      }\n    }\n\n    // 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\n    const allPercentagePattern = /(\\d+\\.\\d+)%/g;\n    const allMatches = html.match(allPercentagePattern);\n    if (allMatches && allMatches.length > 0) {\n      const rates = allMatches.map(match => {\n        const rateMatch = match.match(/(\\d+\\.\\d+)%/);\n        return rateMatch ? parseFloat(rateMatch[1]) : 0;\n      });\n      const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\n      if (validRates.length > 0) {\n        const maxRate = Math.max(...validRates);\n        console.log(`✅ Found Australia interest rate from all percentages: ${maxRate}%`);\n        return maxRate;\n      }\n    }\n    console.log('❌ No Australia interest rate found');\n    return null;\n  } catch (error) {\n    console.error('❌ Error extracting Australia interest rate:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["BASE_URL","FIXED_INCOME_SYMBOLS","PROXY_SERVICES","fetchWithProxy","url","proxyIndex","length","Error","proxyUrl","console","log","substring","response","fetch","method","headers","timeout","ok","status","html","text","error","message","extractInterestRateFromHTML","title","percentagePattern","matches","match","rates","map","rateMatch","parseFloat","validRates","filter","rate","maxRate","Math","max","keywordPatterns","pattern","tablePattern","tables","table","tableMatches","DUMMY_FIXED_INCOME_DATA","value","change","isPositive","symbol","generateRealTimeData","item","variation","random","newValue","newChange","round","fetchInterestRates","realTimeData","includes","fetchInterestRatesFromTradingEconomics","interestRates","extractInterestRatesFromCountryList","tableIndex","rowPattern","rows","i","row","tdPattern","tds","countryTD","rateTD","countryPattern","countryMatch","ratePattern","country","trim","rateText","numberPattern","numberMatch","majorCountries","mappedTitle","push","replace","toUpperCase","isRealData","dataSource","fetchBondYields","fetchAllFixedIncomeData","promises","Object","entries","fetchUKInterestRate","then","data","catch","dummyData","find","fetchFixedIncomeQuote","results","Promise","all","validData","keys","realDataCount","TRADING_ECONOMICS_URLS","extractInterestRateFromCalendar","extractBondYieldFromHTML","tableMatch","tableHTML","currentDate","Date","currentDateString","toISOString","split","latestRate","latestDate","dateTD","actualTD","teForcastTD","datePattern","dateMatch","date","actualPattern","actualMatch","teForcastPattern","teForcastMatch","numberMatches","ukRate","extractUKInterestRateFromHTML","mainRatePatterns","chartPatterns","rateMatches","allPercentagePattern","allMatches","fetchAustraliaInterestRate","ausRate","extractAustraliaInterestRateFromHTML"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/fixedIncomeApi.js"],"sourcesContent":["// Trading Economics 웹사이트에서 최신 데이터를 가져오는 Fixed Income 서비스\r\nconst BASE_URL = 'https://tradingeconomics.com';\r\n\r\n// Fixed Income 심볼 매핑 (주식 API와 비슷한 방식)\r\nconst FIXED_INCOME_SYMBOLS = {\r\n  // 기준 금리\r\n  '미국 기준 금리': 'united-states/interest-rate',\r\n  '유로 기준 금리': 'euro-area/interest-rate',\r\n  '일본 기준 금리': 'japan/interest-rate',\r\n  '한국 기준 금리': 'south-korea/interest-rate',\r\n  '스위스 기준 금리': 'switzerland/interest-rate',\r\n  '영국 기준 금리': 'united-kingdom/interest-rate',\r\n  '호주 기준 금리': 'australia/interest-rate',\r\n  '브라질 기준 금리': 'brazil/interest-rate',\r\n  \r\n  // 국채 수익률\r\n  'US 3M': 'united-states/3-month-bill-yield',\r\n  'US 2Y': 'united-states/2-year-note-yield',\r\n  'US 10Y': 'united-states/government-bond-yield',\r\n  'US 30Y': 'united-states/30-year-bond-yield',\r\n  'Korea 10Y': 'south-korea/government-bond-yield',\r\n  'Japan 10Y': 'japan/government-bond-yield',\r\n  'Germany 10Y': 'germany/government-bond-yield'\r\n};\r\n\r\n// 프록시 서버들을 사용한 웹 스크래핑 (주식 API와 동일)\r\nconst PROXY_SERVICES = [\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://corsproxy.io/?',\r\n  'https://thingproxy.freeboard.io/fetch/',\r\n  'https://cors.bridged.cc/',\r\n  'https://api.codetabs.com/v1/proxy?quest=',\r\n  'https://cors.eu.org/',\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  '' // 직접 호출도 시도\r\n];\r\n\r\n// 프록시를 사용한 웹 스크래핑 (주식 API와 동일한 방식)\r\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\r\n  if (proxyIndex >= PROXY_SERVICES.length) {\r\n    throw new Error('All proxy attempts failed');\r\n  }\r\n\r\n  try {\r\n    const proxyUrl = PROXY_SERVICES[proxyIndex] + url;\r\n    console.log(`🔗 Trying proxy ${proxyIndex + 1}/${PROXY_SERVICES.length}: ${proxyUrl.substring(0, 50)}...`);\r\n    \r\n    const response = await fetch(proxyUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n        'Accept-Language': 'en-US,en;q=0.9',\r\n        'Accept-Encoding': 'gzip, deflate, br',\r\n        'Connection': 'keep-alive',\r\n        'Upgrade-Insecure-Requests': '1'\r\n      },\r\n      timeout: 10000 // 10초 타임아웃\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const html = await response.text();\r\n    \r\n    if (html.length < 1000) {\r\n      throw new Error('Response too short, likely an error page');\r\n    }\r\n    \r\n    console.log(`✅ Proxy ${proxyIndex + 1} successful! HTML length: ${html.length} characters`);\r\n    return html;\r\n  } catch (error) {\r\n    console.log(`❌ Proxy ${proxyIndex + 1} failed: ${error.message}`);\r\n    return fetchWithProxy(url, proxyIndex + 1);\r\n  }\r\n};\r\n\r\n// HTML에서 금리 데이터 추출 (간단하고 효과적인 방식)\r\nconst extractInterestRateFromHTML = (html, title) => {\r\n  try {\r\n    console.log(`🔍 Extracting data for ${title} from HTML...`);\r\n    \r\n    // 방법 1: 모든 숫자.숫자% 패턴 찾기\r\n    const percentagePattern = /(\\d+\\.\\d+)%/g;\r\n    const matches = html.match(percentagePattern);\r\n    \r\n    if (matches && matches.length > 0) {\r\n      console.log(`📊 Found ${matches.length} percentage numbers for ${title}`);\r\n      \r\n      const rates = matches.map(match => {\r\n        const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n        return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n      });\r\n      \r\n      // 유효한 금리 범위 필터링 (0.1% ~ 20%)\r\n      const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\r\n      \r\n      if (validRates.length > 0) {\r\n        // 가장 큰 값이 보통 메인 금리\r\n        const maxRate = Math.max(...validRates);\r\n        console.log(`✅ Found rate for ${title}: ${maxRate}%`);\r\n        return maxRate;\r\n      }\r\n    }\r\n    \r\n    // 방법 2: 특정 키워드와 함께 있는 금리 찾기\r\n    const keywordPatterns = [\r\n      /interest rate.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?interest rate/i,\r\n      /yield.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?yield/i,\r\n      /bond.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?bond/i,\r\n      /rate.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?rate/i\r\n    ];\r\n    \r\n    for (const pattern of keywordPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\r\n        if (validRates.length > 0) {\r\n          const maxRate = Math.max(...validRates);\r\n          console.log(`✅ Found rate with keyword for ${title}: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 3: 테이블에서 찾기\r\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\r\n    const tables = html.match(tablePattern);\r\n    \r\n    if (tables) {\r\n      for (const table of tables) {\r\n        const tableMatches = table.match(/(\\d+\\.\\d+)%/g);\r\n        if (tableMatches) {\r\n          const rates = tableMatches.map(match => {\r\n            const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n            return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n          });\r\n          \r\n          const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\r\n          if (validRates.length > 0) {\r\n            const maxRate = Math.max(...validRates);\r\n            console.log(`✅ Found rate in table for ${title}: ${maxRate}%`);\r\n            return maxRate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`❌ No valid rate found for ${title}`);\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    console.error(`❌ Error extracting data for ${title}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 2024년 12월 기준 최신 더미 데이터 (실제 시장 상황 반영)\r\nconst DUMMY_FIXED_INCOME_DATA = [\r\n  // Standard Interest Rates (기준 금리) - 2024년 12월 기준\r\n  { title: '미국 기준 금리', value: 4.375, change: 0.00, isPositive: true, symbol: 'FEDFUNDS' },\r\n  { title: '유로 기준 금리', value: 4.50, change: 0.00, isPositive: true, symbol: 'ECBREFI' },\r\n  { title: '일본 기준 금리', value: -0.10, change: 0.00, isPositive: false, symbol: 'BOJDF' },\r\n  { title: '한국 기준 금리', value: 2.50, change: 0.00, isPositive: true, symbol: 'KORREPO' },\r\n  { title: '스위스 기준 금리', value: 1.75, change: 0.00, isPositive: true, symbol: 'SNBREFI' },\r\n  { title: '영국 기준 금리', value: 5.25, change: 0.00, isPositive: true, symbol: 'BOEREFI' },\r\n  { title: '호주 기준 금리', value: 4.35, change: 0.00, isPositive: true, symbol: 'RBAREFI' },\r\n  { title: '브라질 기준 금리', value: 12.25, change: 0.00, isPositive: true, symbol: 'BRAREFI' },\r\n  \r\n  // US Bond Yields - 2024년 12월 기준 최신 수익률\r\n  { title: 'US 3M', value: 5.45, change: 0.02, isPositive: true, symbol: 'US3M' },\r\n  { title: 'US 2Y', value: 4.78, change: 0.05, isPositive: true, symbol: 'US2Y' },\r\n  { title: 'US 10Y', value: 4.25, change: 0.08, isPositive: true, symbol: 'US10Y' },\r\n  { title: 'US 30Y', value: 4.45, change: 0.12, isPositive: true, symbol: 'US30Y' },\r\n  \r\n  // Korea Bond Yields - 2024년 12월 기준 최신 수익률\r\n  { title: 'Korea 2Y', value: 3.45, change: 0.03, isPositive: true, symbol: 'KR2Y' },\r\n  { title: 'Korea 3Y', value: 3.52, change: 0.04, isPositive: true, symbol: 'KR3Y' },\r\n  { title: 'Korea 5Y', value: 3.68, change: 0.06, isPositive: true, symbol: 'KR5Y' },\r\n  { title: 'Korea 10Y', value: 3.85, change: 0.08, isPositive: true, symbol: 'KR10Y' },\r\n  { title: 'Korea 30Y', value: 4.12, change: 0.10, isPositive: true, symbol: 'KR30Y' },\r\n  \r\n  // Japan Bond Yields - 2024년 12월 기준 최신 수익률\r\n  { title: 'Japan 2Y', value: 0.12, change: 0.01, isPositive: true, symbol: 'JP2Y' },\r\n  { title: 'Japan 3Y', value: 0.15, change: 0.02, isPositive: true, symbol: 'JP3Y' },\r\n  { title: 'Japan 5Y', value: 0.25, change: 0.03, isPositive: true, symbol: 'JP5Y' },\r\n  { title: 'Japan 10Y', value: 0.45, change: 0.05, isPositive: true, symbol: 'JP10Y' },\r\n  { title: 'Japan 30Y', value: 1.25, change: 0.08, isPositive: true, symbol: 'JP30Y' },\r\n  \r\n  // Germany Bond Yields - 2024년 12월 기준 최신 수익률\r\n  { title: 'Germany 2Y', value: 3.12, change: 0.04, isPositive: true, symbol: 'DE2Y' },\r\n  { title: 'Germany 3Y', value: 3.25, change: 0.05, isPositive: true, symbol: 'DE3Y' },\r\n  { title: 'Germany 5Y', value: 3.45, change: 0.06, isPositive: true, symbol: 'DE5Y' },\r\n  { title: 'Germany 10Y', value: 2.85, change: 0.08, isPositive: true, symbol: 'DE10Y' },\r\n  { title: 'Germany 30Y', value: 3.15, change: 0.10, isPositive: true, symbol: 'DE30Y' }\r\n];\r\n\r\n// 실시간 데이터 시뮬레이션 (더미 데이터에 약간의 변동 추가)\r\nconst generateRealTimeData = () => {\r\n  return DUMMY_FIXED_INCOME_DATA.map(item => {\r\n    // 약간의 랜덤 변동 추가 (±0.05% 범위)\r\n    const variation = (Math.random() - 0.5) * 0.1;\r\n    const newValue = item.value + variation;\r\n    const newChange = variation;\r\n    \r\n    return {\r\n      ...item,\r\n      value: Math.round(newValue * 100) / 100,\r\n      change: Math.round(newChange * 100) / 100,\r\n      isPositive: newChange >= 0\r\n    };\r\n  });\r\n};\r\n\r\n// 기준 금리 데이터 가져오기 (실시간 시뮬레이션)\r\nexport const fetchInterestRates = async () => {\r\n  try {\r\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\r\n    const realTimeData = generateRealTimeData();\r\n    return realTimeData.filter(item => item.title.includes('기준 금리'));\r\n  } catch (error) {\r\n    console.error('Error fetching interest rates:', error);\r\n    return DUMMY_FIXED_INCOME_DATA.filter(item => item.title.includes('기준 금리'));\r\n  }\r\n};\r\n\r\n// Trading Economics에서 기준금리 데이터 가져오기\r\nexport const fetchInterestRatesFromTradingEconomics = async () => {\r\n  try {\r\n    console.log('🌐 Fetching interest rates from Trading Economics...');\r\n    \r\n    // Trading Economics 국가별 기준금리 페이지 URL\r\n    const url = 'https://ko.tradingeconomics.com/country-list/interest-rate';\r\n    \r\n    console.log(`🔗 Fetching from: ${url}`);\r\n    const html = await fetchWithProxy(url);\r\n    \r\n    if (!html) {\r\n      console.log('❌ Failed to fetch HTML from Trading Economics');\r\n      return null;\r\n    }\r\n    \r\n    console.log(`✅ HTML fetched successfully! Length: ${html.length} characters`);\r\n    \r\n    // HTML에서 기준금리 데이터 추출\r\n    const interestRates = extractInterestRatesFromCountryList(html);\r\n    \r\n    if (interestRates && interestRates.length > 0) {\r\n      console.log(`✅ Successfully extracted ${interestRates.length} interest rates`);\r\n      return interestRates;\r\n    } else {\r\n      console.log('❌ No interest rates found in HTML');\r\n      return null;\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching interest rates from Trading Economics:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Trading Economics 국가별 기준금리 페이지에서 데이터 추출\r\nconst extractInterestRatesFromCountryList = (html) => {\r\n  try {\r\n    console.log('🔍 Extracting interest rates from country list...');\r\n    \r\n    const interestRates = [];\r\n    \r\n    // 국가별 기준금리 테이블 패턴 찾기\r\n    // 일반적으로 <table> 태그 안에 국가명과 기준금리가 포함됨\r\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\r\n    const tables = html.match(tablePattern);\r\n    \r\n    if (!tables || tables.length === 0) {\r\n      console.log('❌ No tables found in HTML');\r\n      return null;\r\n    }\r\n    \r\n    console.log(`📊 Found ${tables.length} tables in HTML`);\r\n    \r\n    // 각 테이블에서 데이터 추출\r\n    for (let tableIndex = 0; tableIndex < tables.length; tableIndex++) {\r\n      const table = tables[tableIndex];\r\n      \r\n      // 테이블 행들 추출\r\n      const rowPattern = /<tr[^>]*>.*?<\\/tr>/gis;\r\n      const rows = table.match(rowPattern);\r\n      \r\n      if (!rows || rows.length < 2) {\r\n        continue; // 헤더만 있거나 데이터가 없는 테이블은 건너뛰기\r\n      }\r\n      \r\n      console.log(`📋 Processing table ${tableIndex + 1} with ${rows.length} rows`);\r\n      \r\n      // 첫 번째 행은 헤더이므로 제외하고, 두 번째 행부터 검색\r\n      for (let i = 1; i < rows.length; i++) {\r\n        const row = rows[i];\r\n        \r\n        // TD 태그들 추출\r\n        const tdPattern = /<td[^>]*>(.*?)<\\/td>/gis;\r\n        const tds = row.match(tdPattern);\r\n        \r\n        if (tds && tds.length >= 2) {\r\n          // 첫 번째 TD: 국가명\r\n          const countryTD = tds[0];\r\n          // 두 번째 TD: 기준금리\r\n          const rateTD = tds[1];\r\n          \r\n          // 국가명 추출\r\n          const countryPattern = />([^<]+)</;\r\n          const countryMatch = countryTD.match(countryPattern);\r\n          \r\n          // 기준금리 추출\r\n          const ratePattern = />([^<]+)</;\r\n          const rateMatch = rateTD.match(ratePattern);\r\n          \r\n          if (countryMatch && rateMatch) {\r\n            const country = countryMatch[1].trim();\r\n            const rateText = rateMatch[1].trim();\r\n            \r\n            // 숫자만 추출 (퍼센트 기호 제거)\r\n            const numberPattern = /(\\d+\\.?\\d*)/;\r\n            const numberMatch = rateText.match(numberPattern);\r\n            \r\n            if (numberMatch) {\r\n              const rate = parseFloat(numberMatch[1]);\r\n              \r\n              // 주요 국가들만 필터링\r\n              const majorCountries = {\r\n                '미국': '미국 기준 금리',\r\n                'United States': '미국 기준 금리',\r\n                '유로': '유로 기준 금리',\r\n                'Euro Area': '유로 기준 금리',\r\n                '일본': '일본 기준 금리',\r\n                'Japan': '일본 기준 금리',\r\n                '한국': '한국 기준 금리',\r\n                'South Korea': '한국 기준 금리',\r\n                '스위스': '스위스 기준 금리',\r\n                'Switzerland': '스위스 기준 금리',\r\n                '영국': '영국 기준 금리',\r\n                'United Kingdom': '영국 기준 금리',\r\n                '호주': '호주 기준 금리',\r\n                'Australia': '호주 기준 금리',\r\n                '브라질': '브라질 기준 금리',\r\n                'Brazil': '브라질 기준 금리'\r\n              };\r\n              \r\n              const mappedTitle = majorCountries[country];\r\n              if (mappedTitle) {\r\n                console.log(`✅ Found ${country}: ${rate}% -> ${mappedTitle}`);\r\n                interestRates.push({\r\n                  title: mappedTitle,\r\n                  value: rate,\r\n                  change: 0.00, // 변화율은 별도로 계산 필요\r\n                  isPositive: true,\r\n                  symbol: mappedTitle.replace(' 기준 금리', '').toUpperCase(),\r\n                  isRealData: true,\r\n                  dataSource: 'Trading Economics'\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`📊 Extracted ${interestRates.length} interest rates from Trading Economics`);\r\n    return interestRates;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error extracting interest rates from country list:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 채권 수익률 데이터 가져오기 (실시간 시뮬레이션)\r\nexport const fetchBondYields = async () => {\r\n  try {\r\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\r\n    const realTimeData = generateRealTimeData();\r\n    return realTimeData.filter(item => !item.title.includes('기준 금리'));\r\n  } catch (error) {\r\n    console.error('Error fetching bond yields:', error);\r\n    return DUMMY_FIXED_INCOME_DATA.filter(item => !item.title.includes('기준 금리'));\r\n  }\r\n};\r\n\r\n// 모든 Fixed Income 데이터 가져오기 (주식 API와 비슷한 방식)\r\nexport const fetchAllFixedIncomeData = async () => {\r\n  try {\r\n    console.log('🔄 Fetching all Fixed Income data from Trading Economics...');\r\n    \r\n    const promises = [];\r\n    \r\n    // 모든 Fixed Income 심볼에 대해 병렬로 데이터 가져오기 (주식 API와 동일한 방식)\r\n    for (const [title, symbol] of Object.entries(FIXED_INCOME_SYMBOLS)) {\r\n      // 영국 기준금리는 특별한 함수 사용\r\n      if (title === '영국 기준 금리') {\r\n        promises.push(\r\n          fetchUKInterestRate()\r\n            .then(data => {\r\n              console.log(`✅ ${title}: ${data.value}% (${data.isRealData ? 'Real' : 'Dummy'})`);\r\n              return data;\r\n            })\r\n            .catch(error => {\r\n              console.log(`❌ Error fetching ${title}:`, error.message);\r\n              // 개별 실패 시 더미 데이터 사용\r\n              const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === title);\r\n              if (dummyData) {\r\n                console.log(`📊 Using dummy data for ${title}`);\r\n                return {\r\n                  ...dummyData,\r\n                  isRealData: false,\r\n                  dataSource: 'Dummy Data (Error)',\r\n                  symbol: symbol\r\n                };\r\n              }\r\n              return null;\r\n            })\r\n        );\r\n      } else {\r\n        // 다른 항목들은 기존 방식 사용\r\n        promises.push(\r\n          fetchFixedIncomeQuote(title)\r\n            .then(data => {\r\n              console.log(`✅ ${title}: ${data.value}% (${data.isRealData ? 'Real' : 'Dummy'})`);\r\n              return data;\r\n            })\r\n            .catch(error => {\r\n              console.log(`❌ Error fetching ${title}:`, error.message);\r\n              // 개별 실패 시 더미 데이터 사용\r\n              const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === title);\r\n              if (dummyData) {\r\n                console.log(`📊 Using dummy data for ${title}`);\r\n                return {\r\n                  ...dummyData,\r\n                  isRealData: false,\r\n                  dataSource: 'Dummy Data (Error)',\r\n                  symbol: symbol\r\n                };\r\n              }\r\n              return null;\r\n            })\r\n        );\r\n      }\r\n    }\r\n    \r\n    // 모든 요청 완료 대기\r\n    const results = await Promise.all(promises);\r\n    \r\n    // null 값 필터링\r\n    const validData = results.filter(data => data !== null);\r\n    \r\n    console.log(`✅ Successfully loaded ${validData.length}/${Object.keys(FIXED_INCOME_SYMBOLS).length} Fixed Income rates`);\r\n    \r\n    // 실제 데이터가 있는지 확인\r\n    const realDataCount = validData.filter(item => item.isRealData).length;\r\n    if (realDataCount === 0) {\r\n      console.log('⚠️ No real data available, showing dummy data');\r\n    } else {\r\n      console.log(`✅ ${realDataCount} real Fixed Income rates loaded`);\r\n    }\r\n    \r\n    return validData;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching all Fixed Income data:', error);\r\n    console.log('📊 Falling back to dummy data...');\r\n    \r\n    // 전체 실패 시 더미 데이터 반환\r\n    return DUMMY_FIXED_INCOME_DATA.map(item => ({\r\n      ...item,\r\n      isRealData: false,\r\n      dataSource: 'Dummy Data (Error)',\r\n      symbol: FIXED_INCOME_SYMBOLS[item.title] || ''\r\n    }));\r\n  }\r\n};\r\n\r\n// Trading Economics URL 매핑 (실제 웹사이트 링크)\r\nexport const TRADING_ECONOMICS_URLS = {\r\n  // 기준 금리 - 실제 Trading Economics 페이지\r\n  '미국 기준 금리': 'https://tradingeconomics.com/united-states/interest-rate',\r\n  '유로 기준 금리': 'https://tradingeconomics.com/euro-area/interest-rate',\r\n  '일본 기준 금리': 'https://tradingeconomics.com/japan/interest-rate',\r\n  '한국 기준 금리': 'https://tradingeconomics.com/south-korea/interest-rate',\r\n  '스위스 기준 금리': 'https://tradingeconomics.com/switzerland/interest-rate',\r\n  '영국 기준 금리': 'https://tradingeconomics.com/united-kingdom/interest-rate',\r\n  '호주 기준 금리': 'https://tradingeconomics.com/australia/interest-rate',\r\n  '브라질 기준 금리': 'https://tradingeconomics.com/brazil/interest-rate',\r\n  \r\n  // US Bond Yields - 실제 Trading Economics 페이지\r\n  'US 3M': 'https://tradingeconomics.com/united-states/3-month-bill-yield',\r\n  'US 2Y': 'https://tradingeconomics.com/united-states/2-year-note-yield',\r\n  'US 10Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\r\n  'US 30Y': 'https://tradingeconomics.com/united-states/30-year-bond-yield',\r\n  \r\n  // Korea Bond Yields - 실제 Trading Economics 페이지\r\n  'Korea 2Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 3Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 5Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 10Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 30Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  \r\n  // Japan Bond Yields - 실제 Trading Economics 페이지\r\n  'Japan 2Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 3Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 5Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 10Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 30Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  \r\n  // Germany Bond Yields - 실제 Trading Economics 페이지\r\n  'Germany 2Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 3Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 5Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 10Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 30Y': 'https://tradingeconomics.com/germany/government-bond-yield'\r\n}; \r\n\r\n// 개별 Fixed Income 데이터 가져오기 (주식 API와 비슷한 방식)\r\nexport const fetchFixedIncomeQuote = async (title) => {\r\n  try {\r\n    console.log(`🔄 Fetching ${title} from Trading Economics...`);\r\n    \r\n    const symbol = FIXED_INCOME_SYMBOLS[title];\r\n    if (!symbol) {\r\n      throw new Error(`Unknown symbol: ${title}`);\r\n    }\r\n    \r\n    const url = `${BASE_URL}/${symbol}`;\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const html = await fetchWithProxy(url);\r\n    \r\n    // 기준금리와 국채 수익률을 다르게 처리\r\n    let rate;\r\n    if (title.includes('기준 금리')) {\r\n      // 기준금리는 Calendar 테이블에서 추출\r\n      rate = extractInterestRateFromCalendar(html, title);\r\n    } else {\r\n      // 국채 수익률은 간단한 로직 사용\r\n      rate = extractBondYieldFromHTML(html, title);\r\n    }\r\n    \r\n    if (rate) {\r\n      console.log(`✅ Successfully fetched ${title}: ${rate}%`);\r\n      return {\r\n        title: title,\r\n        value: rate,\r\n        change: 0.00, // 변화율은 별도로 계산 필요\r\n        isPositive: true,\r\n        symbol: symbol,\r\n        isRealData: true,\r\n        dataSource: 'Trading Economics'\r\n      };\r\n    } else {\r\n      throw new Error(`No rate found for ${title}`);\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error(`❌ Error fetching ${title}:`, error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용 (주식 API와 동일한 방식)\r\n    const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === title);\r\n    if (dummyData) {\r\n      console.log(`📊 Using dummy data for ${title}`);\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)',\r\n        symbol: FIXED_INCOME_SYMBOLS[title] || ''\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// 국채 수익률 전용 추출 함수 (간단한 로직)\r\nconst extractBondYieldFromHTML = (html, title) => {\r\n  try {\r\n    console.log(`🔍 Extracting bond yield for ${title}...`);\r\n    \r\n    // 방법 1: 모든 숫자.숫자% 패턴 찾기\r\n    const percentagePattern = /(\\d+\\.\\d+)%/g;\r\n    const matches = html.match(percentagePattern);\r\n    \r\n    if (matches && matches.length > 0) {\r\n      console.log(`📊 Found ${matches.length} percentage numbers for ${title}`);\r\n      \r\n      const rates = matches.map(match => {\r\n        const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n        return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n      });\r\n      \r\n      // 유효한 금리 범위 필터링 (0.1% ~ 20%)\r\n      const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\r\n      \r\n      if (validRates.length > 0) {\r\n        // 가장 큰 값이 보통 메인 금리\r\n        const maxRate = Math.max(...validRates);\r\n        console.log(`✅ Found bond yield for ${title}: ${maxRate}%`);\r\n        return maxRate;\r\n      }\r\n    }\r\n    \r\n    // 방법 2: 특정 키워드와 함께 있는 금리 찾기\r\n    const keywordPatterns = [\r\n      /yield.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?yield/i,\r\n      /bond.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?bond/i\r\n    ];\r\n    \r\n    for (const pattern of keywordPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\r\n        if (validRates.length > 0) {\r\n          const maxRate = Math.max(...validRates);\r\n          console.log(`✅ Found bond yield with keyword for ${title}: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`❌ No valid bond yield found for ${title}`);\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    console.error(`❌ Error extracting bond yield for ${title}:`, error);\r\n    return null;\r\n  }\r\n}; \r\n\r\n// 기준금리 전용 추출 함수 (Calendar 테이블에서 추출)\r\nconst extractInterestRateFromCalendar = (html, title) => {\r\n  try {\r\n    console.log(`🔍 Extracting interest rate from calendar for ${title}...`);\r\n    \r\n    // Trading Economics Calendar 테이블에서 가장 최신의 실제 데이터 TEForcast 값 추출\r\n    \r\n    // 테이블 패턴 찾기 (Calendar, GMT가 포함된 테이블)\r\n    const tablePattern = /<table[^>]*>.*?Calendar.*?GMT.*?<\\/table>/is;\r\n    const tableMatch = html.match(tablePattern);\r\n    \r\n    if (!tableMatch) {\r\n      console.log(`No calendar table found for ${title}`);\r\n      return null;\r\n    }\r\n    \r\n    const tableHTML = tableMatch[0];\r\n    \r\n    // 테이블 행들 추출\r\n    const rowPattern = /<tr[^>]*>.*?<\\/tr>/gis;\r\n    const rows = tableHTML.match(rowPattern);\r\n    \r\n    if (!rows || rows.length < 2) {\r\n      console.log(`No rows found in calendar table for ${title}`);\r\n      return null;\r\n    }\r\n    \r\n    // 현재 날짜 가져오기\r\n    const currentDate = new Date();\r\n    const currentDateString = currentDate.toISOString().split('T')[0]; // YYYY-MM-DD 형식\r\n    \r\n    console.log(`Current date: ${currentDateString}`);\r\n    \r\n    // 첫 번째 행은 헤더이므로 제외하고, 두 번째 행부터 검색\r\n    // 가장 최신의 실제 데이터(Actual 값이 있는 행)의 TEForcast 값 찾기\r\n    let latestRate = null;\r\n    let latestDate = null;\r\n    \r\n    for (let i = 1; i < rows.length; i++) {\r\n      const row = rows[i];\r\n      \r\n      // TD 태그들 추출\r\n      const tdPattern = /<td[^>]*>(.*?)<\\/td>/gis;\r\n      const tds = row.match(tdPattern);\r\n      \r\n      if (tds && tds.length >= 7) { // Calendar, GMT, Reference, Actual, Previous, Consensus, TEForecast\r\n        // 첫 번째 TD: 날짜\r\n        const dateTD = tds[0];\r\n        // 네 번째 TD: Actual 값\r\n        const actualTD = tds[3];\r\n        // 일곱 번째 TD: TEForcast 값\r\n        const teForcastTD = tds[6];\r\n        \r\n        // 날짜 추출 (YYYY-MM-DD 형식)\r\n        const datePattern = /(\\d{4}-\\d{2}-\\d{2})/;\r\n        const dateMatch = dateTD.match(datePattern);\r\n        \r\n        if (dateMatch) {\r\n          const date = dateMatch[1];\r\n          \r\n          // 날짜가 현재 날짜보다 미래인지 확인\r\n          if (date > currentDateString) {\r\n            console.log(`Skipping future date: ${date}`);\r\n            continue; // 미래 날짜는 건너뛰기\r\n          }\r\n          \r\n          // Actual 값이 있는지 확인 (빈 값이 아닌지)\r\n          const actualPattern = /(\\d+\\.\\d+)/;\r\n          const actualMatch = actualTD.match(actualPattern);\r\n          \r\n          if (actualMatch) {\r\n            // Actual 값이 있으면 실제 데이터로 간주\r\n            const teForcastPattern = /(\\d+\\.\\d+)/;\r\n            const teForcastMatch = teForcastTD.match(teForcastPattern);\r\n            \r\n            if (teForcastMatch) {\r\n              const rate = parseFloat(teForcastMatch[1]);\r\n              \r\n              // 더 최신 날짜인지 확인\r\n              if (!latestDate || date > latestDate) {\r\n                latestDate = date;\r\n                latestRate = rate;\r\n                console.log(`Found actual data: ${rate}% for date: ${date}`);\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`No actual data for date: ${date}, skipping`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (latestRate) {\r\n      console.log(`Found latest actual rate for ${title}: ${latestRate}% (Date: ${latestDate})`);\r\n      return latestRate;\r\n    }\r\n    \r\n    // 실제 데이터를 찾지 못한 경우, 모든 TD에서 숫자 찾기 (미래 제외)\r\n    console.log(`No actual data found for ${title}, searching all TDs (excluding future dates)...`);\r\n    \r\n    for (let i = 1; i < rows.length; i++) {\r\n      const row = rows[i];\r\n      \r\n      // 날짜 추출 (YYYY-MM-DD 형식)\r\n      const datePattern = /(\\d{4}-\\d{2}-\\d{2})/;\r\n      const dateMatch = row.match(datePattern);\r\n      \r\n      if (dateMatch) {\r\n        const date = dateMatch[1];\r\n        \r\n        // 날짜가 현재 날짜보다 미래인지 확인\r\n        if (date > currentDateString) {\r\n          continue; // 미래 날짜는 건너뛰기\r\n        }\r\n        \r\n        // 모든 숫자.숫자 패턴 찾기\r\n        const numberPattern = /(\\d+\\.\\d+)/g;\r\n        const numberMatches = row.match(numberPattern);\r\n        \r\n        if (numberMatches && numberMatches.length > 0) {\r\n          // 가장 큰 값이 보통 메인 금리\r\n          const rates = numberMatches.map(match => parseFloat(match));\r\n          const maxRate = Math.max(...rates);\r\n          \r\n          // 더 최신 날짜인지 확인\r\n          if (!latestDate || date > latestDate) {\r\n            latestDate = date;\r\n            latestRate = maxRate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (latestRate) {\r\n      console.log(`Found latest rate from all TDs for ${title}: ${latestRate}% (Date: ${latestDate})`);\r\n      return latestRate;\r\n    }\r\n    \r\n    console.log(`No rate found for ${title}`);\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    console.error(`Error extracting interest rate for ${title}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 영국 기준금리 전용 함수 (더 정확한 스크래핑)\r\nexport const fetchUKInterestRate = async () => {\r\n  try {\r\n    console.log('🇬🇧 Fetching UK interest rate from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/united-kingdom/interest-rate';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const html = await fetchWithProxy(url);\r\n    \r\n    if (!html) {\r\n      throw new Error('Failed to fetch HTML');\r\n    }\r\n    \r\n    console.log(`✅ HTML fetched successfully! Length: ${html.length} characters`);\r\n    \r\n    // 영국 기준금리 전용 추출 함수 사용\r\n    const ukRate = extractUKInterestRateFromHTML(html);\r\n    \r\n    if (ukRate) {\r\n      console.log(`✅ Successfully extracted UK interest rate: ${ukRate}%`);\r\n      return {\r\n        title: '영국 기준 금리',\r\n        value: ukRate,\r\n        change: 0.00,\r\n        isPositive: true,\r\n        symbol: 'united-kingdom/interest-rate',\r\n        isRealData: true,\r\n        dataSource: 'Trading Economics'\r\n      };\r\n    } else {\r\n      throw new Error('No UK interest rate found in HTML');\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching UK interest rate:', error);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === '영국 기준 금리');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for UK interest rate');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)',\r\n        symbol: 'united-kingdom/interest-rate'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// 영국 기준금리 추출 함수 (간단한 패턴)\r\nconst extractUKInterestRateFromHTML = (html) => {\r\n  try {\r\n    console.log('🔍 Extracting UK interest rate from HTML...');\r\n    \r\n    // 방법 1: 메인 금리 표시 패턴 찾기 (더 구체적인 패턴)\r\n    const mainRatePatterns = [\r\n      /interest rate.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?interest rate/i,\r\n      /bank rate.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?bank rate/i,\r\n      /boe.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?boe/i,\r\n      /monetary policy.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?monetary policy/i\r\n    ];\r\n    \r\n    for (const pattern of mainRatePatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        // 영국 기준금리는 보통 0.1% ~ 15% 범위\r\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\r\n        \r\n        if (validRates.length > 0) {\r\n          // 가장 큰 값이 보통 메인 기준금리\r\n          const maxRate = Math.max(...validRates);\r\n          console.log(`✅ Found UK interest rate with pattern: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 2: 그래프나 차트에서 현재 값 찾기\r\n    const chartPatterns = [\r\n      /current.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?current/i,\r\n      /latest.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?latest/i,\r\n      /now.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?now/i\r\n    ];\r\n    \r\n    for (const pattern of chartPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\r\n        if (validRates.length > 0) {\r\n          const maxRate = Math.max(...validRates);\r\n          console.log(`✅ Found UK interest rate in chart: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 3: 테이블에서 찾기 (더 구체적으로)\r\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\r\n    const tables = html.match(tablePattern);\r\n    \r\n    if (tables) {\r\n      for (const table of tables) {\r\n        // 테이블에서 숫자.숫자% 패턴 찾기\r\n        const rateMatches = table.match(/(\\d+\\.\\d+)%/g);\r\n        if (rateMatches) {\r\n          const rates = rateMatches.map(match => {\r\n            const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n            return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n          });\r\n          \r\n          const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\r\n          if (validRates.length > 0) {\r\n            const maxRate = Math.max(...validRates);\r\n            console.log(`✅ Found UK interest rate in table: ${maxRate}%`);\r\n            return maxRate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\r\n    const allPercentagePattern = /(\\d+\\.\\d+)%/g;\r\n    const allMatches = html.match(allPercentagePattern);\r\n    \r\n    if (allMatches && allMatches.length > 0) {\r\n      const rates = allMatches.map(match => {\r\n        const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n        return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n      });\r\n      \r\n      const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\r\n      if (validRates.length > 0) {\r\n        const maxRate = Math.max(...validRates);\r\n        console.log(`✅ Found UK interest rate from all percentages: ${maxRate}%`);\r\n        return maxRate;\r\n      }\r\n    }\r\n    \r\n    console.log('❌ No UK interest rate found');\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error extracting UK interest rate:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 호주 기준금리 전용 함수 추가\r\nexport const fetchAustraliaInterestRate = async () => {\r\n  try {\r\n    console.log('🇦🇺 Fetching Australia interest rate from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/australia/interest-rate';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const html = await fetchWithProxy(url);\r\n    \r\n    if (!html) {\r\n      throw new Error('Failed to fetch HTML');\r\n    }\r\n    \r\n    console.log(`✅ HTML fetched successfully! Length: ${html.length} characters`);\r\n    \r\n    // 호주 기준금리 전용 추출 함수 사용\r\n    const ausRate = extractAustraliaInterestRateFromHTML(html);\r\n    \r\n    if (ausRate) {\r\n      console.log(`✅ Successfully extracted Australia interest rate: ${ausRate}%`);\r\n      return {\r\n        title: '호주 기준 금리',\r\n        value: ausRate,\r\n        change: 0.00,\r\n        isPositive: true,\r\n        symbol: 'australia/interest-rate',\r\n        isRealData: true,\r\n        dataSource: 'Trading Economics'\r\n      };\r\n    } else {\r\n      throw new Error('No Australia interest rate found in HTML');\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching Australia interest rate:', error);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === '호주 기준 금리');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for Australia interest rate');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)',\r\n        symbol: 'australia/interest-rate'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// 호주 기준금리 추출 함수\r\nconst extractAustraliaInterestRateFromHTML = (html) => {\r\n  try {\r\n    console.log('🔍 Extracting Australia interest rate from HTML...');\r\n    \r\n    // 방법 1: 메인 금리 표시 패턴 찾기\r\n    const mainRatePatterns = [\r\n      /interest rate.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?interest rate/i,\r\n      /rba.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?rba/i,\r\n      /reserve bank.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?reserve bank/i,\r\n      /monetary policy.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?monetary policy/i\r\n    ];\r\n    \r\n    for (const pattern of mainRatePatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        // 호주 기준금리는 보통 0.1% ~ 15% 범위\r\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\r\n        \r\n        if (validRates.length > 0) {\r\n          // 가장 큰 값이 보통 메인 기준금리\r\n          const maxRate = Math.max(...validRates);\r\n          console.log(`✅ Found Australia interest rate with pattern: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 2: 그래프나 차트에서 현재 값 찾기\r\n    const chartPatterns = [\r\n      /current.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?current/i,\r\n      /latest.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?latest/i,\r\n      /now.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?now/i\r\n    ];\r\n    \r\n    for (const pattern of chartPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\r\n        if (validRates.length > 0) {\r\n          const maxRate = Math.max(...validRates);\r\n          console.log(`✅ Found Australia interest rate in chart: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 3: 테이블에서 찾기\r\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\r\n    const tables = html.match(tablePattern);\r\n    \r\n    if (tables) {\r\n      for (const table of tables) {\r\n        // 테이블에서 숫자.숫자% 패턴 찾기\r\n        const rateMatches = table.match(/(\\d+\\.\\d+)%/g);\r\n        if (rateMatches) {\r\n          const rates = rateMatches.map(match => {\r\n            const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n            return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n          });\r\n          \r\n          const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\r\n          if (validRates.length > 0) {\r\n            const maxRate = Math.max(...validRates);\r\n            console.log(`✅ Found Australia interest rate in table: ${maxRate}%`);\r\n            return maxRate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\r\n    const allPercentagePattern = /(\\d+\\.\\d+)%/g;\r\n    const allMatches = html.match(allPercentagePattern);\r\n    \r\n    if (allMatches && allMatches.length > 0) {\r\n      const rates = allMatches.map(match => {\r\n        const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n        return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n      });\r\n      \r\n      const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\r\n      if (validRates.length > 0) {\r\n        const maxRate = Math.max(...validRates);\r\n        console.log(`✅ Found Australia interest rate from all percentages: ${maxRate}%`);\r\n        return maxRate;\r\n      }\r\n    }\r\n    \r\n    console.log('❌ No Australia interest rate found');\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error extracting Australia interest rate:', error);\r\n    return null;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}