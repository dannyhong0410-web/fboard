{"ast":null,"code":"// Yahoo Finance API를 사용한 FX 데이터 서비스\n\n// 주요 환율 심볼 매핑\nconst FX_SYMBOLS = {\n  'USD/KRW': 'KRW=X',\n  // 달러/원\n  'EUR/KRW': 'EURKRW=X',\n  // 유로/원\n  'JPY/KRW': 'JPYKRW=X',\n  // 엔/원\n  'CNY/KRW': 'CNYKRW=X',\n  // 위안/원\n  'GBP/KRW': 'GBPKRW=X',\n  // 파운드/원\n  'EUR/USD': 'EURUSD=X',\n  // 유로/달러\n  'USD/JPY': 'USDJPY=X',\n  // 달러/엔\n  'GBP/USD': 'GBPUSD=X',\n  // 파운드/달러\n  'USD/CNY': 'USDCNY=X',\n  // 달러/위안\n  'EUR/JPY': 'EURJPY=X',\n  // 유로/엔\n  'AUD/USD': 'AUDUSD=X',\n  // 호주달러/달러\n  'USD/CAD': 'USDCAD=X',\n  // 달러/캐나다달러\n  'USD/CHF': 'USDCHF=X',\n  // 달러/스위스프랑\n  'NZD/USD': 'NZDUSD=X',\n  // 뉴질랜드달러/달러\n  'USD/SGD': 'USDSGD=X' // 달러/싱가포르달러\n};\n\n// 현실적인 더미 FX 데이터 (2024년 12월 기준)\nconst DUMMY_FX_DATA = [{\n  title: 'USD/KRW',\n  value: 1345.67,\n  change: 0.15,\n  isPositive: true\n}, {\n  title: 'EUR/KRW',\n  value: 1459.23,\n  change: -0.21,\n  isPositive: false\n}, {\n  title: 'JPY/KRW',\n  value: 9.12,\n  change: 0.45,\n  isPositive: true\n}, {\n  title: 'CNY/KRW',\n  value: 186.34,\n  change: -0.12,\n  isPositive: false\n}, {\n  title: 'GBP/KRW',\n  value: 1702.45,\n  change: 0.32,\n  isPositive: true\n}, {\n  title: 'EUR/USD',\n  value: 1.0856,\n  change: -0.21,\n  isPositive: false\n}, {\n  title: 'USD/JPY',\n  value: 148.45,\n  change: 0.45,\n  isPositive: true\n}, {\n  title: 'GBP/USD',\n  value: 1.2654,\n  change: 0.32,\n  isPositive: true\n}, {\n  title: 'USD/CNY',\n  value: 7.2345,\n  change: -0.12,\n  isPositive: false\n}, {\n  title: 'EUR/JPY',\n  value: 161.23,\n  change: 0.24,\n  isPositive: true\n}, {\n  title: 'AUD/USD',\n  value: 0.6756,\n  change: 0.18,\n  isPositive: true\n}, {\n  title: 'USD/CAD',\n  value: 1.3456,\n  change: -0.08,\n  isPositive: false\n}, {\n  title: 'USD/CHF',\n  value: 0.8923,\n  change: 0.12,\n  isPositive: true\n}, {\n  title: 'NZD/USD',\n  value: 0.6234,\n  change: 0.25,\n  isPositive: true\n}, {\n  title: 'USD/SGD',\n  value: 1.3456,\n  change: -0.05,\n  isPositive: false\n}];\n\n// CORS 프록시 URL들 (주식 API와 동일한 방식)\nconst CORS_PROXIES = ['https://cors-anywhere.herokuapp.com/', 'https://api.allorigins.win/raw?url=', 'https://corsproxy.io/?', '' // 직접 호출도 시도\n];\n\n// 프록시를 사용한 API 호출 (주식 API와 동일한 방식)\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\n  if (proxyIndex >= CORS_PROXIES.length) {\n    throw new Error('All proxy attempts failed');\n  }\n  try {\n    const proxyUrl = CORS_PROXIES[proxyIndex] + url;\n    const response = await fetch(proxyUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response;\n  } catch (error) {\n    console.log(`Proxy ${proxyIndex} failed, trying next...`);\n    return fetchWithProxy(url, proxyIndex + 1);\n  }\n};\n\n// Yahoo Finance API에서 환율 데이터 가져오기 (주식 API와 동일한 방식)\nconst fetchFXDataFromYahoo = async symbol => {\n  try {\n    const url = `https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?interval=1d&range=1d`;\n    const response = await fetchWithProxy(url);\n    const data = await response.json();\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\n      throw new Error('No chart data available');\n    }\n    const result = data.chart.result[0];\n    const meta = result.meta;\n    const quotes = result.indicators.quote[0];\n\n    // 가장 최근 데이터 (주식 API와 동일한 방식)\n    const latestIndex = quotes.close.length - 1;\n    const currentPrice = meta.regularMarketPrice || quotes.close[latestIndex] || 0;\n    return {\n      symbol: symbol,\n      price: currentPrice,\n      change: meta.regularMarketPrice - meta.previousClose || 0,\n      changePercent: (meta.regularMarketPrice - meta.previousClose) / meta.previousClose * 100 || 0,\n      previousClose: meta.previousClose || 0,\n      open: quotes.open[latestIndex] || 0,\n      high: quotes.high[latestIndex] || 0,\n      low: quotes.low[latestIndex] || 0,\n      volume: quotes.volume[latestIndex] || 0,\n      currency: meta.currency || 'USD'\n    };\n  } catch (error) {\n    console.error(`Error fetching ${symbol}:`, error);\n    throw error;\n  }\n};\n\n// 모든 환율 데이터 가져오기 (주식 API와 동일한 방식)\nexport const fetchAllFXData = async () => {\n  try {\n    console.log('🔄 Fetching FX data from Yahoo Finance...');\n    const promises = [];\n\n    // 모든 환율 심볼에 대해 병렬로 데이터 가져오기\n    for (const [name, symbol] of Object.entries(FX_SYMBOLS)) {\n      promises.push(fetchFXDataFromYahoo(symbol).then(data => {\n        if (data) {\n          console.log(`✅ ${name}: ${data.price} (${data.isPositive ? '+' : ''}${data.changePercent.toFixed(2)}%)`);\n          return {\n            title: name,\n            value: data.price,\n            change: data.changePercent,\n            isPositive: data.isPositive,\n            symbol: symbol,\n            isRealData: true,\n            dataSource: 'Yahoo Finance'\n          };\n        } else {\n          console.log(`❌ Failed to fetch ${name}`);\n          return null;\n        }\n      }).catch(error => {\n        console.log(`❌ Error fetching ${name}:`, error.message);\n        return null;\n      }));\n    }\n\n    // 모든 요청 완료 대기\n    const results = await Promise.all(promises);\n\n    // 성공한 데이터만 필터링\n    const successfulData = results.filter(data => data !== null);\n    console.log(`✅ Successfully fetched ${successfulData.length}/${Object.keys(FX_SYMBOLS).length} FX rates`);\n\n    // 실제 데이터가 있으면 반환, 없으면 더미 데이터 사용\n    if (successfulData.length > 0) {\n      return successfulData;\n    } else {\n      console.log('❌ No real data available, using dummy data...');\n      return DUMMY_FX_DATA.map(item => ({\n        ...item,\n        isRealData: false,\n        dataSource: 'Dummy Data',\n        symbol: FX_SYMBOLS[item.title] || ''\n      }));\n    }\n  } catch (error) {\n    console.error('❌ Error fetching FX data:', error);\n    console.log('📊 Falling back to dummy data...');\n\n    // 에러 발생 시 더미 데이터 반환\n    return DUMMY_FX_DATA.map(item => ({\n      ...item,\n      isRealData: false,\n      dataSource: 'Dummy Data (Error)',\n      symbol: FX_SYMBOLS[item.title] || ''\n    }));\n  }\n};\n\n// 특정 환율 데이터 가져오기\nexport const fetchFXRate = async symbol => {\n  const yahooSymbol = FX_SYMBOLS[symbol];\n  if (!yahooSymbol) {\n    throw new Error(`Unknown symbol: ${symbol}`);\n  }\n  return await fetchFXDataFromYahoo(yahooSymbol);\n};\n\n// FX vs 주식 API 간단 테스트\nexport const quickFXvsStockTest = async () => {\n  try {\n    console.log('🔍 Quick FX vs Stock API Test...');\n\n    // FX 심볼 테스트\n    const fxSymbol = 'KRW=X';\n    const fxUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${fxSymbol}?interval=1d&range=1d`;\n\n    // 주식 심볼 테스트\n    const stockSymbol = '^GSPC';\n    const stockUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${stockSymbol}?interval=1d&range=1d`;\n    console.log(`🔗 FX URL: ${fxUrl}`);\n    console.log(`🔗 Stock URL: ${stockUrl}`);\n\n    // FX API 테스트\n    try {\n      console.log('🧪 Testing FX API (KRW=X)...');\n      const fxResponse = await fetch(fxUrl);\n      console.log(`📊 FX response status: ${fxResponse.status}`);\n      if (fxResponse.ok) {\n        var _fxData$chart, _fxData$chart2, _fxData$chart2$result, _fxData$chart3, _fxData$chart3$result, _fxData$chart3$result2, _fxData$chart4, _fxData$chart4$result, _fxData$chart4$result2, _fxData$chart5, _fxData$chart5$result, _fxData$chart5$result2;\n        const fxData = await fxResponse.json();\n        console.log(`📊 FX data structure:`, {\n          hasChart: !!fxData.chart,\n          hasResult: !!((_fxData$chart = fxData.chart) !== null && _fxData$chart !== void 0 && _fxData$chart.result),\n          resultLength: (_fxData$chart2 = fxData.chart) === null || _fxData$chart2 === void 0 ? void 0 : (_fxData$chart2$result = _fxData$chart2.result) === null || _fxData$chart2$result === void 0 ? void 0 : _fxData$chart2$result.length,\n          hasMeta: !!((_fxData$chart3 = fxData.chart) !== null && _fxData$chart3 !== void 0 && (_fxData$chart3$result = _fxData$chart3.result) !== null && _fxData$chart3$result !== void 0 && (_fxData$chart3$result2 = _fxData$chart3$result[0]) !== null && _fxData$chart3$result2 !== void 0 && _fxData$chart3$result2.meta),\n          metaKeys: (_fxData$chart4 = fxData.chart) !== null && _fxData$chart4 !== void 0 && (_fxData$chart4$result = _fxData$chart4.result) !== null && _fxData$chart4$result !== void 0 && (_fxData$chart4$result2 = _fxData$chart4$result[0]) !== null && _fxData$chart4$result2 !== void 0 && _fxData$chart4$result2.meta ? Object.keys(fxData.chart.result[0].meta) : []\n        });\n        if ((_fxData$chart5 = fxData.chart) !== null && _fxData$chart5 !== void 0 && (_fxData$chart5$result = _fxData$chart5.result) !== null && _fxData$chart5$result !== void 0 && (_fxData$chart5$result2 = _fxData$chart5$result[0]) !== null && _fxData$chart5$result2 !== void 0 && _fxData$chart5$result2.meta) {\n          const fxMeta = fxData.chart.result[0].meta;\n          console.log(`✅ FX API works! USD/KRW: ${fxMeta.regularMarketPrice}`);\n        } else {\n          console.log(`❌ FX API returned data but no valid meta`);\n        }\n      } else {\n        console.log(`❌ FX API failed with status: ${fxResponse.status}`);\n      }\n    } catch (fxError) {\n      console.log(`❌ FX API error:`, fxError.message);\n    }\n\n    // 주식 API 테스트\n    try {\n      console.log('🧪 Testing Stock API (^GSPC)...');\n      const stockResponse = await fetch(stockUrl);\n      console.log(`📊 Stock response status: ${stockResponse.status}`);\n      if (stockResponse.ok) {\n        var _stockData$chart, _stockData$chart2, _stockData$chart2$res, _stockData$chart3, _stockData$chart3$res, _stockData$chart3$res2, _stockData$chart4, _stockData$chart4$res, _stockData$chart4$res2, _stockData$chart5, _stockData$chart5$res, _stockData$chart5$res2;\n        const stockData = await stockResponse.json();\n        console.log(`📊 Stock data structure:`, {\n          hasChart: !!stockData.chart,\n          hasResult: !!((_stockData$chart = stockData.chart) !== null && _stockData$chart !== void 0 && _stockData$chart.result),\n          resultLength: (_stockData$chart2 = stockData.chart) === null || _stockData$chart2 === void 0 ? void 0 : (_stockData$chart2$res = _stockData$chart2.result) === null || _stockData$chart2$res === void 0 ? void 0 : _stockData$chart2$res.length,\n          hasMeta: !!((_stockData$chart3 = stockData.chart) !== null && _stockData$chart3 !== void 0 && (_stockData$chart3$res = _stockData$chart3.result) !== null && _stockData$chart3$res !== void 0 && (_stockData$chart3$res2 = _stockData$chart3$res[0]) !== null && _stockData$chart3$res2 !== void 0 && _stockData$chart3$res2.meta),\n          metaKeys: (_stockData$chart4 = stockData.chart) !== null && _stockData$chart4 !== void 0 && (_stockData$chart4$res = _stockData$chart4.result) !== null && _stockData$chart4$res !== void 0 && (_stockData$chart4$res2 = _stockData$chart4$res[0]) !== null && _stockData$chart4$res2 !== void 0 && _stockData$chart4$res2.meta ? Object.keys(stockData.chart.result[0].meta) : []\n        });\n        if ((_stockData$chart5 = stockData.chart) !== null && _stockData$chart5 !== void 0 && (_stockData$chart5$res = _stockData$chart5.result) !== null && _stockData$chart5$res !== void 0 && (_stockData$chart5$res2 = _stockData$chart5$res[0]) !== null && _stockData$chart5$res2 !== void 0 && _stockData$chart5$res2.meta) {\n          const stockMeta = stockData.chart.result[0].meta;\n          console.log(`✅ Stock API works! S&P 500: ${stockMeta.regularMarketPrice}`);\n        } else {\n          console.log(`❌ Stock API returned data but no valid meta`);\n        }\n      } else {\n        console.log(`❌ Stock API failed with status: ${stockResponse.status}`);\n      }\n    } catch (stockError) {\n      console.log(`❌ Stock API error:`, stockError.message);\n    }\n  } catch (error) {\n    console.error(`❌ Quick test failed:`, error);\n  }\n};\n\n// Yahoo Finance URL 매핑\nexport const YAHOO_FINANCE_URLS = {\n  'USD/KRW': 'https://finance.yahoo.com/quote/KRW=X',\n  'EUR/KRW': 'https://finance.yahoo.com/quote/EURKRW=X',\n  'JPY/KRW': 'https://finance.yahoo.com/quote/JPYKRW=X',\n  'CNY/KRW': 'https://finance.yahoo.com/quote/CNYKRW=X',\n  'GBP/KRW': 'https://finance.yahoo.com/quote/GBPKRW=X',\n  'EUR/USD': 'https://finance.yahoo.com/quote/EURUSD=X',\n  'USD/JPY': 'https://finance.yahoo.com/quote/USDJPY=X',\n  'GBP/USD': 'https://finance.yahoo.com/quote/GBPUSD=X',\n  'USD/CNY': 'https://finance.yahoo.com/quote/USDCNY=X',\n  'EUR/JPY': 'https://finance.yahoo.com/quote/EURJPY=X',\n  'AUD/USD': 'https://finance.yahoo.com/quote/AUDUSD=X',\n  'USD/CAD': 'https://finance.yahoo.com/quote/USDCAD=X',\n  'USD/CHF': 'https://finance.yahoo.com/quote/USDCHF=X',\n  'NZD/USD': 'https://finance.yahoo.com/quote/NZDUSD=X',\n  'USD/SGD': 'https://finance.yahoo.com/quote/USDSGD=X'\n};\n\n// FX vs 주식 API 비교 테스트\nexport const compareFXvsStockAPI = async () => {\n  try {\n    console.log('🔍 Comparing FX vs Stock API...');\n\n    // FX 심볼 테스트\n    const fxSymbol = 'KRW=X';\n    const fxUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${fxSymbol}?interval=1d&range=1d`;\n\n    // 주식 심볼 테스트\n    const stockSymbol = '^GSPC';\n    const stockUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${stockSymbol}?interval=1d&range=1d`;\n    console.log(`🔗 FX URL: ${fxUrl}`);\n    console.log(`🔗 Stock URL: ${stockUrl}`);\n\n    // FX API 테스트\n    try {\n      console.log('🧪 Testing FX API...');\n      const fxResponse = await fetch(fxUrl, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n        }\n      });\n      console.log(`📊 FX response status: ${fxResponse.status}`);\n      console.log(`📊 FX response headers:`, Object.fromEntries(fxResponse.headers.entries()));\n      if (fxResponse.ok) {\n        const fxData = await fxResponse.json();\n        console.log(`📊 FX data keys:`, Object.keys(fxData));\n        if (fxData && fxData.chart && fxData.chart.result && fxData.chart.result[0]) {\n          const fxMeta = fxData.chart.result[0].meta;\n          console.log(`📊 FX meta data:`, fxMeta);\n          console.log(`✅ FX API works! USD/KRW: ${fxMeta.regularMarketPrice}`);\n        }\n      }\n    } catch (fxError) {\n      console.log(`❌ FX API failed:`, fxError.message);\n    }\n\n    // 주식 API 테스트\n    try {\n      console.log('🧪 Testing Stock API...');\n      const stockResponse = await fetch(stockUrl, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n        }\n      });\n      console.log(`📊 Stock response status: ${stockResponse.status}`);\n      console.log(`📊 Stock response headers:`, Object.fromEntries(stockResponse.headers.entries()));\n      if (stockResponse.ok) {\n        const stockData = await stockResponse.json();\n        console.log(`📊 Stock data keys:`, Object.keys(stockData));\n        if (stockData && stockData.chart && stockData.chart.result && stockData.chart.result[0]) {\n          const stockMeta = stockData.chart.result[0].meta;\n          console.log(`📊 Stock meta data:`, stockMeta);\n          console.log(`✅ Stock API works! S&P 500: ${stockMeta.regularMarketPrice}`);\n        }\n      }\n    } catch (stockError) {\n      console.log(`❌ Stock API failed:`, stockError.message);\n    }\n  } catch (error) {\n    console.error(`❌ Comparison test failed:`, error);\n  }\n};\n\n// Yahoo Finance API 테스트 함수\nexport const testYahooFinanceAPI = async () => {\n  try {\n    console.log('🧪 Testing Yahoo Finance API...');\n\n    // 간단한 테스트: USD/KRW 환율 가져오기\n    const testSymbol = 'KRW=X';\n    const testUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${testSymbol}?interval=1d&range=1d`;\n    console.log(`🔗 Testing URL: ${testUrl}`);\n    const response = await fetch(testUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      }\n    });\n    console.log(`📊 Response status: ${response.status}`);\n    console.log(`📊 Response headers:`, Object.fromEntries(response.headers.entries()));\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(`📊 Response data keys:`, Object.keys(data));\n    if (data && data.chart && data.chart.result && data.chart.result[0]) {\n      const result = data.chart.result[0];\n      const meta = result.meta;\n      console.log(`📊 Meta data:`, meta);\n      if (meta.regularMarketPrice) {\n        console.log(`✅ Yahoo Finance API test successful! USD/KRW: ${meta.regularMarketPrice}`);\n        return true;\n      }\n    }\n    console.log(`❌ No valid data in response`);\n    return false;\n  } catch (error) {\n    console.error(`❌ Yahoo Finance API test failed:`, error);\n    return false;\n  }\n};","map":{"version":3,"names":["FX_SYMBOLS","DUMMY_FX_DATA","title","value","change","isPositive","CORS_PROXIES","fetchWithProxy","url","proxyIndex","length","Error","proxyUrl","response","fetch","method","headers","ok","status","error","console","log","fetchFXDataFromYahoo","symbol","data","json","chart","result","meta","quotes","indicators","quote","latestIndex","close","currentPrice","regularMarketPrice","price","previousClose","changePercent","open","high","low","volume","currency","fetchAllFXData","promises","name","Object","entries","push","then","toFixed","isRealData","dataSource","catch","message","results","Promise","all","successfulData","filter","keys","map","item","fetchFXRate","yahooSymbol","quickFXvsStockTest","fxSymbol","fxUrl","stockSymbol","stockUrl","fxResponse","_fxData$chart","_fxData$chart2","_fxData$chart2$result","_fxData$chart3","_fxData$chart3$result","_fxData$chart3$result2","_fxData$chart4","_fxData$chart4$result","_fxData$chart4$result2","_fxData$chart5","_fxData$chart5$result","_fxData$chart5$result2","fxData","hasChart","hasResult","resultLength","hasMeta","metaKeys","fxMeta","fxError","stockResponse","_stockData$chart","_stockData$chart2","_stockData$chart2$res","_stockData$chart3","_stockData$chart3$res","_stockData$chart3$res2","_stockData$chart4","_stockData$chart4$res","_stockData$chart4$res2","_stockData$chart5","_stockData$chart5$res","_stockData$chart5$res2","stockData","stockMeta","stockError","YAHOO_FINANCE_URLS","compareFXvsStockAPI","fromEntries","testYahooFinanceAPI","testSymbol","testUrl"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/fxApi.js"],"sourcesContent":["// Yahoo Finance API를 사용한 FX 데이터 서비스\r\n\r\n// 주요 환율 심볼 매핑\r\nconst FX_SYMBOLS = {\r\n  'USD/KRW': 'KRW=X', // 달러/원\r\n  'EUR/KRW': 'EURKRW=X', // 유로/원\r\n  'JPY/KRW': 'JPYKRW=X', // 엔/원\r\n  'CNY/KRW': 'CNYKRW=X', // 위안/원\r\n  'GBP/KRW': 'GBPKRW=X', // 파운드/원\r\n  'EUR/USD': 'EURUSD=X', // 유로/달러\r\n  'USD/JPY': 'USDJPY=X', // 달러/엔\r\n  'GBP/USD': 'GBPUSD=X', // 파운드/달러\r\n  'USD/CNY': 'USDCNY=X', // 달러/위안\r\n  'EUR/JPY': 'EURJPY=X', // 유로/엔\r\n  'AUD/USD': 'AUDUSD=X', // 호주달러/달러\r\n  'USD/CAD': 'USDCAD=X', // 달러/캐나다달러\r\n  'USD/CHF': 'USDCHF=X', // 달러/스위스프랑\r\n  'NZD/USD': 'NZDUSD=X', // 뉴질랜드달러/달러\r\n  'USD/SGD': 'USDSGD=X' // 달러/싱가포르달러\r\n};\r\n\r\n// 현실적인 더미 FX 데이터 (2024년 12월 기준)\r\nconst DUMMY_FX_DATA = [\r\n  { title: 'USD/KRW', value: 1345.67, change: 0.15, isPositive: true },\r\n  { title: 'EUR/KRW', value: 1459.23, change: -0.21, isPositive: false },\r\n  { title: 'JPY/KRW', value: 9.12, change: 0.45, isPositive: true },\r\n  { title: 'CNY/KRW', value: 186.34, change: -0.12, isPositive: false },\r\n  { title: 'GBP/KRW', value: 1702.45, change: 0.32, isPositive: true },\r\n  { title: 'EUR/USD', value: 1.0856, change: -0.21, isPositive: false },\r\n  { title: 'USD/JPY', value: 148.45, change: 0.45, isPositive: true },\r\n  { title: 'GBP/USD', value: 1.2654, change: 0.32, isPositive: true },\r\n  { title: 'USD/CNY', value: 7.2345, change: -0.12, isPositive: false },\r\n  { title: 'EUR/JPY', value: 161.23, change: 0.24, isPositive: true },\r\n  { title: 'AUD/USD', value: 0.6756, change: 0.18, isPositive: true },\r\n  { title: 'USD/CAD', value: 1.3456, change: -0.08, isPositive: false },\r\n  { title: 'USD/CHF', value: 0.8923, change: 0.12, isPositive: true },\r\n  { title: 'NZD/USD', value: 0.6234, change: 0.25, isPositive: true },\r\n  { title: 'USD/SGD', value: 1.3456, change: -0.05, isPositive: false }\r\n];\r\n\r\n// CORS 프록시 URL들 (주식 API와 동일한 방식)\r\nconst CORS_PROXIES = [\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://corsproxy.io/?',\r\n  '' // 직접 호출도 시도\r\n];\r\n\r\n// 프록시를 사용한 API 호출 (주식 API와 동일한 방식)\r\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\r\n  if (proxyIndex >= CORS_PROXIES.length) {\r\n    throw new Error('All proxy attempts failed');\r\n  }\r\n\r\n  try {\r\n    const proxyUrl = CORS_PROXIES[proxyIndex] + url;\r\n    const response = await fetch(proxyUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.log(`Proxy ${proxyIndex} failed, trying next...`);\r\n    return fetchWithProxy(url, proxyIndex + 1);\r\n  }\r\n};\r\n\r\n// Yahoo Finance API에서 환율 데이터 가져오기 (주식 API와 동일한 방식)\r\nconst fetchFXDataFromYahoo = async (symbol) => {\r\n  try {\r\n    const url = `https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?interval=1d&range=1d`;\r\n    const response = await fetchWithProxy(url);\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\r\n      throw new Error('No chart data available');\r\n    }\r\n    \r\n    const result = data.chart.result[0];\r\n    const meta = result.meta;\r\n    const quotes = result.indicators.quote[0];\r\n    \r\n    // 가장 최근 데이터 (주식 API와 동일한 방식)\r\n    const latestIndex = quotes.close.length - 1;\r\n    const currentPrice = meta.regularMarketPrice || quotes.close[latestIndex] || 0;\r\n    \r\n    return {\r\n      symbol: symbol,\r\n      price: currentPrice,\r\n      change: meta.regularMarketPrice - meta.previousClose || 0,\r\n      changePercent: ((meta.regularMarketPrice - meta.previousClose) / meta.previousClose * 100) || 0,\r\n      previousClose: meta.previousClose || 0,\r\n      open: quotes.open[latestIndex] || 0,\r\n      high: quotes.high[latestIndex] || 0,\r\n      low: quotes.low[latestIndex] || 0,\r\n      volume: quotes.volume[latestIndex] || 0,\r\n      currency: meta.currency || 'USD'\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error fetching ${symbol}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 모든 환율 데이터 가져오기 (주식 API와 동일한 방식)\r\nexport const fetchAllFXData = async () => {\r\n  try {\r\n    console.log('🔄 Fetching FX data from Yahoo Finance...');\r\n    \r\n    const promises = [];\r\n    \r\n    // 모든 환율 심볼에 대해 병렬로 데이터 가져오기\r\n    for (const [name, symbol] of Object.entries(FX_SYMBOLS)) {\r\n      promises.push(\r\n        fetchFXDataFromYahoo(symbol)\r\n          .then(data => {\r\n            if (data) {\r\n              console.log(`✅ ${name}: ${data.price} (${data.isPositive ? '+' : ''}${data.changePercent.toFixed(2)}%)`);\r\n              return {\r\n                title: name,\r\n                value: data.price,\r\n                change: data.changePercent,\r\n                isPositive: data.isPositive,\r\n                symbol: symbol,\r\n                isRealData: true,\r\n                dataSource: 'Yahoo Finance'\r\n              };\r\n            } else {\r\n              console.log(`❌ Failed to fetch ${name}`);\r\n              return null;\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.log(`❌ Error fetching ${name}:`, error.message);\r\n            return null;\r\n          })\r\n      );\r\n    }\r\n    \r\n    // 모든 요청 완료 대기\r\n    const results = await Promise.all(promises);\r\n    \r\n    // 성공한 데이터만 필터링\r\n    const successfulData = results.filter(data => data !== null);\r\n    \r\n    console.log(`✅ Successfully fetched ${successfulData.length}/${Object.keys(FX_SYMBOLS).length} FX rates`);\r\n    \r\n    // 실제 데이터가 있으면 반환, 없으면 더미 데이터 사용\r\n    if (successfulData.length > 0) {\r\n      return successfulData;\r\n    } else {\r\n      console.log('❌ No real data available, using dummy data...');\r\n      return DUMMY_FX_DATA.map(item => ({\r\n        ...item,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data',\r\n        symbol: FX_SYMBOLS[item.title] || ''\r\n      }));\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching FX data:', error);\r\n    console.log('📊 Falling back to dummy data...');\r\n    \r\n    // 에러 발생 시 더미 데이터 반환\r\n    return DUMMY_FX_DATA.map(item => ({\r\n      ...item,\r\n      isRealData: false,\r\n      dataSource: 'Dummy Data (Error)',\r\n      symbol: FX_SYMBOLS[item.title] || ''\r\n    }));\r\n  }\r\n};\r\n\r\n// 특정 환율 데이터 가져오기\r\nexport const fetchFXRate = async (symbol) => {\r\n  const yahooSymbol = FX_SYMBOLS[symbol];\r\n  if (!yahooSymbol) {\r\n    throw new Error(`Unknown symbol: ${symbol}`);\r\n  }\r\n  \r\n  return await fetchFXDataFromYahoo(yahooSymbol);\r\n};\r\n\r\n// FX vs 주식 API 간단 테스트\r\nexport const quickFXvsStockTest = async () => {\r\n  try {\r\n    console.log('🔍 Quick FX vs Stock API Test...');\r\n    \r\n    // FX 심볼 테스트\r\n    const fxSymbol = 'KRW=X';\r\n    const fxUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${fxSymbol}?interval=1d&range=1d`;\r\n    \r\n    // 주식 심볼 테스트\r\n    const stockSymbol = '^GSPC';\r\n    const stockUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${stockSymbol}?interval=1d&range=1d`;\r\n    \r\n    console.log(`🔗 FX URL: ${fxUrl}`);\r\n    console.log(`🔗 Stock URL: ${stockUrl}`);\r\n    \r\n    // FX API 테스트\r\n    try {\r\n      console.log('🧪 Testing FX API (KRW=X)...');\r\n      const fxResponse = await fetch(fxUrl);\r\n      console.log(`📊 FX response status: ${fxResponse.status}`);\r\n      \r\n      if (fxResponse.ok) {\r\n        const fxData = await fxResponse.json();\r\n        console.log(`📊 FX data structure:`, {\r\n          hasChart: !!fxData.chart,\r\n          hasResult: !!fxData.chart?.result,\r\n          resultLength: fxData.chart?.result?.length,\r\n          hasMeta: !!fxData.chart?.result?.[0]?.meta,\r\n          metaKeys: fxData.chart?.result?.[0]?.meta ? Object.keys(fxData.chart.result[0].meta) : []\r\n        });\r\n        \r\n        if (fxData.chart?.result?.[0]?.meta) {\r\n          const fxMeta = fxData.chart.result[0].meta;\r\n          console.log(`✅ FX API works! USD/KRW: ${fxMeta.regularMarketPrice}`);\r\n        } else {\r\n          console.log(`❌ FX API returned data but no valid meta`);\r\n        }\r\n      } else {\r\n        console.log(`❌ FX API failed with status: ${fxResponse.status}`);\r\n      }\r\n    } catch (fxError) {\r\n      console.log(`❌ FX API error:`, fxError.message);\r\n    }\r\n    \r\n    // 주식 API 테스트\r\n    try {\r\n      console.log('🧪 Testing Stock API (^GSPC)...');\r\n      const stockResponse = await fetch(stockUrl);\r\n      console.log(`📊 Stock response status: ${stockResponse.status}`);\r\n      \r\n      if (stockResponse.ok) {\r\n        const stockData = await stockResponse.json();\r\n        console.log(`📊 Stock data structure:`, {\r\n          hasChart: !!stockData.chart,\r\n          hasResult: !!stockData.chart?.result,\r\n          resultLength: stockData.chart?.result?.length,\r\n          hasMeta: !!stockData.chart?.result?.[0]?.meta,\r\n          metaKeys: stockData.chart?.result?.[0]?.meta ? Object.keys(stockData.chart.result[0].meta) : []\r\n        });\r\n        \r\n        if (stockData.chart?.result?.[0]?.meta) {\r\n          const stockMeta = stockData.chart.result[0].meta;\r\n          console.log(`✅ Stock API works! S&P 500: ${stockMeta.regularMarketPrice}`);\r\n        } else {\r\n          console.log(`❌ Stock API returned data but no valid meta`);\r\n        }\r\n      } else {\r\n        console.log(`❌ Stock API failed with status: ${stockResponse.status}`);\r\n      }\r\n    } catch (stockError) {\r\n      console.log(`❌ Stock API error:`, stockError.message);\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error(`❌ Quick test failed:`, error);\r\n  }\r\n};\r\n\r\n// Yahoo Finance URL 매핑\r\nexport const YAHOO_FINANCE_URLS = {\r\n  'USD/KRW': 'https://finance.yahoo.com/quote/KRW=X',\r\n  'EUR/KRW': 'https://finance.yahoo.com/quote/EURKRW=X',\r\n  'JPY/KRW': 'https://finance.yahoo.com/quote/JPYKRW=X',\r\n  'CNY/KRW': 'https://finance.yahoo.com/quote/CNYKRW=X',\r\n  'GBP/KRW': 'https://finance.yahoo.com/quote/GBPKRW=X',\r\n  'EUR/USD': 'https://finance.yahoo.com/quote/EURUSD=X',\r\n  'USD/JPY': 'https://finance.yahoo.com/quote/USDJPY=X',\r\n  'GBP/USD': 'https://finance.yahoo.com/quote/GBPUSD=X',\r\n  'USD/CNY': 'https://finance.yahoo.com/quote/USDCNY=X',\r\n  'EUR/JPY': 'https://finance.yahoo.com/quote/EURJPY=X',\r\n  'AUD/USD': 'https://finance.yahoo.com/quote/AUDUSD=X',\r\n  'USD/CAD': 'https://finance.yahoo.com/quote/USDCAD=X',\r\n  'USD/CHF': 'https://finance.yahoo.com/quote/USDCHF=X',\r\n  'NZD/USD': 'https://finance.yahoo.com/quote/NZDUSD=X',\r\n  'USD/SGD': 'https://finance.yahoo.com/quote/USDSGD=X'\r\n};\r\n\r\n// FX vs 주식 API 비교 테스트\r\nexport const compareFXvsStockAPI = async () => {\r\n  try {\r\n    console.log('🔍 Comparing FX vs Stock API...');\r\n    \r\n    // FX 심볼 테스트\r\n    const fxSymbol = 'KRW=X';\r\n    const fxUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${fxSymbol}?interval=1d&range=1d`;\r\n    \r\n    // 주식 심볼 테스트\r\n    const stockSymbol = '^GSPC';\r\n    const stockUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${stockSymbol}?interval=1d&range=1d`;\r\n    \r\n    console.log(`🔗 FX URL: ${fxUrl}`);\r\n    console.log(`🔗 Stock URL: ${stockUrl}`);\r\n    \r\n    // FX API 테스트\r\n    try {\r\n      console.log('🧪 Testing FX API...');\r\n      const fxResponse = await fetch(fxUrl, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n        }\r\n      });\r\n      \r\n      console.log(`📊 FX response status: ${fxResponse.status}`);\r\n      console.log(`📊 FX response headers:`, Object.fromEntries(fxResponse.headers.entries()));\r\n      \r\n      if (fxResponse.ok) {\r\n        const fxData = await fxResponse.json();\r\n        console.log(`📊 FX data keys:`, Object.keys(fxData));\r\n        \r\n        if (fxData && fxData.chart && fxData.chart.result && fxData.chart.result[0]) {\r\n          const fxMeta = fxData.chart.result[0].meta;\r\n          console.log(`📊 FX meta data:`, fxMeta);\r\n          console.log(`✅ FX API works! USD/KRW: ${fxMeta.regularMarketPrice}`);\r\n        }\r\n      }\r\n    } catch (fxError) {\r\n      console.log(`❌ FX API failed:`, fxError.message);\r\n    }\r\n    \r\n    // 주식 API 테스트\r\n    try {\r\n      console.log('🧪 Testing Stock API...');\r\n      const stockResponse = await fetch(stockUrl, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n        }\r\n      });\r\n      \r\n      console.log(`📊 Stock response status: ${stockResponse.status}`);\r\n      console.log(`📊 Stock response headers:`, Object.fromEntries(stockResponse.headers.entries()));\r\n      \r\n      if (stockResponse.ok) {\r\n        const stockData = await stockResponse.json();\r\n        console.log(`📊 Stock data keys:`, Object.keys(stockData));\r\n        \r\n        if (stockData && stockData.chart && stockData.chart.result && stockData.chart.result[0]) {\r\n          const stockMeta = stockData.chart.result[0].meta;\r\n          console.log(`📊 Stock meta data:`, stockMeta);\r\n          console.log(`✅ Stock API works! S&P 500: ${stockMeta.regularMarketPrice}`);\r\n        }\r\n      }\r\n    } catch (stockError) {\r\n      console.log(`❌ Stock API failed:`, stockError.message);\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error(`❌ Comparison test failed:`, error);\r\n  }\r\n};\r\n\r\n// Yahoo Finance API 테스트 함수\r\nexport const testYahooFinanceAPI = async () => {\r\n  try {\r\n    console.log('🧪 Testing Yahoo Finance API...');\r\n    \r\n    // 간단한 테스트: USD/KRW 환율 가져오기\r\n    const testSymbol = 'KRW=X';\r\n    const testUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${testSymbol}?interval=1d&range=1d`;\r\n    \r\n    console.log(`🔗 Testing URL: ${testUrl}`);\r\n    \r\n    const response = await fetch(testUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n      }\r\n    });\r\n    \r\n    console.log(`📊 Response status: ${response.status}`);\r\n    console.log(`📊 Response headers:`, Object.fromEntries(response.headers.entries()));\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log(`📊 Response data keys:`, Object.keys(data));\r\n    \r\n    if (data && data.chart && data.chart.result && data.chart.result[0]) {\r\n      const result = data.chart.result[0];\r\n      const meta = result.meta;\r\n      console.log(`📊 Meta data:`, meta);\r\n      \r\n      if (meta.regularMarketPrice) {\r\n        console.log(`✅ Yahoo Finance API test successful! USD/KRW: ${meta.regularMarketPrice}`);\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    console.log(`❌ No valid data in response`);\r\n    return false;\r\n    \r\n  } catch (error) {\r\n    console.error(`❌ Yahoo Finance API test failed:`, error);\r\n    return false;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}