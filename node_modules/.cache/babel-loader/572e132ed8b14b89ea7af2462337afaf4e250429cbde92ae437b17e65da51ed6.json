{"ast":null,"code":"// Yahoo Finance API를 사용한 FX 데이터 서비스\n\n// 주요 환율 심볼 매핑\nconst FX_SYMBOLS = {\n  'USD/KRW': 'KRW=X',\n  // 달러/원\n  'EUR/KRW': 'EURKRW=X',\n  // 유로/원\n  'JPY/KRW': 'JPYKRW=X',\n  // 엔/원\n  'CNY/KRW': 'CNYKRW=X',\n  // 위안/원\n  'GBP/KRW': 'GBPKRW=X',\n  // 파운드/원\n  'EUR/USD': 'EURUSD=X',\n  // 유로/달러\n  'USD/JPY': 'USDJPY=X',\n  // 달러/엔\n  'GBP/USD': 'GBPUSD=X',\n  // 파운드/달러\n  'USD/CNY': 'USDCNY=X',\n  // 달러/위안\n  'EUR/JPY': 'EURJPY=X',\n  // 유로/엔\n  'AUD/USD': 'AUDUSD=X',\n  // 호주달러/달러\n  'USD/CAD': 'USDCAD=X',\n  // 달러/캐나다달러\n  'USD/CHF': 'USDCHF=X',\n  // 달러/스위스프랑\n  'NZD/USD': 'NZDUSD=X',\n  // 뉴질랜드달러/달러\n  'USD/SGD': 'USDSGD=X' // 달러/싱가포르달러\n};\n\n// Yahoo Finance API에서 환율 데이터 가져오기\nconst fetchFXDataFromYahoo = async symbol => {\n  try {\n    const url = `https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?interval=1d&range=1d`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (data && data.chart && data.chart.result && data.chart.result[0]) {\n      const result = data.chart.result[0];\n      const meta = result.meta;\n      const regularMarketPrice = meta.regularMarketPrice;\n      const previousClose = meta.previousClose;\n      if (regularMarketPrice && previousClose) {\n        const change = regularMarketPrice - previousClose;\n        const changePercent = change / previousClose * 100;\n        return {\n          price: regularMarketPrice,\n          change: change,\n          changePercent: changePercent,\n          previousClose: previousClose,\n          isPositive: change >= 0\n        };\n      }\n    }\n    throw new Error('No valid data from Yahoo Finance');\n  } catch (error) {\n    console.error(`Error fetching ${symbol}:`, error);\n    return null;\n  }\n};\n\n// 모든 환율 데이터 가져오기\nexport const fetchAllFXData = async () => {\n  try {\n    console.log('🔄 Fetching FX data from Yahoo Finance...');\n    const fxData = [];\n    const promises = [];\n\n    // 모든 환율 심볼에 대해 병렬로 데이터 가져오기\n    for (const [name, symbol] of Object.entries(FX_SYMBOLS)) {\n      promises.push(fetchFXDataFromYahoo(symbol).then(data => {\n        if (data) {\n          console.log(`✅ ${name}: ${data.price} (${data.isPositive ? '+' : ''}${data.changePercent.toFixed(2)}%)`);\n          return {\n            title: name,\n            value: data.price,\n            change: data.changePercent,\n            isPositive: data.isPositive,\n            symbol: symbol,\n            isRealData: true,\n            dataSource: 'Yahoo Finance'\n          };\n        } else {\n          console.log(`❌ Failed to fetch ${name}`);\n          return null;\n        }\n      }).catch(error => {\n        console.log(`❌ Error fetching ${name}:`, error.message);\n        return null;\n      }));\n    }\n\n    // 모든 요청 완료 대기\n    const results = await Promise.all(promises);\n\n    // 성공한 데이터만 필터링\n    const successfulData = results.filter(data => data !== null);\n    console.log(`✅ Successfully fetched ${successfulData.length}/${Object.keys(FX_SYMBOLS).length} FX rates`);\n    return successfulData;\n  } catch (error) {\n    console.error('❌ Error fetching FX data:', error);\n    return [];\n  }\n};\n\n// 특정 환율 데이터 가져오기\nexport const fetchFXRate = async symbol => {\n  const yahooSymbol = FX_SYMBOLS[symbol];\n  if (!yahooSymbol) {\n    throw new Error(`Unknown symbol: ${symbol}`);\n  }\n  return await fetchFXDataFromYahoo(yahooSymbol);\n};\n\n// Yahoo Finance URL 매핑\nexport const YAHOO_FINANCE_URLS = {\n  'USD/KRW': 'https://finance.yahoo.com/quote/KRW=X',\n  'EUR/KRW': 'https://finance.yahoo.com/quote/EURKRW=X',\n  'JPY/KRW': 'https://finance.yahoo.com/quote/JPYKRW=X',\n  'CNY/KRW': 'https://finance.yahoo.com/quote/CNYKRW=X',\n  'GBP/KRW': 'https://finance.yahoo.com/quote/GBPKRW=X',\n  'EUR/USD': 'https://finance.yahoo.com/quote/EURUSD=X',\n  'USD/JPY': 'https://finance.yahoo.com/quote/USDJPY=X',\n  'GBP/USD': 'https://finance.yahoo.com/quote/GBPUSD=X',\n  'USD/CNY': 'https://finance.yahoo.com/quote/USDCNY=X',\n  'EUR/JPY': 'https://finance.yahoo.com/quote/EURJPY=X',\n  'AUD/USD': 'https://finance.yahoo.com/quote/AUDUSD=X',\n  'USD/CAD': 'https://finance.yahoo.com/quote/USDCAD=X',\n  'USD/CHF': 'https://finance.yahoo.com/quote/USDCHF=X',\n  'NZD/USD': 'https://finance.yahoo.com/quote/NZDUSD=X',\n  'USD/SGD': 'https://finance.yahoo.com/quote/USDSGD=X'\n};","map":{"version":3,"names":["FX_SYMBOLS","fetchFXDataFromYahoo","symbol","url","response","fetch","ok","Error","status","data","json","chart","result","meta","regularMarketPrice","previousClose","change","changePercent","price","isPositive","error","console","fetchAllFXData","log","fxData","promises","name","Object","entries","push","then","toFixed","title","value","isRealData","dataSource","catch","message","results","Promise","all","successfulData","filter","length","keys","fetchFXRate","yahooSymbol","YAHOO_FINANCE_URLS"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/fxApi.js"],"sourcesContent":["// Yahoo Finance API를 사용한 FX 데이터 서비스\r\n\r\n// 주요 환율 심볼 매핑\r\nconst FX_SYMBOLS = {\r\n  'USD/KRW': 'KRW=X', // 달러/원\r\n  'EUR/KRW': 'EURKRW=X', // 유로/원\r\n  'JPY/KRW': 'JPYKRW=X', // 엔/원\r\n  'CNY/KRW': 'CNYKRW=X', // 위안/원\r\n  'GBP/KRW': 'GBPKRW=X', // 파운드/원\r\n  'EUR/USD': 'EURUSD=X', // 유로/달러\r\n  'USD/JPY': 'USDJPY=X', // 달러/엔\r\n  'GBP/USD': 'GBPUSD=X', // 파운드/달러\r\n  'USD/CNY': 'USDCNY=X', // 달러/위안\r\n  'EUR/JPY': 'EURJPY=X', // 유로/엔\r\n  'AUD/USD': 'AUDUSD=X', // 호주달러/달러\r\n  'USD/CAD': 'USDCAD=X', // 달러/캐나다달러\r\n  'USD/CHF': 'USDCHF=X', // 달러/스위스프랑\r\n  'NZD/USD': 'NZDUSD=X', // 뉴질랜드달러/달러\r\n  'USD/SGD': 'USDSGD=X' // 달러/싱가포르달러\r\n};\r\n\r\n// Yahoo Finance API에서 환율 데이터 가져오기\r\nconst fetchFXDataFromYahoo = async (symbol) => {\r\n  try {\r\n    const url = `https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?interval=1d&range=1d`;\r\n    \r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (data && data.chart && data.chart.result && data.chart.result[0]) {\r\n      const result = data.chart.result[0];\r\n      const meta = result.meta;\r\n      const regularMarketPrice = meta.regularMarketPrice;\r\n      const previousClose = meta.previousClose;\r\n      \r\n      if (regularMarketPrice && previousClose) {\r\n        const change = regularMarketPrice - previousClose;\r\n        const changePercent = (change / previousClose) * 100;\r\n        \r\n        return {\r\n          price: regularMarketPrice,\r\n          change: change,\r\n          changePercent: changePercent,\r\n          previousClose: previousClose,\r\n          isPositive: change >= 0\r\n        };\r\n      }\r\n    }\r\n    \r\n    throw new Error('No valid data from Yahoo Finance');\r\n  } catch (error) {\r\n    console.error(`Error fetching ${symbol}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 모든 환율 데이터 가져오기\r\nexport const fetchAllFXData = async () => {\r\n  try {\r\n    console.log('🔄 Fetching FX data from Yahoo Finance...');\r\n    \r\n    const fxData = [];\r\n    const promises = [];\r\n    \r\n    // 모든 환율 심볼에 대해 병렬로 데이터 가져오기\r\n    for (const [name, symbol] of Object.entries(FX_SYMBOLS)) {\r\n      promises.push(\r\n        fetchFXDataFromYahoo(symbol)\r\n          .then(data => {\r\n            if (data) {\r\n              console.log(`✅ ${name}: ${data.price} (${data.isPositive ? '+' : ''}${data.changePercent.toFixed(2)}%)`);\r\n              return {\r\n                title: name,\r\n                value: data.price,\r\n                change: data.changePercent,\r\n                isPositive: data.isPositive,\r\n                symbol: symbol,\r\n                isRealData: true,\r\n                dataSource: 'Yahoo Finance'\r\n              };\r\n            } else {\r\n              console.log(`❌ Failed to fetch ${name}`);\r\n              return null;\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.log(`❌ Error fetching ${name}:`, error.message);\r\n            return null;\r\n          })\r\n      );\r\n    }\r\n    \r\n    // 모든 요청 완료 대기\r\n    const results = await Promise.all(promises);\r\n    \r\n    // 성공한 데이터만 필터링\r\n    const successfulData = results.filter(data => data !== null);\r\n    \r\n    console.log(`✅ Successfully fetched ${successfulData.length}/${Object.keys(FX_SYMBOLS).length} FX rates`);\r\n    \r\n    return successfulData;\r\n  } catch (error) {\r\n    console.error('❌ Error fetching FX data:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// 특정 환율 데이터 가져오기\r\nexport const fetchFXRate = async (symbol) => {\r\n  const yahooSymbol = FX_SYMBOLS[symbol];\r\n  if (!yahooSymbol) {\r\n    throw new Error(`Unknown symbol: ${symbol}`);\r\n  }\r\n  \r\n  return await fetchFXDataFromYahoo(yahooSymbol);\r\n};\r\n\r\n// Yahoo Finance URL 매핑\r\nexport const YAHOO_FINANCE_URLS = {\r\n  'USD/KRW': 'https://finance.yahoo.com/quote/KRW=X',\r\n  'EUR/KRW': 'https://finance.yahoo.com/quote/EURKRW=X',\r\n  'JPY/KRW': 'https://finance.yahoo.com/quote/JPYKRW=X',\r\n  'CNY/KRW': 'https://finance.yahoo.com/quote/CNYKRW=X',\r\n  'GBP/KRW': 'https://finance.yahoo.com/quote/GBPKRW=X',\r\n  'EUR/USD': 'https://finance.yahoo.com/quote/EURUSD=X',\r\n  'USD/JPY': 'https://finance.yahoo.com/quote/USDJPY=X',\r\n  'GBP/USD': 'https://finance.yahoo.com/quote/GBPUSD=X',\r\n  'USD/CNY': 'https://finance.yahoo.com/quote/USDCNY=X',\r\n  'EUR/JPY': 'https://finance.yahoo.com/quote/EURJPY=X',\r\n  'AUD/USD': 'https://finance.yahoo.com/quote/AUDUSD=X',\r\n  'USD/CAD': 'https://finance.yahoo.com/quote/USDCAD=X',\r\n  'USD/CHF': 'https://finance.yahoo.com/quote/USDCHF=X',\r\n  'NZD/USD': 'https://finance.yahoo.com/quote/NZDUSD=X',\r\n  'USD/SGD': 'https://finance.yahoo.com/quote/USDSGD=X'\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}