{"ast":null,"code":"// Yahoo Finance API를 사용한 주식 데이터 서비스\nconst BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\n\n// CORS 프록시 URL들 (여러 개 시도)\nconst CORS_PROXIES = ['https://cors-anywhere.herokuapp.com/', 'https://api.allorigins.win/raw?url=', 'https://corsproxy.io/?', '' // 직접 호출도 시도\n];\n\n// 프록시를 사용한 API 호출\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\n  if (proxyIndex >= CORS_PROXIES.length) {\n    throw new Error('All proxy attempts failed');\n  }\n  try {\n    const proxyUrl = CORS_PROXIES[proxyIndex] + url;\n    const response = await fetch(proxyUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response;\n  } catch (error) {\n    console.log(`Proxy ${proxyIndex} failed, trying next...`);\n    return fetchWithProxy(url, proxyIndex + 1);\n  }\n};\n\n// 주식 심볼별 차트 데이터 가져오기\nexport const fetchStockChartData = async (symbol, range = '1mo', interval = '1d') => {\n  try {\n    const url = `${BASE_URL}/${symbol}?interval=${interval}&range=${range}`;\n    const response = await fetchWithProxy(url);\n    const data = await response.json();\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\n      throw new Error('No chart data available');\n    }\n    const result = data.chart.result[0];\n    const timestamps = result.timestamp;\n    const quotes = result.indicators.quote[0];\n\n    // 데이터 정리 및 변환\n    const chartData = timestamps.map((timestamp, index) => {\n      const date = new Date(timestamp * 1000);\n      return {\n        date: date.toLocaleDateString('ko-KR'),\n        timestamp: timestamp,\n        open: quotes.open[index] || 0,\n        high: quotes.high[index] || 0,\n        low: quotes.low[index] || 0,\n        close: quotes.close[index] || 0,\n        volume: quotes.volume[index] || 0\n      };\n    }).filter(item => item.close > 0); // 유효한 데이터만 필터링\n\n    return chartData;\n  } catch (error) {\n    console.error('Error fetching stock data:', error);\n    throw error;\n  }\n};\n\n// 주식 실시간 가격 정보 가져오기\nexport const fetchStockQuote = async symbol => {\n  try {\n    const url = `${BASE_URL}/${symbol}?interval=1m&range=1d`;\n    const response = await fetchWithProxy(url);\n    const data = await response.json();\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\n      throw new Error('No quote data available');\n    }\n    const result = data.chart.result[0];\n    const meta = result.meta;\n    const quotes = result.indicators.quote[0];\n\n    // 가장 최근 데이터\n    const latestIndex = quotes.close.length - 1;\n    return {\n      symbol: symbol,\n      price: meta.regularMarketPrice || quotes.close[latestIndex] || 0,\n      change: meta.regularMarketPrice - meta.previousClose || 0,\n      changePercent: (meta.regularMarketPrice - meta.previousClose) / meta.previousClose * 100 || 0,\n      previousClose: meta.previousClose || 0,\n      open: quotes.open[latestIndex] || 0,\n      high: quotes.high[latestIndex] || 0,\n      low: quotes.low[latestIndex] || 0,\n      volume: quotes.volume[latestIndex] || 0,\n      marketCap: meta.marketCap || 0,\n      currency: meta.currency || 'USD'\n    };\n  } catch (error) {\n    console.error('Error fetching stock quote:', error);\n    throw error;\n  }\n};\n\n// 여러 주식 심볼의 실시간 데이터 가져오기\nexport const fetchMultipleStockQuotes = async symbols => {\n  try {\n    const promises = symbols.map(symbol => fetchStockQuote(symbol));\n    const results = await Promise.allSettled(promises);\n    return results.map((result, index) => {\n      if (result.status === 'fulfilled') {\n        return result.value;\n      } else {\n        console.error(`Failed to fetch ${symbols[index]}:`, result.reason);\n        return {\n          symbol: symbols[index],\n          error: true,\n          message: result.reason.message\n        };\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching multiple stock quotes:', error);\n    throw error;\n  }\n};\n\n// 인기 주식 심볼들\nexport const POPULAR_STOCKS = ['^GSPC',\n// S&P 500\n'^IXIC',\n// NASDAQ\n'^DJI',\n// DOW JONES\n'^VIX',\n// VIX\n'^KS11',\n// KOSPI\n'^KQ11' // KOSDAQ\n];","map":{"version":3,"names":["BASE_URL","CORS_PROXIES","fetchWithProxy","url","proxyIndex","length","Error","proxyUrl","response","fetch","method","headers","ok","status","error","console","log","fetchStockChartData","symbol","range","interval","data","json","chart","result","timestamps","timestamp","quotes","indicators","quote","chartData","map","index","date","Date","toLocaleDateString","open","high","low","close","volume","filter","item","fetchStockQuote","meta","latestIndex","price","regularMarketPrice","change","previousClose","changePercent","marketCap","currency","fetchMultipleStockQuotes","symbols","promises","results","Promise","allSettled","value","reason","message","POPULAR_STOCKS"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/stockApi.js"],"sourcesContent":["// Yahoo Finance API를 사용한 주식 데이터 서비스\r\nconst BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\r\n\r\n// CORS 프록시 URL들 (여러 개 시도)\r\nconst CORS_PROXIES = [\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://corsproxy.io/?',\r\n  '' // 직접 호출도 시도\r\n];\r\n\r\n// 프록시를 사용한 API 호출\r\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\r\n  if (proxyIndex >= CORS_PROXIES.length) {\r\n    throw new Error('All proxy attempts failed');\r\n  }\r\n\r\n  try {\r\n    const proxyUrl = CORS_PROXIES[proxyIndex] + url;\r\n    const response = await fetch(proxyUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.log(`Proxy ${proxyIndex} failed, trying next...`);\r\n    return fetchWithProxy(url, proxyIndex + 1);\r\n  }\r\n};\r\n\r\n// 주식 심볼별 차트 데이터 가져오기\r\nexport const fetchStockChartData = async (symbol, range = '1mo', interval = '1d') => {\r\n  try {\r\n    const url = `${BASE_URL}/${symbol}?interval=${interval}&range=${range}`;\r\n    const response = await fetchWithProxy(url);\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\r\n      throw new Error('No chart data available');\r\n    }\r\n    \r\n    const result = data.chart.result[0];\r\n    const timestamps = result.timestamp;\r\n    const quotes = result.indicators.quote[0];\r\n    \r\n    // 데이터 정리 및 변환\r\n    const chartData = timestamps.map((timestamp, index) => {\r\n      const date = new Date(timestamp * 1000);\r\n      return {\r\n        date: date.toLocaleDateString('ko-KR'),\r\n        timestamp: timestamp,\r\n        open: quotes.open[index] || 0,\r\n        high: quotes.high[index] || 0,\r\n        low: quotes.low[index] || 0,\r\n        close: quotes.close[index] || 0,\r\n        volume: quotes.volume[index] || 0\r\n      };\r\n    }).filter(item => item.close > 0); // 유효한 데이터만 필터링\r\n    \r\n    return chartData;\r\n  } catch (error) {\r\n    console.error('Error fetching stock data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 주식 실시간 가격 정보 가져오기\r\nexport const fetchStockQuote = async (symbol) => {\r\n  try {\r\n    const url = `${BASE_URL}/${symbol}?interval=1m&range=1d`;\r\n    const response = await fetchWithProxy(url);\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\r\n      throw new Error('No quote data available');\r\n    }\r\n    \r\n    const result = data.chart.result[0];\r\n    const meta = result.meta;\r\n    const quotes = result.indicators.quote[0];\r\n    \r\n    // 가장 최근 데이터\r\n    const latestIndex = quotes.close.length - 1;\r\n    \r\n    return {\r\n      symbol: symbol,\r\n      price: meta.regularMarketPrice || quotes.close[latestIndex] || 0,\r\n      change: meta.regularMarketPrice - meta.previousClose || 0,\r\n      changePercent: ((meta.regularMarketPrice - meta.previousClose) / meta.previousClose * 100) || 0,\r\n      previousClose: meta.previousClose || 0,\r\n      open: quotes.open[latestIndex] || 0,\r\n      high: quotes.high[latestIndex] || 0,\r\n      low: quotes.low[latestIndex] || 0,\r\n      volume: quotes.volume[latestIndex] || 0,\r\n      marketCap: meta.marketCap || 0,\r\n      currency: meta.currency || 'USD'\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching stock quote:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 여러 주식 심볼의 실시간 데이터 가져오기\r\nexport const fetchMultipleStockQuotes = async (symbols) => {\r\n  try {\r\n    const promises = symbols.map(symbol => fetchStockQuote(symbol));\r\n    const results = await Promise.allSettled(promises);\r\n    \r\n    return results.map((result, index) => {\r\n      if (result.status === 'fulfilled') {\r\n        return result.value;\r\n      } else {\r\n        console.error(`Failed to fetch ${symbols[index]}:`, result.reason);\r\n        return {\r\n          symbol: symbols[index],\r\n          error: true,\r\n          message: result.reason.message\r\n        };\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching multiple stock quotes:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 인기 주식 심볼들\r\nexport const POPULAR_STOCKS = [\r\n  '^GSPC',    // S&P 500\r\n  '^IXIC',    // NASDAQ\r\n  '^DJI',     // DOW JONES\r\n  '^VIX',     // VIX\r\n  '^KS11',    // KOSPI\r\n  '^KQ11'     // KOSDAQ\r\n]; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}