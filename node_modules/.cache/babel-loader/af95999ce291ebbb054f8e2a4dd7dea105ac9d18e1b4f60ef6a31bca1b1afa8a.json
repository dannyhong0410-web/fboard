{"ast":null,"code":"// Macro Economics 데이터를 가져오는 서비스\nconst BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\n\n// Macro 지표 심볼 매핑\nconst MACRO_SYMBOLS = {\n  'S&P 500 Annual Dividend Futures': '^SP500DIV',\n  'World Citi Economic Surprise Index': 'CITI_SURPRISE',\n  '5-Year 5-Year Forward Inflation Expectation Rate': 'T5YIFR',\n  'US Core Inflation Rate YoY': 'US_CORE_INFLATION',\n  'US Core PCE YoY': 'US_CORE_PCE',\n  'US Core PPI YoY': 'US_CORE_PPI',\n  'US Money Supply M2': 'US_M2',\n  'US SOFR': 'US_SOFR'\n};\n\n// 외부 URL 매핑\nexport const EXTERNAL_URLS = {\n  'S&P 500 Annual Dividend Futures': 'https://finance.yahoo.com/quote/%5ESP500DIV',\n  'World Citi Economic Surprise Index': 'https://en.macromicro.me/charts/45866/global-citi-surprise-index',\n  '5-Year 5-Year Forward Inflation Expectation Rate': 'https://fred.stlouisfed.org/series/T5YIFR',\n  'US Core Inflation Rate YoY': 'https://tradingeconomics.com/united-states/core-inflation-rate',\n  'US Core PCE YoY': 'https://tradingeconomics.com/united-states/core-pce-price-index-annual-change',\n  'US Core PPI YoY': 'https://tradingeconomics.com/united-states/core-producer-prices-yoy',\n  'US Money Supply M2': 'https://tradingeconomics.com/united-states/money-supply-m2',\n  'US SOFR': 'https://tradingeconomics.com/united-states/secured-overnight-financing-rate'\n};\n\n// 프록시 서버들을 사용한 웹 스크래핑\nconst PROXY_SERVICES = ['https://api.allorigins.win/raw?url=', 'https://corsproxy.io/?', 'https://thingproxy.freeboard.io/fetch/', 'https://cors.bridged.cc/', 'https://api.codetabs.com/v1/proxy?quest=', 'https://cors.eu.org/', 'https://cors-anywhere.herokuapp.com/', 'https://api.codetabs.com/v1/proxy?quest=', 'https://cors.bridged.cc/', 'https://thingproxy.freeboard.io/fetch/', 'https://corsproxy.io/?', 'https://api.allorigins.win/raw?url=', 'https://cors-anywhere.herokuapp.com/', 'https://api.allorigins.win/raw?url=', 'https://corsproxy.io/?', 'https://thingproxy.freeboard.io/fetch/', 'https://cors.bridged.cc/', 'https://api.codetabs.com/v1/proxy?quest=', 'https://cors.eu.org/', '' // 직접 호출도 시도\n];\n\n// 프록시를 사용한 웹 스크래핑\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\n  if (proxyIndex >= PROXY_SERVICES.length) {\n    throw new Error('All proxy attempts failed');\n  }\n  try {\n    const proxyUrl = PROXY_SERVICES[proxyIndex] + url;\n    console.log(`🔗 Trying proxy ${proxyIndex + 1}/${PROXY_SERVICES.length}: ${proxyUrl.substring(0, 80)}...`);\n    const response = await fetch(proxyUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n        'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\n        'Accept-Encoding': 'gzip, deflate, br',\n        'Connection': 'keep-alive',\n        'Upgrade-Insecure-Requests': '1',\n        'Cache-Control': 'no-cache',\n        'Pragma': 'no-cache'\n      },\n      timeout: 15000 // 15초 타임아웃\n    });\n    console.log(`📊 Response status: ${response.status}`);\n    console.log(`📊 Response headers:`, Object.fromEntries(response.headers.entries()));\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);\n    }\n    const data = await response.text();\n    console.log(`📊 Response data length: ${data.length} characters`);\n    if (data.length < 100) {\n      console.log(`📄 Short response data: ${data}`);\n      throw new Error('Response too short, likely an error page');\n    }\n\n    // 에러 페이지인지 확인\n    if (data.includes('error') || data.includes('Error') || data.includes('ERROR')) {\n      console.log('⚠️ Response contains error indicators');\n      console.log('📄 Error response preview:', data.substring(0, 500));\n    }\n\n    // CORS 에러인지 확인\n    if (data.includes('CORS') || data.includes('cors') || data.includes('Access-Control')) {\n      console.log('⚠️ Response contains CORS error indicators');\n      console.log('📄 CORS error preview:', data.substring(0, 500));\n    }\n    console.log(`✅ Proxy ${proxyIndex + 1} successful! Data length: ${data.length} characters`);\n    return data;\n  } catch (error) {\n    console.log(`❌ Proxy ${proxyIndex + 1} failed: ${error.message}`);\n    console.log(`🔍 Error details:`, error);\n\n    // 마지막 프록시가 아니면 다음 프록시 시도\n    if (proxyIndex < PROXY_SERVICES.length - 1) {\n      console.log(`🔄 Retrying with next proxy...`);\n      return fetchWithProxy(url, proxyIndex + 1);\n    } else {\n      throw new Error(`All ${PROXY_SERVICES.length} proxies failed. Last error: ${error.message}`);\n    }\n  }\n};\n\n// 2024년 12월 기준 최신 더미 데이터 (실제 시장 상황 반영)\nconst DUMMY_MACRO_DATA = [{\n  title: 'S&P 500 Annual Dividend Futures',\n  value: 2.15,\n  change: 0.05,\n  isPositive: true,\n  symbol: '^SP500DIV',\n  unit: '%',\n  description: 'S&P 500 연간 배당률 선물'\n}, {\n  title: 'World Citi Economic Surprise Index',\n  value: 13.40,\n  // 실제 MacroMicro 사이트에서 확인한 값으로 업데이트\n  change: -0.90,\n  // 13.40 - 14.30 = -0.90\n  isPositive: true,\n  symbol: 'CITI_SURPRISE',\n  unit: '',\n  description: '글로벌 경제 서프라이즈 지수'\n}, {\n  title: '5-Year 5-Year Forward Inflation Expectation Rate',\n  value: 2.33,\n  // FRED에서 확인한 실제 값으로 업데이트\n  change: -0.01,\n  isPositive: true,\n  symbol: 'T5YIFR',\n  unit: '%',\n  description: '5년 후 5년 인플레이션 기대율'\n}, {\n  title: 'US Core Inflation Rate YoY',\n  value: 3.2,\n  change: -0.1,\n  isPositive: false,\n  symbol: 'US_CORE_INFLATION',\n  unit: '%',\n  description: '미국 핵심 인플레이션률 (전년 동기 대비)'\n}, {\n  title: 'US Core PCE YoY',\n  value: 2.9,\n  change: -0.2,\n  isPositive: false,\n  symbol: 'US_CORE_PCE',\n  unit: '%',\n  description: '미국 핵심 PCE 물가지수 (전년 동기 대비)'\n}, {\n  title: 'US Core PPI YoY',\n  value: 2.4,\n  change: -0.3,\n  isPositive: false,\n  symbol: 'US_CORE_PPI',\n  unit: '%',\n  description: '미국 핵심 PPI 물가지수 (전년 동기 대비)'\n}, {\n  title: 'US Money Supply M2',\n  value: 20.8,\n  change: -2.1,\n  isPositive: false,\n  symbol: 'US_M2',\n  unit: '',\n  description: '미국 M2 통화량 (전년 동기 대비)'\n}, {\n  title: 'US SOFR',\n  value: 5.33,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'US_SOFR',\n  unit: '%',\n  description: '미국 담보부 하루물 금리'\n}];\n\n// S&P 500 Annual Dividend Futures 가져오기 (Yahoo Finance)\nexport const fetchSP500DividendFutures = async () => {\n  try {\n    console.log('🔄 Fetching S&P 500 Annual Dividend Futures from Yahoo Finance...');\n    const symbol = '^SP500DIV';\n    const url = `${BASE_URL}/${symbol}?interval=1d&range=1d`;\n    console.log(`🔗 URL: ${url}`);\n    const data = await fetchWithProxy(url);\n    if (!data) {\n      throw new Error('Failed to fetch data');\n    }\n\n    // JSON 파싱 시도\n    let jsonData;\n    try {\n      jsonData = JSON.parse(data);\n    } catch (error) {\n      console.log('❌ Failed to parse JSON, using dummy data');\n      throw new Error('Invalid JSON response');\n    }\n\n    // Yahoo Finance API 응답 구조에서 데이터 추출\n    if (jsonData.chart && jsonData.chart.result && jsonData.chart.result[0]) {\n      const result = jsonData.chart.result[0];\n      const meta = result.meta;\n      if (meta) {\n        const currentPrice = meta.regularMarketPrice;\n        const previousClose = meta.previousClose;\n        const change = currentPrice - previousClose;\n        console.log(`✅ Successfully fetched S&P 500 Dividend Futures: ${currentPrice}% (${change >= 0 ? '+' : ''}${change.toFixed(2)})`);\n        return {\n          title: 'S&P 500 Annual Dividend Futures',\n          value: currentPrice,\n          change: Math.round(change * 100) / 100,\n          isPositive: change >= 0,\n          symbol: symbol,\n          unit: '%',\n          description: 'S&P 500 연간 배당률 선물',\n          isRealData: true,\n          dataSource: 'Yahoo Finance'\n        };\n      }\n    }\n    throw new Error('No valid data found for S&P 500 Dividend Futures');\n  } catch (error) {\n    console.error('❌ Error fetching S&P 500 Dividend Futures:', error.message);\n\n    // 실패 시 더미 데이터 사용\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'S&P 500 Annual Dividend Futures');\n    if (dummyData) {\n      console.log('📊 Using dummy data for S&P 500 Dividend Futures');\n      return {\n        ...dummyData,\n        isRealData: false,\n        dataSource: 'Dummy Data (Error)'\n      };\n    }\n    throw error;\n  }\n};\n\n// World Citi Economic Surprise Index 가져오기 (MacroMicro)\nexport const fetchCitiEconomicSurpriseIndex = async () => {\n  try {\n    console.log('🔄 Fetching World Citi Economic Surprise Index from MacroMicro...');\n    const url = 'https://en.macromicro.me/charts/45866/global-citi-surprise-index';\n    console.log(`🔗 URL: ${url}`);\n\n    // 여러 방법으로 시도\n    let data = null;\n    let lastError = null;\n\n    // 방법 1: 프록시 서버들 시도\n    try {\n      data = await fetchWithProxy(url);\n      console.log('✅ Successfully fetched data using proxy');\n    } catch (error) {\n      console.log('❌ Proxy method failed:', error.message);\n      lastError = error;\n    }\n\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\n    if (!data) {\n      try {\n        console.log('🔄 Trying direct fetch...');\n        const response = await fetch(url, {\n          method: 'GET',\n          mode: 'cors',\n          headers: {\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\n            'Cache-Control': 'no-cache'\n          }\n        });\n        if (response.ok) {\n          data = await response.text();\n          console.log('✅ Successfully fetched data using direct fetch');\n        } else {\n          throw new Error(`Direct fetch failed: ${response.status}`);\n        }\n      } catch (error) {\n        console.log('❌ Direct fetch failed:', error.message);\n        lastError = error;\n      }\n    }\n\n    // 방법 3: JSONP 방식 시도 (MacroMicro에서 지원하는 경우)\n    if (!data) {\n      try {\n        console.log('🔄 Trying JSONP approach...');\n        // JSONP는 동적 스크립트 로딩을 통해 CORS를 우회\n        const script = document.createElement('script');\n        script.src = url + '?callback=handleMacroData';\n\n        // 전역 콜백 함수 정의\n        window.handleMacroData = function (jsonData) {\n          console.log('✅ JSONP callback received:', jsonData);\n          data = JSON.stringify(jsonData);\n        };\n        document.head.appendChild(script);\n\n        // 5초 대기\n        await new Promise(resolve => setTimeout(resolve, 5000));\n        if (data) {\n          console.log('✅ Successfully fetched data using JSONP');\n        } else {\n          throw new Error('JSONP timeout');\n        }\n      } catch (error) {\n        console.log('❌ JSONP method failed:', error.message);\n        lastError = error;\n      }\n    }\n    if (!data) {\n      console.log('❌ All methods failed, using dummy data');\n      console.log('🔍 Last error:', lastError);\n\n      // 실패 시 더미 데이터 사용\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'World Citi Economic Surprise Index');\n      if (dummyData) {\n        console.log('📊 Using dummy data for Citi Economic Surprise Index');\n        return {\n          ...dummyData,\n          isRealData: false,\n          dataSource: 'Dummy Data (All methods failed)'\n        };\n      }\n      throw new Error('All data fetching methods failed');\n    }\n    console.log(`📄 Total HTML length: ${data.length} characters`);\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\n\n    // \"Latest Stats\" 텍스트 찾기\n    const latestStatsIndex = data.indexOf('Latest Stats');\n    if (latestStatsIndex === -1) {\n      console.log('❌ \"Latest Stats\" text not found');\n      console.log('🔍 Searching for alternative patterns...');\n\n      // 대안 패턴들 시도\n      const alternativePatterns = ['Latest Stats', 'latest stats', 'LATEST STATS', 'Latest Statistics', 'Statistics', 'Stats'];\n      for (const pattern of alternativePatterns) {\n        const index = data.indexOf(pattern);\n        if (index !== -1) {\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\n          break;\n        }\n      }\n\n      // HTML에서 \"Citigroup\" 관련 텍스트 찾기\n      const citigroupIndex = data.indexOf('Citigroup');\n      if (citigroupIndex !== -1) {\n        console.log(`✅ Found \"Citigroup\" at index ${citigroupIndex}`);\n        console.log('📄 Context around Citigroup:', data.substring(citigroupIndex - 100, citigroupIndex + 200));\n      }\n      throw new Error('Latest Stats section not found');\n    }\n    console.log(`✅ Found \"Latest Stats\" section at index ${latestStatsIndex}`);\n\n    // \"Latest Stats\" 이후의 HTML에서 \"Citigroup Economic Surprise Index: Global\" 찾기\n    const afterLatestStats = data.substring(latestStatsIndex);\n    console.log('📄 After Latest Stats (first 1000 chars):', afterLatestStats.substring(0, 1000));\n    const citiIndexIndex = afterLatestStats.indexOf('Citigroup Economic Surprise Index: Global');\n    if (citiIndexIndex === -1) {\n      console.log('❌ \"Citigroup Economic Surprise Index: Global\" text not found');\n      console.log('🔍 Searching for alternative Citigroup patterns...');\n\n      // 대안 패턴들 시도\n      const citigroupPatterns = ['Citigroup Economic Surprise Index: Global', 'Citigroup Economic Surprise Index', 'Economic Surprise Index: Global', 'Economic Surprise Index', 'Surprise Index: Global', 'Surprise Index'];\n      for (const pattern of citigroupPatterns) {\n        const index = afterLatestStats.indexOf(pattern);\n        if (index !== -1) {\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\n          console.log('📄 Context around pattern:', afterLatestStats.substring(index - 50, index + 200));\n          break;\n        }\n      }\n      throw new Error('Citigroup Economic Surprise Index: Global not found');\n    }\n    console.log(`✅ Found \"Citigroup Economic Surprise Index: Global\" text at index ${citiIndexIndex}`);\n\n    // \"Citigroup Economic Surprise Index: Global\" 이후의 HTML에서 날짜와 값 찾기\n    const afterCitiIndex = afterLatestStats.substring(citiIndexIndex);\n    console.log('📄 After Citigroup pattern (first 500 chars):', afterCitiIndex.substring(0, 500));\n\n    // YYYY-MM-DD 패턴 찾기\n    const datePattern = /\\d{4}-\\d{2}-\\d{2}/;\n    const dateMatch = afterCitiIndex.match(datePattern);\n    if (!dateMatch) {\n      console.log('❌ Date pattern not found');\n      console.log('🔍 Searching for any date-like patterns...');\n\n      // 다른 날짜 패턴들 시도\n      const datePatterns = [/\\d{4}-\\d{2}-\\d{2}/,\n      // YYYY-MM-DD\n      /\\d{2}-\\d{2}-\\d{4}/,\n      // MM-DD-YYYY\n      /\\d{4}\\/\\d{2}\\/\\d{2}/,\n      // YYYY/MM/DD\n      /\\d{2}\\/\\d{2}\\/\\d{4}/ // MM/DD/YYYY\n      ];\n      for (const pattern of datePatterns) {\n        const match = afterCitiIndex.match(pattern);\n        if (match) {\n          console.log(`✅ Found date pattern: ${match[0]}`);\n          break;\n        }\n      }\n      throw new Error('Date pattern not found');\n    }\n    const dateFound = dateMatch[0];\n    console.log(`✅ Found date: ${dateFound}`);\n\n    // 날짜 이후의 HTML에서 숫자 값 찾기 (더 정확한 패턴)\n    const dateIndex = afterCitiIndex.indexOf(dateFound);\n    const afterDate = afterCitiIndex.substring(dateIndex + dateFound.length);\n    console.log('📄 After date (first 300 chars):', afterDate.substring(0, 300));\n\n    // 숫자 패턴 찾기 (소수점 포함, 더 정확한 매칭)\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\n    const numberMatch = afterDate.match(numberPattern);\n    if (!numberMatch) {\n      console.log('❌ Number value not found after date');\n      console.log('🔍 Searching for any number patterns...');\n\n      // 다른 숫자 패턴들 시도\n      const numberPatterns = [/[-+]?\\d+\\.\\d+/,\n      // 소수점 포함\n      /[-+]?\\d+/,\n      // 정수만\n      /\\d+\\.\\d+/ // 양수 소수점\n      ];\n      for (const pattern of numberPatterns) {\n        const match = afterDate.match(pattern);\n        if (match) {\n          console.log(`✅ Found number pattern: ${match[0]}`);\n          break;\n        }\n      }\n      throw new Error('Number value not found after date');\n    }\n    const currentValue = parseFloat(numberMatch[0]);\n    console.log(`✅ Successfully extracted Citi Economic Surprise Index: ${currentValue}`);\n\n    // 이전 값도 찾아보기 (Prev: 패턴)\n    const prevPattern = /Prev:\\s*([-+]?\\d+\\.\\d+)/;\n    const prevMatch = afterDate.match(prevPattern);\n    let change = 0.00;\n    if (prevMatch) {\n      const prevValue = parseFloat(prevMatch[1]);\n      change = currentValue - prevValue;\n      console.log(`✅ Found previous value: ${prevValue}, change: ${change}`);\n    } else {\n      console.log('⚠️ Previous value not found, using 0.00 for change');\n    }\n    return {\n      title: 'World Citi Economic Surprise Index',\n      value: currentValue,\n      change: Math.round(change * 100) / 100,\n      isPositive: currentValue >= 0,\n      symbol: 'CITI_SURPRISE',\n      unit: '',\n      description: '글로벌 경제 서프라이즈 지수',\n      isRealData: true,\n      dataSource: 'MacroMicro'\n    };\n  } catch (error) {\n    console.error('❌ Error fetching Citi Economic Surprise Index:', error.message);\n\n    // 실패 시 더미 데이터 사용\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'World Citi Economic Surprise Index');\n    if (dummyData) {\n      console.log('📊 Using dummy data for Citi Economic Surprise Index');\n      return {\n        ...dummyData,\n        isRealData: false,\n        dataSource: 'Dummy Data (Error)'\n      };\n    }\n    throw error;\n  }\n};\n\n// 5-Year 5-Year Forward Inflation Expectation Rate 가져오기 (FRED)\nexport const fetchInflationExpectationRate = async () => {\n  try {\n    console.log('🔄 Fetching 5-Year 5-Year Forward Inflation Expectation Rate from FRED...');\n    const url = 'https://fred.stlouisfed.org/series/T5YIFR';\n    console.log(`🔗 URL: ${url}`);\n    const data = await fetchWithProxy(url);\n    if (!data) {\n      throw new Error('Failed to fetch data');\n    }\n\n    // FRED 페이지에서 데이터 추출 시도\n    console.log('📄 HTML Preview:', data.substring(0, 1000));\n\n    // FRED 페이지에서 최신 값 추출 (2025-08-12: 2.33 형태)\n    const latestValueMatch = data.match(/2025-\\d{2}-\\d{2}:\\s*(\\d+\\.\\d+)/);\n    if (latestValueMatch) {\n      const currentValue = parseFloat(latestValueMatch[1]);\n      console.log(`✅ Successfully extracted inflation expectation rate: ${currentValue}%`);\n      return {\n        title: '5-Year 5-Year Forward Inflation Expectation Rate',\n        value: currentValue,\n        change: 0.00,\n        // FRED에서는 변화량을 직접 제공하지 않으므로 0으로 설정\n        isPositive: true,\n        symbol: 'T5YIFR',\n        unit: '%',\n        description: '5년 후 5년 인플레이션 기대율',\n        isRealData: true,\n        dataSource: 'FRED (Federal Reserve Economic Data)'\n      };\n    }\n\n    // 임시로 더미 데이터 반환\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === '5-Year 5-Year Forward Inflation Expectation Rate');\n    if (dummyData) {\n      console.log('📊 Using dummy data for Inflation Expectation Rate (parsing not implemented)');\n      return {\n        ...dummyData,\n        isRealData: false,\n        dataSource: 'Dummy Data (Parsing not implemented)'\n      };\n    }\n    throw new Error('No valid data found for Inflation Expectation Rate');\n  } catch (error) {\n    console.error('❌ Error fetching Inflation Expectation Rate:', error.message);\n\n    // 실패 시 더미 데이터 사용\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === '5-Year 5-Year Forward Inflation Expectation Rate');\n    if (dummyData) {\n      console.log('📊 Using dummy data for Inflation Expectation Rate');\n      return {\n        ...dummyData,\n        isRealData: false,\n        dataSource: 'Dummy Data (Error)'\n      };\n    }\n    throw error;\n  }\n};\n\n// US Core Inflation Rate YoY 가져오기 (Trading Economics)\nexport const fetchUSCoreInflationRate = async () => {\n  try {\n    console.log('🔄 Fetching US Core Inflation Rate YoY from Trading Economics...');\n    const url = 'https://tradingeconomics.com/united-states/core-inflation-rate';\n    console.log(`🔗 URL: ${url}`);\n\n    // 여러 방법으로 시도\n    let data = null;\n    let lastError = null;\n\n    // 방법 1: 프록시 서버들 시도\n    try {\n      data = await fetchWithProxy(url);\n      console.log('✅ Successfully fetched data using proxy');\n    } catch (error) {\n      console.log('❌ Proxy method failed:', error.message);\n      lastError = error;\n    }\n\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\n    if (!data) {\n      try {\n        console.log('🔄 Trying direct fetch...');\n        const response = await fetch(url, {\n          method: 'GET',\n          mode: 'cors',\n          headers: {\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\n            'Cache-Control': 'no-cache'\n          }\n        });\n        if (response.ok) {\n          data = await response.text();\n          console.log('✅ Successfully fetched data using direct fetch');\n        } else {\n          throw new Error(`Direct fetch failed: ${response.status}`);\n        }\n      } catch (error) {\n        console.log('❌ Direct fetch failed:', error.message);\n        lastError = error;\n      }\n    }\n    if (!data) {\n      console.log('❌ All methods failed, using dummy data');\n      console.log('🔍 Last error:', lastError);\n\n      // 실패 시 더미 데이터 사용\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core Inflation Rate YoY');\n      if (dummyData) {\n        console.log('📊 Using dummy data for US Core Inflation Rate');\n        return {\n          ...dummyData,\n          isRealData: false,\n          dataSource: 'Dummy Data (All methods failed)'\n        };\n      }\n      throw new Error('All data fetching methods failed');\n    }\n    console.log(`📄 Total HTML length: ${data.length} characters`);\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\n\n    // Trading Economics 페이지에서 데이터 추출 시도\n    // \"Core Inflation Rate\" 텍스트 찾기\n    const coreInflationIndex = data.indexOf('Core Inflation Rate');\n    if (coreInflationIndex === -1) {\n      console.log('❌ \"Core Inflation Rate\" text not found');\n      console.log('🔍 Searching for alternative patterns...');\n\n      // 대안 패턴들 시도\n      const alternativePatterns = ['Core Inflation Rate', 'core inflation rate', 'CORE INFLATION RATE', 'Inflation Rate', 'inflation rate'];\n      for (const pattern of alternativePatterns) {\n        const index = data.indexOf(pattern);\n        if (index !== -1) {\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\n          break;\n        }\n      }\n      throw new Error('Core Inflation Rate section not found');\n    }\n    console.log(`✅ Found \"Core Inflation Rate\" at index ${coreInflationIndex}`);\n\n    // \"Core Inflation Rate\" 이후의 HTML에서 숫자 값 찾기\n    const afterCoreInflation = data.substring(coreInflationIndex);\n    console.log('📄 After Core Inflation Rate (first 1000 chars):', afterCoreInflation.substring(0, 1000));\n\n    // 숫자 패턴 찾기 (소수점 포함)\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\n    const numberMatch = afterCoreInflation.match(numberPattern);\n    if (!numberMatch) {\n      console.log('❌ Number value not found');\n      console.log('🔍 Searching for any number patterns...');\n\n      // 다른 숫자 패턴들 시도\n      const numberPatterns = [/[-+]?\\d+\\.\\d+/,\n      // 소수점 포함\n      /[-+]?\\d+/,\n      // 정수만\n      /\\d+\\.\\d+/ // 양수 소수점\n      ];\n      for (const pattern of numberPatterns) {\n        const match = afterCoreInflation.match(pattern);\n        if (match) {\n          console.log(`✅ Found number pattern: ${match[0]}`);\n          break;\n        }\n      }\n      throw new Error('Number value not found');\n    }\n    const currentValue = parseFloat(numberMatch[0]);\n    console.log(`✅ Successfully extracted US Core Inflation Rate: ${currentValue}%`);\n\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core Inflation Rate YoY');\n    const change = dummyData ? dummyData.change : 0.00;\n    return {\n      title: 'US Core Inflation Rate YoY',\n      value: currentValue,\n      change: change,\n      isPositive: change >= 0,\n      symbol: 'US_CORE_INFLATION',\n      unit: '%',\n      description: '미국 핵심 인플레이션률 (전년 동기 대비)',\n      isRealData: true,\n      dataSource: 'Trading Economics'\n    };\n  } catch (error) {\n    console.error('❌ Error fetching US Core Inflation Rate:', error.message);\n\n    // 실패 시 더미 데이터 사용\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core Inflation Rate YoY');\n    if (dummyData) {\n      console.log('📊 Using dummy data for US Core Inflation Rate');\n      return {\n        ...dummyData,\n        isRealData: false,\n        dataSource: 'Dummy Data (Error)'\n      };\n    }\n    throw error;\n  }\n};\n\n// US Core PCE YoY 가져오기 (Trading Economics)\nexport const fetchUSCorePCE = async () => {\n  try {\n    console.log('🔄 Fetching US Core PCE YoY from Trading Economics...');\n    const url = 'https://tradingeconomics.com/united-states/core-pce-price-index-annual-change';\n    console.log(`🔗 URL: ${url}`);\n\n    // 여러 방법으로 시도\n    let data = null;\n    let lastError = null;\n\n    // 방법 1: 프록시 서버들 시도\n    try {\n      data = await fetchWithProxy(url);\n      console.log('✅ Successfully fetched data using proxy');\n    } catch (error) {\n      console.log('❌ Proxy method failed:', error.message);\n      lastError = error;\n    }\n\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\n    if (!data) {\n      try {\n        console.log('🔄 Trying direct fetch...');\n        const response = await fetch(url, {\n          method: 'GET',\n          mode: 'cors',\n          headers: {\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\n            'Cache-Control': 'no-cache'\n          }\n        });\n        if (response.ok) {\n          data = await response.text();\n          console.log('✅ Successfully fetched data using direct fetch');\n        } else {\n          throw new Error(`Direct fetch failed: ${response.status}`);\n        }\n      } catch (error) {\n        console.log('❌ Direct fetch failed:', error.message);\n        lastError = error;\n      }\n    }\n    if (!data) {\n      console.log('❌ All methods failed, using dummy data');\n      console.log('🔍 Last error:', lastError);\n\n      // 실패 시 더미 데이터 사용\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core PCE YoY');\n      if (dummyData) {\n        console.log('📊 Using dummy data for US Core PCE');\n        return {\n          ...dummyData,\n          isRealData: false,\n          dataSource: 'Dummy Data (All methods failed)'\n        };\n      }\n      throw new Error('All data fetching methods failed');\n    }\n    console.log(`📄 Total HTML length: ${data.length} characters`);\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\n\n    // Trading Economics 페이지에서 데이터 추출 시도\n    // \"Core PCE Price Index\" 텍스트 찾기\n    const corePCEIndex = data.indexOf('Core PCE Price Index');\n    if (corePCEIndex === -1) {\n      console.log('❌ \"Core PCE Price Index\" text not found');\n      console.log('🔍 Searching for alternative patterns...');\n\n      // 대안 패턴들 시도\n      const alternativePatterns = ['Core PCE Price Index', 'core pce price index', 'CORE PCE PRICE INDEX', 'PCE Price Index', 'pce price index', 'PCE', 'pce'];\n      for (const pattern of alternativePatterns) {\n        const index = data.indexOf(pattern);\n        if (index !== -1) {\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\n          break;\n        }\n      }\n      throw new Error('Core PCE Price Index section not found');\n    }\n    console.log(`✅ Found \"Core PCE Price Index\" at index ${corePCEIndex}`);\n\n    // \"Core PCE Price Index\" 이후의 HTML에서 숫자 값 찾기\n    const afterCorePCE = data.substring(corePCEIndex);\n    console.log('📄 After Core PCE Price Index (first 1000 chars):', afterCorePCE.substring(0, 1000));\n\n    // 숫자 패턴 찾기 (소수점 포함)\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\n    const numberMatch = afterCorePCE.match(numberPattern);\n    if (!numberMatch) {\n      console.log('❌ Number value not found');\n      console.log('🔍 Searching for any number patterns...');\n\n      // 다른 숫자 패턴들 시도\n      const numberPatterns = [/[-+]?\\d+\\.\\d+/,\n      // 소수점 포함\n      /[-+]?\\d+/,\n      // 정수만\n      /\\d+\\.\\d+/ // 양수 소수점\n      ];\n      for (const pattern of numberPatterns) {\n        const match = afterCorePCE.match(pattern);\n        if (match) {\n          console.log(`✅ Found number pattern: ${match[0]}`);\n          break;\n        }\n      }\n      throw new Error('Number value not found');\n    }\n    const currentValue = parseFloat(numberMatch[0]);\n    console.log(`✅ Successfully extracted US Core PCE: ${currentValue}%`);\n\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core PCE YoY');\n    const change = dummyData ? dummyData.change : 0.00;\n    return {\n      title: 'US Core PCE YoY',\n      value: currentValue,\n      change: change,\n      isPositive: change >= 0,\n      symbol: 'US_CORE_PCE',\n      unit: '%',\n      description: '미국 핵심 PCE 물가지수 (전년 동기 대비)',\n      isRealData: true,\n      dataSource: 'Trading Economics'\n    };\n  } catch (error) {\n    console.error('❌ Error fetching US Core PCE:', error.message);\n\n    // 실패 시 더미 데이터 사용\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core PCE YoY');\n    if (dummyData) {\n      console.log('📊 Using dummy data for US Core PCE');\n      return {\n        ...dummyData,\n        isRealData: false,\n        dataSource: 'Dummy Data (Error)'\n      };\n    }\n    throw error;\n  }\n};\n\n// US Core PPI YoY 가져오기 (Trading Economics)\nexport const fetchUSCorePPI = async () => {\n  try {\n    console.log('🔄 Fetching US Core PPI YoY from Trading Economics...');\n    const url = 'https://tradingeconomics.com/united-states/core-producer-prices-yoy';\n    console.log(`🔗 URL: ${url}`);\n\n    // 여러 방법으로 시도\n    let data = null;\n    let lastError = null;\n\n    // 방법 1: 프록시 서버들 시도\n    try {\n      data = await fetchWithProxy(url);\n      console.log('✅ Successfully fetched data using proxy');\n    } catch (error) {\n      console.log('❌ Proxy method failed:', error.message);\n      lastError = error;\n    }\n\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\n    if (!data) {\n      try {\n        console.log('🔄 Trying direct fetch...');\n        const response = await fetch(url, {\n          method: 'GET',\n          mode: 'cors',\n          headers: {\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\n            'Cache-Control': 'no-cache'\n          }\n        });\n        if (response.ok) {\n          data = await response.text();\n          console.log('✅ Successfully fetched data using direct fetch');\n        } else {\n          throw new Error(`Direct fetch failed: ${response.status}`);\n        }\n      } catch (error) {\n        console.log('❌ Direct fetch failed:', error.message);\n        lastError = error;\n      }\n    }\n    if (!data) {\n      console.log('❌ All methods failed, using dummy data');\n      console.log('🔍 Last error:', lastError);\n\n      // 실패 시 더미 데이터 사용\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core PPI YoY');\n      if (dummyData) {\n        console.log('📊 Using dummy data for US Core PPI');\n        return {\n          ...dummyData,\n          isRealData: false,\n          dataSource: 'Dummy Data (All methods failed)'\n        };\n      }\n      throw new Error('All data fetching methods failed');\n    }\n    console.log(`📄 Total HTML length: ${data.length} characters`);\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\n\n    // Trading Economics 페이지에서 데이터 추출 시도\n    // \"Core PPI\" 텍스트 찾기\n    const corePPIIndex = data.indexOf('Core PPI');\n    if (corePPIIndex === -1) {\n      console.log('❌ \"Core PPI\" text not found');\n      console.log('🔍 Searching for alternative patterns...');\n\n      // 대안 패턴들 시도\n      const alternativePatterns = ['Core PPI', 'core ppi', 'CORE PPI', 'PPI', 'ppi'];\n      for (const pattern of alternativePatterns) {\n        const index = data.indexOf(pattern);\n        if (index !== -1) {\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\n          break;\n        }\n      }\n      throw new Error('Core PPI section not found');\n    }\n    console.log(`✅ Found \"Core PPI\" at index ${corePPIIndex}`);\n\n    // \"Core PPI\" 이후의 HTML에서 숫자 값 찾기\n    const afterCorePPI = data.substring(corePPIIndex);\n    console.log('📄 After Core PPI (first 1000 chars):', afterCorePPI.substring(0, 1000));\n\n    // 숫자 패턴 찾기 (소수점 포함)\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\n    const numberMatch = afterCorePPI.match(numberPattern);\n    if (!numberMatch) {\n      console.log('❌ Number value not found');\n      console.log('🔍 Searching for any number patterns...');\n\n      // 다른 숫자 패턴들 시도\n      const numberPatterns = [/[-+]?\\d+\\.\\d+/,\n      // 소수점 포함\n      /[-+]?\\d+/,\n      // 정수만\n      /\\d+\\.\\d+/ // 양수 소수점\n      ];\n      for (const pattern of numberPatterns) {\n        const match = afterCorePPI.match(pattern);\n        if (match) {\n          console.log(`✅ Found number pattern: ${match[0]}`);\n          break;\n        }\n      }\n      throw new Error('Number value not found');\n    }\n    const currentValue = parseFloat(numberMatch[0]);\n    console.log(`✅ Successfully extracted US Core PPI: ${currentValue}%`);\n\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core PPI YoY');\n    const change = dummyData ? dummyData.change : 0.00;\n    return {\n      title: 'US Core PPI YoY',\n      value: currentValue,\n      change: change,\n      isPositive: change >= 0,\n      symbol: 'US_CORE_PPI',\n      unit: '%',\n      description: '미국 핵심 PPI 물가지수 (전년 동기 대비)',\n      isRealData: true,\n      dataSource: 'Trading Economics'\n    };\n  } catch (error) {\n    console.error('❌ Error fetching US Core PPI:', error.message);\n\n    // 실패 시 더미 데이터 사용\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core PPI YoY');\n    if (dummyData) {\n      console.log('📊 Using dummy data for US Core PPI');\n      return {\n        ...dummyData,\n        isRealData: false,\n        dataSource: 'Dummy Data (Error)'\n      };\n    }\n    throw error;\n  }\n};\n\n// US Money Supply M2 가져오기 (Trading Economics)\nexport const fetchUSMoneySupplyM2 = async () => {\n  try {\n    console.log('🔄 Fetching US Money Supply M2 from Trading Economics...');\n    const url = 'https://tradingeconomics.com/united-states/money-supply-m2';\n    console.log(`🔗 URL: ${url}`);\n\n    // 여러 방법으로 시도\n    let data = null;\n    let lastError = null;\n\n    // 방법 1: 프록시 서버들 시도\n    try {\n      data = await fetchWithProxy(url);\n      console.log('✅ Successfully fetched data using proxy');\n    } catch (error) {\n      console.log('❌ Proxy method failed:', error.message);\n      lastError = error;\n    }\n\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\n    if (!data) {\n      try {\n        console.log('🔄 Trying direct fetch...');\n        const response = await fetch(url, {\n          method: 'GET',\n          mode: 'cors',\n          headers: {\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\n            'Cache-Control': 'no-cache'\n          }\n        });\n        if (response.ok) {\n          data = await response.text();\n          console.log('✅ Successfully fetched data using direct fetch');\n        } else {\n          throw new Error(`Direct fetch failed: ${response.status}`);\n        }\n      } catch (error) {\n        console.log('❌ Direct fetch failed:', error.message);\n        lastError = error;\n      }\n    }\n    if (!data) {\n      console.log('❌ All methods failed, using dummy data');\n      console.log('🔍 Last error:', lastError);\n\n      // 실패 시 더미 데이터 사용\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Money Supply M2');\n      if (dummyData) {\n        console.log('📊 Using dummy data for US Money Supply M2');\n        return {\n          ...dummyData,\n          isRealData: false,\n          dataSource: 'Dummy Data (All methods failed)'\n        };\n      }\n      throw new Error('All data fetching methods failed');\n    }\n    console.log(`📄 Total HTML length: ${data.length} characters`);\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\n\n    // Trading Economics 페이지에서 데이터 추출 시도\n    // \"Money Supply M2\" 텍스트 찾기\n    const moneySupplyIndex = data.indexOf('Money Supply M2');\n    if (moneySupplyIndex === -1) {\n      console.log('❌ \"Money Supply M2\" text not found');\n      console.log('🔍 Searching for alternative patterns...');\n\n      // 대안 패턴들 시도\n      const alternativePatterns = ['Money Supply M2', 'money supply m2', 'MONEY SUPPLY M2', 'Money Supply', 'money supply'];\n      for (const pattern of alternativePatterns) {\n        const index = data.indexOf(pattern);\n        if (index !== -1) {\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\n          break;\n        }\n      }\n      throw new Error('Money Supply M2 section not found');\n    }\n    console.log(`✅ Found \"Money Supply M2\" at index ${moneySupplyIndex}`);\n\n    // \"Money Supply M2\" 이후의 HTML에서 숫자 값 찾기\n    const afterMoneySupply = data.substring(moneySupplyIndex);\n    console.log('📄 After Money Supply M2 (first 1000 chars):', afterMoneySupply.substring(0, 1000));\n\n    // 숫자 패턴 찾기 (소수점 포함)\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\n    const numberMatch = afterMoneySupply.match(numberPattern);\n    if (!numberMatch) {\n      console.log('❌ Number value not found');\n      console.log('🔍 Searching for any number patterns...');\n\n      // 다른 숫자 패턴들 시도\n      const numberPatterns = [/[-+]?\\d+\\.\\d+/,\n      // 소수점 포함\n      /[-+]?\\d+/,\n      // 정수만\n      /\\d+\\.\\d+/ // 양수 소수점\n      ];\n      for (const pattern of numberPatterns) {\n        const match = afterMoneySupply.match(pattern);\n        if (match) {\n          console.log(`✅ Found number pattern: ${match[0]}`);\n          break;\n        }\n      }\n      throw new Error('Number value not found');\n    }\n    const currentValue = parseFloat(numberMatch[0]);\n    console.log(`✅ Successfully extracted US Money Supply M2: ${currentValue}`);\n\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Money Supply M2');\n    const change = dummyData ? dummyData.change : 0.00;\n    return {\n      title: 'US Money Supply M2',\n      value: currentValue,\n      change: change,\n      isPositive: change >= 0,\n      symbol: 'US_M2',\n      unit: '',\n      description: '미국 핵심 M2 통화량 (전년 동기 대비)',\n      isRealData: true,\n      dataSource: 'Trading Economics'\n    };\n  } catch (error) {\n    console.error('❌ Error fetching US Money Supply M2:', error.message);\n\n    // 실패 시 더미 데이터 사용\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Money Supply M2');\n    if (dummyData) {\n      console.log('📊 Using dummy data for US Money Supply M2');\n      return {\n        ...dummyData,\n        isRealData: false,\n        dataSource: 'Dummy Data (Error)'\n      };\n    }\n    throw error;\n  }\n};\n\n// US SOFR 가져오기 (Trading Economics)\nexport const fetchUSSOFR = async () => {\n  try {\n    console.log('🔄 Fetching US SOFR from Trading Economics...');\n    const url = 'https://tradingeconomics.com/united-states/secured-overnight-financing-rate';\n    console.log(`🔗 URL: ${url}`);\n\n    // 여러 방법으로 시도\n    let data = null;\n    let lastError = null;\n\n    // 방법 1: 프록시 서버들 시도\n    try {\n      data = await fetchWithProxy(url);\n      console.log('✅ Successfully fetched data using proxy');\n    } catch (error) {\n      console.log('❌ Proxy method failed:', error.message);\n      lastError = error;\n    }\n\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\n    if (!data) {\n      try {\n        console.log('🔄 Trying direct fetch...');\n        const response = await fetch(url, {\n          method: 'GET',\n          mode: 'cors',\n          headers: {\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\n            'Cache-Control': 'no-cache'\n          }\n        });\n        if (response.ok) {\n          data = await response.text();\n          console.log('✅ Successfully fetched data using direct fetch');\n        } else {\n          throw new Error(`Direct fetch failed: ${response.status}`);\n        }\n      } catch (error) {\n        console.log('❌ Direct fetch failed:', error.message);\n        lastError = error;\n      }\n    }\n    if (!data) {\n      console.log('❌ All methods failed, using dummy data');\n      console.log('🔍 Last error:', lastError);\n\n      // 실패 시 더미 데이터 사용\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US SOFR');\n      if (dummyData) {\n        console.log('📊 Using dummy data for US SOFR');\n        return {\n          ...dummyData,\n          isRealData: false,\n          dataSource: 'Dummy Data (All methods failed)'\n        };\n      }\n      throw new Error('All data fetching methods failed');\n    }\n    console.log(`📄 Total HTML length: ${data.length} characters`);\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\n\n    // Trading Economics 페이지에서 데이터 추출 시도\n    // \"SOFR\" 텍스트 찾기\n    const sofrIndex = data.indexOf('SOFR');\n    if (sofrIndex === -1) {\n      console.log('❌ \"SOFR\" text not found');\n      console.log('🔍 Searching for alternative patterns...');\n\n      // 대안 패턴들 시도\n      const alternativePatterns = ['SOFR', 'sofr', 'Secured Overnight Financing Rate', 'secured overnight financing rate', 'Overnight Financing Rate', 'overnight financing rate'];\n      for (const pattern of alternativePatterns) {\n        const index = data.indexOf(pattern);\n        if (index !== -1) {\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\n          break;\n        }\n      }\n      throw new Error('SOFR section not found');\n    }\n    console.log(`✅ Found \"SOFR\" at index ${sofrIndex}`);\n\n    // \"SOFR\" 이후의 HTML에서 숫자 값 찾기\n    const afterSOFR = data.substring(sofrIndex);\n    console.log('📄 After SOFR (first 1000 chars):', afterSOFR.substring(0, 1000));\n\n    // 숫자 패턴 찾기 (소수점 포함)\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\n    const numberMatch = afterSOFR.match(numberPattern);\n    if (!numberMatch) {\n      console.log('❌ Number value not found');\n      console.log('🔍 Searching for any number patterns...');\n\n      // 다른 숫자 패턴들 시도\n      const numberPatterns = [/[-+]?\\d+\\.\\d+/,\n      // 소수점 포함\n      /[-+]?\\d+/,\n      // 정수만\n      /\\d+\\.\\d+/ // 양수 소수점\n      ];\n      for (const pattern of numberPatterns) {\n        const match = afterSOFR.match(pattern);\n        if (match) {\n          console.log(`✅ Found number pattern: ${match[0]}`);\n          break;\n        }\n      }\n      throw new Error('Number value not found');\n    }\n    const currentValue = parseFloat(numberMatch[0]);\n    console.log(`✅ Successfully extracted US SOFR: ${currentValue}%`);\n\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US SOFR');\n    const change = dummyData ? dummyData.change : 0.00;\n    return {\n      title: 'US SOFR',\n      value: currentValue,\n      change: change,\n      isPositive: change >= 0,\n      symbol: 'US_SOFR',\n      unit: '%',\n      description: '미국 담보부 하루물 금리',\n      isRealData: true,\n      dataSource: 'Trading Economics'\n    };\n  } catch (error) {\n    console.error('❌ Error fetching US SOFR:', error.message);\n\n    // 실패 시 더미 데이터 사용\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US SOFR');\n    if (dummyData) {\n      console.log('📊 Using dummy data for US SOFR');\n      return {\n        ...dummyData,\n        isRealData: false,\n        dataSource: 'Dummy Data (Error)'\n      };\n    }\n    throw error;\n  }\n};\n\n// 모든 Macro 데이터 가져오기\nexport const fetchAllMacroData = async () => {\n  try {\n    console.log('🔄 Fetching all Macro Economics data...');\n    const promises = [fetchSP500DividendFutures(), fetchCitiEconomicSurpriseIndex(), fetchInflationExpectationRate(), fetchUSCoreInflationRate(), fetchUSCorePCE(), fetchUSCorePPI(), fetchUSMoneySupplyM2(), fetchUSSOFR()];\n\n    // 모든 요청 완료 대기\n    const results = await Promise.all(promises);\n    console.log(`✅ Successfully loaded ${results.length} Macro Economics indicators`);\n\n    // 실제 데이터가 있는지 확인\n    const realDataCount = results.filter(item => item.isRealData).length;\n    if (realDataCount === 0) {\n      console.log('⚠️ No real data available, showing dummy data');\n    } else {\n      console.log(`✅ ${realDataCount} real Macro indicators loaded`);\n    }\n    return results;\n  } catch (error) {\n    console.error('❌ Error fetching all Macro data:', error);\n    console.log('📊 Falling back to dummy data...');\n\n    // 전체 실패 시 더미 데이터 반환\n    return DUMMY_MACRO_DATA.map(item => ({\n      ...item,\n      isRealData: false,\n      dataSource: 'Dummy Data (Error)'\n    }));\n  }\n};\n\n// Macro 데이터 가져오기 (실시간 시뮬레이션)\nexport const fetchMacroData = async () => {\n  try {\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\n    return DUMMY_MACRO_DATA.map(item => ({\n      ...item,\n      isRealData: false,\n      dataSource: 'Dummy Data (Simulation)'\n    }));\n  } catch (error) {\n    console.error('Error fetching macro data:', error);\n    return DUMMY_MACRO_DATA;\n  }\n};","map":{"version":3,"names":["BASE_URL","MACRO_SYMBOLS","EXTERNAL_URLS","PROXY_SERVICES","fetchWithProxy","url","proxyIndex","length","Error","proxyUrl","console","log","substring","response","fetch","method","headers","timeout","status","Object","fromEntries","entries","ok","statusText","data","text","includes","error","message","DUMMY_MACRO_DATA","title","value","change","isPositive","symbol","unit","description","fetchSP500DividendFutures","jsonData","JSON","parse","chart","result","meta","currentPrice","regularMarketPrice","previousClose","toFixed","Math","round","isRealData","dataSource","dummyData","find","item","fetchCitiEconomicSurpriseIndex","lastError","mode","script","document","createElement","src","window","handleMacroData","stringify","head","appendChild","Promise","resolve","setTimeout","latestStatsIndex","indexOf","alternativePatterns","pattern","index","citigroupIndex","afterLatestStats","citiIndexIndex","citigroupPatterns","afterCitiIndex","datePattern","dateMatch","match","datePatterns","dateFound","dateIndex","afterDate","numberPattern","numberMatch","numberPatterns","currentValue","parseFloat","prevPattern","prevMatch","prevValue","fetchInflationExpectationRate","latestValueMatch","fetchUSCoreInflationRate","coreInflationIndex","afterCoreInflation","fetchUSCorePCE","corePCEIndex","afterCorePCE","fetchUSCorePPI","corePPIIndex","afterCorePPI","fetchUSMoneySupplyM2","moneySupplyIndex","afterMoneySupply","fetchUSSOFR","sofrIndex","afterSOFR","fetchAllMacroData","promises","results","all","realDataCount","filter","map","fetchMacroData"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/macroApi.js"],"sourcesContent":["// Macro Economics 데이터를 가져오는 서비스\r\nconst BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\r\n\r\n// Macro 지표 심볼 매핑\r\nconst MACRO_SYMBOLS = {\r\n  'S&P 500 Annual Dividend Futures': '^SP500DIV',\r\n  'World Citi Economic Surprise Index': 'CITI_SURPRISE',\r\n  '5-Year 5-Year Forward Inflation Expectation Rate': 'T5YIFR',\r\n  'US Core Inflation Rate YoY': 'US_CORE_INFLATION',\r\n  'US Core PCE YoY': 'US_CORE_PCE',\r\n  'US Core PPI YoY': 'US_CORE_PPI',\r\n  'US Money Supply M2': 'US_M2',\r\n  'US SOFR': 'US_SOFR'\r\n};\r\n\r\n// 외부 URL 매핑\r\nexport const EXTERNAL_URLS = {\r\n  'S&P 500 Annual Dividend Futures': 'https://finance.yahoo.com/quote/%5ESP500DIV',\r\n  'World Citi Economic Surprise Index': 'https://en.macromicro.me/charts/45866/global-citi-surprise-index',\r\n  '5-Year 5-Year Forward Inflation Expectation Rate': 'https://fred.stlouisfed.org/series/T5YIFR',\r\n  'US Core Inflation Rate YoY': 'https://tradingeconomics.com/united-states/core-inflation-rate',\r\n  'US Core PCE YoY': 'https://tradingeconomics.com/united-states/core-pce-price-index-annual-change',\r\n  'US Core PPI YoY': 'https://tradingeconomics.com/united-states/core-producer-prices-yoy',\r\n  'US Money Supply M2': 'https://tradingeconomics.com/united-states/money-supply-m2',\r\n  'US SOFR': 'https://tradingeconomics.com/united-states/secured-overnight-financing-rate'\r\n};\r\n\r\n// 프록시 서버들을 사용한 웹 스크래핑\r\nconst PROXY_SERVICES = [\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://corsproxy.io/?',\r\n  'https://thingproxy.freeboard.io/fetch/',\r\n  'https://cors.bridged.cc/',\r\n  'https://api.codetabs.com/v1/proxy?quest=',\r\n  'https://cors.eu.org/',\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  'https://api.codetabs.com/v1/proxy?quest=',\r\n  'https://cors.bridged.cc/',\r\n  'https://thingproxy.freeboard.io/fetch/',\r\n  'https://corsproxy.io/?',\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://corsproxy.io/?',\r\n  'https://thingproxy.freeboard.io/fetch/',\r\n  'https://cors.bridged.cc/',\r\n  'https://api.codetabs.com/v1/proxy?quest=',\r\n  'https://cors.eu.org/',\r\n  '' // 직접 호출도 시도\r\n];\r\n\r\n// 프록시를 사용한 웹 스크래핑\r\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\r\n  if (proxyIndex >= PROXY_SERVICES.length) {\r\n    throw new Error('All proxy attempts failed');\r\n  }\r\n\r\n  try {\r\n    const proxyUrl = PROXY_SERVICES[proxyIndex] + url;\r\n    console.log(`🔗 Trying proxy ${proxyIndex + 1}/${PROXY_SERVICES.length}: ${proxyUrl.substring(0, 80)}...`);\r\n    \r\n    const response = await fetch(proxyUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n        'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\r\n        'Accept-Encoding': 'gzip, deflate, br',\r\n        'Connection': 'keep-alive',\r\n        'Upgrade-Insecure-Requests': '1',\r\n        'Cache-Control': 'no-cache',\r\n        'Pragma': 'no-cache'\r\n      },\r\n      timeout: 15000 // 15초 타임아웃\r\n    });\r\n\r\n    console.log(`📊 Response status: ${response.status}`);\r\n    console.log(`📊 Response headers:`, Object.fromEntries(response.headers.entries()));\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.text();\r\n    \r\n    console.log(`📊 Response data length: ${data.length} characters`);\r\n    \r\n    if (data.length < 100) {\r\n      console.log(`📄 Short response data: ${data}`);\r\n      throw new Error('Response too short, likely an error page');\r\n    }\r\n    \r\n    // 에러 페이지인지 확인\r\n    if (data.includes('error') || data.includes('Error') || data.includes('ERROR')) {\r\n      console.log('⚠️ Response contains error indicators');\r\n      console.log('📄 Error response preview:', data.substring(0, 500));\r\n    }\r\n    \r\n    // CORS 에러인지 확인\r\n    if (data.includes('CORS') || data.includes('cors') || data.includes('Access-Control')) {\r\n      console.log('⚠️ Response contains CORS error indicators');\r\n      console.log('📄 CORS error preview:', data.substring(0, 500));\r\n    }\r\n    \r\n    console.log(`✅ Proxy ${proxyIndex + 1} successful! Data length: ${data.length} characters`);\r\n    return data;\r\n  } catch (error) {\r\n    console.log(`❌ Proxy ${proxyIndex + 1} failed: ${error.message}`);\r\n    console.log(`🔍 Error details:`, error);\r\n    \r\n    // 마지막 프록시가 아니면 다음 프록시 시도\r\n    if (proxyIndex < PROXY_SERVICES.length - 1) {\r\n      console.log(`🔄 Retrying with next proxy...`);\r\n      return fetchWithProxy(url, proxyIndex + 1);\r\n    } else {\r\n      throw new Error(`All ${PROXY_SERVICES.length} proxies failed. Last error: ${error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\n// 2024년 12월 기준 최신 더미 데이터 (실제 시장 상황 반영)\r\nconst DUMMY_MACRO_DATA = [\r\n  {\r\n    title: 'S&P 500 Annual Dividend Futures',\r\n    value: 2.15,\r\n    change: 0.05,\r\n    isPositive: true,\r\n    symbol: '^SP500DIV',\r\n    unit: '%',\r\n    description: 'S&P 500 연간 배당률 선물'\r\n  },\r\n  {\r\n    title: 'World Citi Economic Surprise Index',\r\n    value: 13.40,  // 실제 MacroMicro 사이트에서 확인한 값으로 업데이트\r\n    change: -0.90, // 13.40 - 14.30 = -0.90\r\n    isPositive: true,\r\n    symbol: 'CITI_SURPRISE',\r\n    unit: '',\r\n    description: '글로벌 경제 서프라이즈 지수'\r\n  },\r\n  {\r\n    title: '5-Year 5-Year Forward Inflation Expectation Rate',\r\n    value: 2.33,  // FRED에서 확인한 실제 값으로 업데이트\r\n    change: -0.01,\r\n    isPositive: true,\r\n    symbol: 'T5YIFR',\r\n    unit: '%',\r\n    description: '5년 후 5년 인플레이션 기대율'\r\n  },\r\n  {\r\n    title: 'US Core Inflation Rate YoY',\r\n    value: 3.2,\r\n    change: -0.1,\r\n    isPositive: false,\r\n    symbol: 'US_CORE_INFLATION',\r\n    unit: '%',\r\n    description: '미국 핵심 인플레이션률 (전년 동기 대비)'\r\n  },\r\n  {\r\n    title: 'US Core PCE YoY',\r\n    value: 2.9,\r\n    change: -0.2,\r\n    isPositive: false,\r\n    symbol: 'US_CORE_PCE',\r\n    unit: '%',\r\n    description: '미국 핵심 PCE 물가지수 (전년 동기 대비)'\r\n  },\r\n  {\r\n    title: 'US Core PPI YoY',\r\n    value: 2.4,\r\n    change: -0.3,\r\n    isPositive: false,\r\n    symbol: 'US_CORE_PPI',\r\n    unit: '%',\r\n    description: '미국 핵심 PPI 물가지수 (전년 동기 대비)'\r\n  },\r\n  {\r\n    title: 'US Money Supply M2',\r\n    value: 20.8,\r\n    change: -2.1,\r\n    isPositive: false,\r\n    symbol: 'US_M2',\r\n    unit: '',\r\n    description: '미국 M2 통화량 (전년 동기 대비)'\r\n  },\r\n  {\r\n    title: 'US SOFR',\r\n    value: 5.33,\r\n    change: 0.00,\r\n    isPositive: true,\r\n    symbol: 'US_SOFR',\r\n    unit: '%',\r\n    description: '미국 담보부 하루물 금리'\r\n  }\r\n];\r\n\r\n// S&P 500 Annual Dividend Futures 가져오기 (Yahoo Finance)\r\nexport const fetchSP500DividendFutures = async () => {\r\n  try {\r\n    console.log('🔄 Fetching S&P 500 Annual Dividend Futures from Yahoo Finance...');\r\n    \r\n    const symbol = '^SP500DIV';\r\n    const url = `${BASE_URL}/${symbol}?interval=1d&range=1d`;\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const data = await fetchWithProxy(url);\r\n    \r\n    if (!data) {\r\n      throw new Error('Failed to fetch data');\r\n    }\r\n    \r\n    // JSON 파싱 시도\r\n    let jsonData;\r\n    try {\r\n      jsonData = JSON.parse(data);\r\n    } catch (error) {\r\n      console.log('❌ Failed to parse JSON, using dummy data');\r\n      throw new Error('Invalid JSON response');\r\n    }\r\n    \r\n    // Yahoo Finance API 응답 구조에서 데이터 추출\r\n    if (jsonData.chart && jsonData.chart.result && jsonData.chart.result[0]) {\r\n      const result = jsonData.chart.result[0];\r\n      const meta = result.meta;\r\n      \r\n      if (meta) {\r\n        const currentPrice = meta.regularMarketPrice;\r\n        const previousClose = meta.previousClose;\r\n        const change = currentPrice - previousClose;\r\n        \r\n        console.log(`✅ Successfully fetched S&P 500 Dividend Futures: ${currentPrice}% (${change >= 0 ? '+' : ''}${change.toFixed(2)})`);\r\n        return {\r\n          title: 'S&P 500 Annual Dividend Futures',\r\n          value: currentPrice,\r\n          change: Math.round(change * 100) / 100,\r\n          isPositive: change >= 0,\r\n          symbol: symbol,\r\n          unit: '%',\r\n          description: 'S&P 500 연간 배당률 선물',\r\n          isRealData: true,\r\n          dataSource: 'Yahoo Finance'\r\n        };\r\n      }\r\n    }\r\n    \r\n    throw new Error('No valid data found for S&P 500 Dividend Futures');\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching S&P 500 Dividend Futures:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'S&P 500 Annual Dividend Futures');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for S&P 500 Dividend Futures');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// World Citi Economic Surprise Index 가져오기 (MacroMicro)\r\nexport const fetchCitiEconomicSurpriseIndex = async () => {\r\n  try {\r\n    console.log('🔄 Fetching World Citi Economic Surprise Index from MacroMicro...');\r\n    \r\n    const url = 'https://en.macromicro.me/charts/45866/global-citi-surprise-index';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    // 여러 방법으로 시도\r\n    let data = null;\r\n    let lastError = null;\r\n    \r\n    // 방법 1: 프록시 서버들 시도\r\n    try {\r\n      data = await fetchWithProxy(url);\r\n      console.log('✅ Successfully fetched data using proxy');\r\n    } catch (error) {\r\n      console.log('❌ Proxy method failed:', error.message);\r\n      lastError = error;\r\n    }\r\n    \r\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying direct fetch...');\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\r\n            'Cache-Control': 'no-cache'\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          data = await response.text();\r\n          console.log('✅ Successfully fetched data using direct fetch');\r\n        } else {\r\n          throw new Error(`Direct fetch failed: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ Direct fetch failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    // 방법 3: JSONP 방식 시도 (MacroMicro에서 지원하는 경우)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying JSONP approach...');\r\n        // JSONP는 동적 스크립트 로딩을 통해 CORS를 우회\r\n        const script = document.createElement('script');\r\n        script.src = url + '?callback=handleMacroData';\r\n        \r\n        // 전역 콜백 함수 정의\r\n        window.handleMacroData = function(jsonData) {\r\n          console.log('✅ JSONP callback received:', jsonData);\r\n          data = JSON.stringify(jsonData);\r\n        };\r\n        \r\n        document.head.appendChild(script);\r\n        \r\n        // 5초 대기\r\n        await new Promise(resolve => setTimeout(resolve, 5000));\r\n        \r\n        if (data) {\r\n          console.log('✅ Successfully fetched data using JSONP');\r\n        } else {\r\n          throw new Error('JSONP timeout');\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ JSONP method failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    if (!data) {\r\n      console.log('❌ All methods failed, using dummy data');\r\n      console.log('🔍 Last error:', lastError);\r\n      \r\n      // 실패 시 더미 데이터 사용\r\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'World Citi Economic Surprise Index');\r\n      if (dummyData) {\r\n        console.log('📊 Using dummy data for Citi Economic Surprise Index');\r\n        return {\r\n          ...dummyData,\r\n          isRealData: false,\r\n          dataSource: 'Dummy Data (All methods failed)'\r\n        };\r\n      }\r\n      \r\n      throw new Error('All data fetching methods failed');\r\n    }\r\n    \r\n    console.log(`📄 Total HTML length: ${data.length} characters`);\r\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\r\n    \r\n    // \"Latest Stats\" 텍스트 찾기\r\n    const latestStatsIndex = data.indexOf('Latest Stats');\r\n    if (latestStatsIndex === -1) {\r\n      console.log('❌ \"Latest Stats\" text not found');\r\n      console.log('🔍 Searching for alternative patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const alternativePatterns = [\r\n        'Latest Stats',\r\n        'latest stats',\r\n        'LATEST STATS',\r\n        'Latest Statistics',\r\n        'Statistics',\r\n        'Stats'\r\n      ];\r\n      \r\n      for (const pattern of alternativePatterns) {\r\n        const index = data.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      // HTML에서 \"Citigroup\" 관련 텍스트 찾기\r\n      const citigroupIndex = data.indexOf('Citigroup');\r\n      if (citigroupIndex !== -1) {\r\n        console.log(`✅ Found \"Citigroup\" at index ${citigroupIndex}`);\r\n        console.log('📄 Context around Citigroup:', data.substring(citigroupIndex - 100, citigroupIndex + 200));\r\n      }\r\n      \r\n      throw new Error('Latest Stats section not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"Latest Stats\" section at index ${latestStatsIndex}`);\r\n    \r\n    // \"Latest Stats\" 이후의 HTML에서 \"Citigroup Economic Surprise Index: Global\" 찾기\r\n    const afterLatestStats = data.substring(latestStatsIndex);\r\n    console.log('📄 After Latest Stats (first 1000 chars):', afterLatestStats.substring(0, 1000));\r\n    \r\n    const citiIndexIndex = afterLatestStats.indexOf('Citigroup Economic Surprise Index: Global');\r\n    if (citiIndexIndex === -1) {\r\n      console.log('❌ \"Citigroup Economic Surprise Index: Global\" text not found');\r\n      console.log('🔍 Searching for alternative Citigroup patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const citigroupPatterns = [\r\n        'Citigroup Economic Surprise Index: Global',\r\n        'Citigroup Economic Surprise Index',\r\n        'Economic Surprise Index: Global',\r\n        'Economic Surprise Index',\r\n        'Surprise Index: Global',\r\n        'Surprise Index'\r\n      ];\r\n      \r\n      for (const pattern of citigroupPatterns) {\r\n        const index = afterLatestStats.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          console.log('📄 Context around pattern:', afterLatestStats.substring(index - 50, index + 200));\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Citigroup Economic Surprise Index: Global not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"Citigroup Economic Surprise Index: Global\" text at index ${citiIndexIndex}`);\r\n    \r\n    // \"Citigroup Economic Surprise Index: Global\" 이후의 HTML에서 날짜와 값 찾기\r\n    const afterCitiIndex = afterLatestStats.substring(citiIndexIndex);\r\n    console.log('📄 After Citigroup pattern (first 500 chars):', afterCitiIndex.substring(0, 500));\r\n    \r\n    // YYYY-MM-DD 패턴 찾기\r\n    const datePattern = /\\d{4}-\\d{2}-\\d{2}/;\r\n    const dateMatch = afterCitiIndex.match(datePattern);\r\n    \r\n    if (!dateMatch) {\r\n      console.log('❌ Date pattern not found');\r\n      console.log('🔍 Searching for any date-like patterns...');\r\n      \r\n      // 다른 날짜 패턴들 시도\r\n      const datePatterns = [\r\n        /\\d{4}-\\d{2}-\\d{2}/,  // YYYY-MM-DD\r\n        /\\d{2}-\\d{2}-\\d{4}/,  // MM-DD-YYYY\r\n        /\\d{4}\\/\\d{2}\\/\\d{2}/, // YYYY/MM/DD\r\n        /\\d{2}\\/\\d{2}\\/\\d{4}/  // MM/DD/YYYY\r\n      ];\r\n      \r\n      for (const pattern of datePatterns) {\r\n        const match = afterCitiIndex.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found date pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Date pattern not found');\r\n    }\r\n    \r\n    const dateFound = dateMatch[0];\r\n    console.log(`✅ Found date: ${dateFound}`);\r\n    \r\n    // 날짜 이후의 HTML에서 숫자 값 찾기 (더 정확한 패턴)\r\n    const dateIndex = afterCitiIndex.indexOf(dateFound);\r\n    const afterDate = afterCitiIndex.substring(dateIndex + dateFound.length);\r\n    console.log('📄 After date (first 300 chars):', afterDate.substring(0, 300));\r\n    \r\n    // 숫자 패턴 찾기 (소수점 포함, 더 정확한 매칭)\r\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\r\n    const numberMatch = afterDate.match(numberPattern);\r\n    \r\n    if (!numberMatch) {\r\n      console.log('❌ Number value not found after date');\r\n      console.log('🔍 Searching for any number patterns...');\r\n      \r\n      // 다른 숫자 패턴들 시도\r\n      const numberPatterns = [\r\n        /[-+]?\\d+\\.\\d+/,  // 소수점 포함\r\n        /[-+]?\\d+/,       // 정수만\r\n        /\\d+\\.\\d+/        // 양수 소수점\r\n      ];\r\n      \r\n      for (const pattern of numberPatterns) {\r\n        const match = afterDate.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found number pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Number value not found after date');\r\n    }\r\n    \r\n    const currentValue = parseFloat(numberMatch[0]);\r\n    console.log(`✅ Successfully extracted Citi Economic Surprise Index: ${currentValue}`);\r\n    \r\n    // 이전 값도 찾아보기 (Prev: 패턴)\r\n    const prevPattern = /Prev:\\s*([-+]?\\d+\\.\\d+)/;\r\n    const prevMatch = afterDate.match(prevPattern);\r\n    let change = 0.00;\r\n    \r\n    if (prevMatch) {\r\n      const prevValue = parseFloat(prevMatch[1]);\r\n      change = currentValue - prevValue;\r\n      console.log(`✅ Found previous value: ${prevValue}, change: ${change}`);\r\n    } else {\r\n      console.log('⚠️ Previous value not found, using 0.00 for change');\r\n    }\r\n    \r\n    return {\r\n      title: 'World Citi Economic Surprise Index',\r\n      value: currentValue,\r\n      change: Math.round(change * 100) / 100,\r\n      isPositive: currentValue >= 0,\r\n      symbol: 'CITI_SURPRISE',\r\n      unit: '',\r\n      description: '글로벌 경제 서프라이즈 지수',\r\n      isRealData: true,\r\n      dataSource: 'MacroMicro'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching Citi Economic Surprise Index:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'World Citi Economic Surprise Index');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for Citi Economic Surprise Index');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// 5-Year 5-Year Forward Inflation Expectation Rate 가져오기 (FRED)\r\nexport const fetchInflationExpectationRate = async () => {\r\n  try {\r\n    console.log('🔄 Fetching 5-Year 5-Year Forward Inflation Expectation Rate from FRED...');\r\n    \r\n    const url = 'https://fred.stlouisfed.org/series/T5YIFR';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const data = await fetchWithProxy(url);\r\n    \r\n    if (!data) {\r\n      throw new Error('Failed to fetch data');\r\n    }\r\n    \r\n    // FRED 페이지에서 데이터 추출 시도\r\n    console.log('📄 HTML Preview:', data.substring(0, 1000));\r\n    \r\n    // FRED 페이지에서 최신 값 추출 (2025-08-12: 2.33 형태)\r\n    const latestValueMatch = data.match(/2025-\\d{2}-\\d{2}:\\s*(\\d+\\.\\d+)/);\r\n    if (latestValueMatch) {\r\n      const currentValue = parseFloat(latestValueMatch[1]);\r\n      console.log(`✅ Successfully extracted inflation expectation rate: ${currentValue}%`);\r\n      \r\n      return {\r\n        title: '5-Year 5-Year Forward Inflation Expectation Rate',\r\n        value: currentValue,\r\n        change: 0.00, // FRED에서는 변화량을 직접 제공하지 않으므로 0으로 설정\r\n        isPositive: true,\r\n        symbol: 'T5YIFR',\r\n        unit: '%',\r\n        description: '5년 후 5년 인플레이션 기대율',\r\n        isRealData: true,\r\n        dataSource: 'FRED (Federal Reserve Economic Data)'\r\n      };\r\n    }\r\n    \r\n    // 임시로 더미 데이터 반환\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === '5-Year 5-Year Forward Inflation Expectation Rate');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for Inflation Expectation Rate (parsing not implemented)');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Parsing not implemented)'\r\n      };\r\n    }\r\n    \r\n    throw new Error('No valid data found for Inflation Expectation Rate');\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching Inflation Expectation Rate:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === '5-Year 5-Year Forward Inflation Expectation Rate');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for Inflation Expectation Rate');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// US Core Inflation Rate YoY 가져오기 (Trading Economics)\r\nexport const fetchUSCoreInflationRate = async () => {\r\n  try {\r\n    console.log('🔄 Fetching US Core Inflation Rate YoY from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/united-states/core-inflation-rate';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    // 여러 방법으로 시도\r\n    let data = null;\r\n    let lastError = null;\r\n    \r\n    // 방법 1: 프록시 서버들 시도\r\n    try {\r\n      data = await fetchWithProxy(url);\r\n      console.log('✅ Successfully fetched data using proxy');\r\n    } catch (error) {\r\n      console.log('❌ Proxy method failed:', error.message);\r\n      lastError = error;\r\n    }\r\n    \r\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying direct fetch...');\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\r\n            'Cache-Control': 'no-cache'\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          data = await response.text();\r\n          console.log('✅ Successfully fetched data using direct fetch');\r\n        } else {\r\n          throw new Error(`Direct fetch failed: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ Direct fetch failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    if (!data) {\r\n      console.log('❌ All methods failed, using dummy data');\r\n      console.log('🔍 Last error:', lastError);\r\n      \r\n      // 실패 시 더미 데이터 사용\r\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core Inflation Rate YoY');\r\n      if (dummyData) {\r\n        console.log('📊 Using dummy data for US Core Inflation Rate');\r\n        return {\r\n          ...dummyData,\r\n          isRealData: false,\r\n          dataSource: 'Dummy Data (All methods failed)'\r\n        };\r\n      }\r\n      \r\n      throw new Error('All data fetching methods failed');\r\n    }\r\n    \r\n    console.log(`📄 Total HTML length: ${data.length} characters`);\r\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\r\n    \r\n    // Trading Economics 페이지에서 데이터 추출 시도\r\n    // \"Core Inflation Rate\" 텍스트 찾기\r\n    const coreInflationIndex = data.indexOf('Core Inflation Rate');\r\n    if (coreInflationIndex === -1) {\r\n      console.log('❌ \"Core Inflation Rate\" text not found');\r\n      console.log('🔍 Searching for alternative patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const alternativePatterns = [\r\n        'Core Inflation Rate',\r\n        'core inflation rate',\r\n        'CORE INFLATION RATE',\r\n        'Inflation Rate',\r\n        'inflation rate'\r\n      ];\r\n      \r\n      for (const pattern of alternativePatterns) {\r\n        const index = data.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Core Inflation Rate section not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"Core Inflation Rate\" at index ${coreInflationIndex}`);\r\n    \r\n    // \"Core Inflation Rate\" 이후의 HTML에서 숫자 값 찾기\r\n    const afterCoreInflation = data.substring(coreInflationIndex);\r\n    console.log('📄 After Core Inflation Rate (first 1000 chars):', afterCoreInflation.substring(0, 1000));\r\n    \r\n    // 숫자 패턴 찾기 (소수점 포함)\r\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\r\n    const numberMatch = afterCoreInflation.match(numberPattern);\r\n    \r\n    if (!numberMatch) {\r\n      console.log('❌ Number value not found');\r\n      console.log('🔍 Searching for any number patterns...');\r\n      \r\n      // 다른 숫자 패턴들 시도\r\n      const numberPatterns = [\r\n        /[-+]?\\d+\\.\\d+/,  // 소수점 포함\r\n        /[-+]?\\d+/,       // 정수만\r\n        /\\d+\\.\\d+/        // 양수 소수점\r\n      ];\r\n      \r\n      for (const pattern of numberPatterns) {\r\n        const match = afterCoreInflation.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found number pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Number value not found');\r\n    }\r\n    \r\n    const currentValue = parseFloat(numberMatch[0]);\r\n    console.log(`✅ Successfully extracted US Core Inflation Rate: ${currentValue}%`);\r\n    \r\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core Inflation Rate YoY');\r\n    const change = dummyData ? dummyData.change : 0.00;\r\n    \r\n    return {\r\n      title: 'US Core Inflation Rate YoY',\r\n      value: currentValue,\r\n      change: change,\r\n      isPositive: change >= 0,\r\n      symbol: 'US_CORE_INFLATION',\r\n      unit: '%',\r\n      description: '미국 핵심 인플레이션률 (전년 동기 대비)',\r\n      isRealData: true,\r\n      dataSource: 'Trading Economics'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching US Core Inflation Rate:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core Inflation Rate YoY');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for US Core Inflation Rate');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// US Core PCE YoY 가져오기 (Trading Economics)\r\nexport const fetchUSCorePCE = async () => {\r\n  try {\r\n    console.log('🔄 Fetching US Core PCE YoY from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/united-states/core-pce-price-index-annual-change';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    // 여러 방법으로 시도\r\n    let data = null;\r\n    let lastError = null;\r\n    \r\n    // 방법 1: 프록시 서버들 시도\r\n    try {\r\n      data = await fetchWithProxy(url);\r\n      console.log('✅ Successfully fetched data using proxy');\r\n    } catch (error) {\r\n      console.log('❌ Proxy method failed:', error.message);\r\n      lastError = error;\r\n    }\r\n    \r\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying direct fetch...');\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\r\n            'Cache-Control': 'no-cache'\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          data = await response.text();\r\n          console.log('✅ Successfully fetched data using direct fetch');\r\n        } else {\r\n          throw new Error(`Direct fetch failed: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ Direct fetch failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    if (!data) {\r\n      console.log('❌ All methods failed, using dummy data');\r\n      console.log('🔍 Last error:', lastError);\r\n      \r\n      // 실패 시 더미 데이터 사용\r\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core PCE YoY');\r\n      if (dummyData) {\r\n        console.log('📊 Using dummy data for US Core PCE');\r\n        return {\r\n          ...dummyData,\r\n          isRealData: false,\r\n          dataSource: 'Dummy Data (All methods failed)'\r\n        };\r\n      }\r\n      \r\n      throw new Error('All data fetching methods failed');\r\n    }\r\n    \r\n    console.log(`📄 Total HTML length: ${data.length} characters`);\r\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\r\n    \r\n    // Trading Economics 페이지에서 데이터 추출 시도\r\n    // \"Core PCE Price Index\" 텍스트 찾기\r\n    const corePCEIndex = data.indexOf('Core PCE Price Index');\r\n    if (corePCEIndex === -1) {\r\n      console.log('❌ \"Core PCE Price Index\" text not found');\r\n      console.log('🔍 Searching for alternative patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const alternativePatterns = [\r\n        'Core PCE Price Index',\r\n        'core pce price index',\r\n        'CORE PCE PRICE INDEX',\r\n        'PCE Price Index',\r\n        'pce price index',\r\n        'PCE',\r\n        'pce'\r\n      ];\r\n      \r\n      for (const pattern of alternativePatterns) {\r\n        const index = data.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Core PCE Price Index section not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"Core PCE Price Index\" at index ${corePCEIndex}`);\r\n    \r\n    // \"Core PCE Price Index\" 이후의 HTML에서 숫자 값 찾기\r\n    const afterCorePCE = data.substring(corePCEIndex);\r\n    console.log('📄 After Core PCE Price Index (first 1000 chars):', afterCorePCE.substring(0, 1000));\r\n    \r\n    // 숫자 패턴 찾기 (소수점 포함)\r\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\r\n    const numberMatch = afterCorePCE.match(numberPattern);\r\n    \r\n    if (!numberMatch) {\r\n      console.log('❌ Number value not found');\r\n      console.log('🔍 Searching for any number patterns...');\r\n      \r\n      // 다른 숫자 패턴들 시도\r\n      const numberPatterns = [\r\n        /[-+]?\\d+\\.\\d+/,  // 소수점 포함\r\n        /[-+]?\\d+/,       // 정수만\r\n        /\\d+\\.\\d+/        // 양수 소수점\r\n      ];\r\n      \r\n      for (const pattern of numberPatterns) {\r\n        const match = afterCorePCE.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found number pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Number value not found');\r\n    }\r\n    \r\n    const currentValue = parseFloat(numberMatch[0]);\r\n    console.log(`✅ Successfully extracted US Core PCE: ${currentValue}%`);\r\n    \r\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core PCE YoY');\r\n    const change = dummyData ? dummyData.change : 0.00;\r\n    \r\n    return {\r\n      title: 'US Core PCE YoY',\r\n      value: currentValue,\r\n      change: change,\r\n      isPositive: change >= 0,\r\n      symbol: 'US_CORE_PCE',\r\n      unit: '%',\r\n      description: '미국 핵심 PCE 물가지수 (전년 동기 대비)',\r\n      isRealData: true,\r\n      dataSource: 'Trading Economics'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching US Core PCE:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core PCE YoY');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for US Core PCE');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// US Core PPI YoY 가져오기 (Trading Economics)\r\nexport const fetchUSCorePPI = async () => {\r\n  try {\r\n    console.log('🔄 Fetching US Core PPI YoY from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/united-states/core-producer-prices-yoy';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    // 여러 방법으로 시도\r\n    let data = null;\r\n    let lastError = null;\r\n    \r\n    // 방법 1: 프록시 서버들 시도\r\n    try {\r\n      data = await fetchWithProxy(url);\r\n      console.log('✅ Successfully fetched data using proxy');\r\n    } catch (error) {\r\n      console.log('❌ Proxy method failed:', error.message);\r\n      lastError = error;\r\n    }\r\n    \r\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying direct fetch...');\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\r\n            'Cache-Control': 'no-cache'\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          data = await response.text();\r\n          console.log('✅ Successfully fetched data using direct fetch');\r\n        } else {\r\n          throw new Error(`Direct fetch failed: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ Direct fetch failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    if (!data) {\r\n      console.log('❌ All methods failed, using dummy data');\r\n      console.log('🔍 Last error:', lastError);\r\n      \r\n      // 실패 시 더미 데이터 사용\r\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core PPI YoY');\r\n      if (dummyData) {\r\n        console.log('📊 Using dummy data for US Core PPI');\r\n        return {\r\n          ...dummyData,\r\n          isRealData: false,\r\n          dataSource: 'Dummy Data (All methods failed)'\r\n        };\r\n      }\r\n      \r\n      throw new Error('All data fetching methods failed');\r\n    }\r\n    \r\n    console.log(`📄 Total HTML length: ${data.length} characters`);\r\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\r\n    \r\n    // Trading Economics 페이지에서 데이터 추출 시도\r\n    // \"Core PPI\" 텍스트 찾기\r\n    const corePPIIndex = data.indexOf('Core PPI');\r\n    if (corePPIIndex === -1) {\r\n      console.log('❌ \"Core PPI\" text not found');\r\n      console.log('🔍 Searching for alternative patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const alternativePatterns = [\r\n        'Core PPI',\r\n        'core ppi',\r\n        'CORE PPI',\r\n        'PPI',\r\n        'ppi'\r\n      ];\r\n      \r\n      for (const pattern of alternativePatterns) {\r\n        const index = data.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Core PPI section not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"Core PPI\" at index ${corePPIIndex}`);\r\n    \r\n    // \"Core PPI\" 이후의 HTML에서 숫자 값 찾기\r\n    const afterCorePPI = data.substring(corePPIIndex);\r\n    console.log('📄 After Core PPI (first 1000 chars):', afterCorePPI.substring(0, 1000));\r\n    \r\n    // 숫자 패턴 찾기 (소수점 포함)\r\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\r\n    const numberMatch = afterCorePPI.match(numberPattern);\r\n    \r\n    if (!numberMatch) {\r\n      console.log('❌ Number value not found');\r\n      console.log('🔍 Searching for any number patterns...');\r\n      \r\n      // 다른 숫자 패턴들 시도\r\n      const numberPatterns = [\r\n        /[-+]?\\d+\\.\\d+/,  // 소수점 포함\r\n        /[-+]?\\d+/,       // 정수만\r\n        /\\d+\\.\\d+/        // 양수 소수점\r\n      ];\r\n      \r\n      for (const pattern of numberPatterns) {\r\n        const match = afterCorePPI.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found number pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Number value not found');\r\n    }\r\n    \r\n    const currentValue = parseFloat(numberMatch[0]);\r\n    console.log(`✅ Successfully extracted US Core PPI: ${currentValue}%`);\r\n    \r\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core PPI YoY');\r\n    const change = dummyData ? dummyData.change : 0.00;\r\n    \r\n    return {\r\n      title: 'US Core PPI YoY',\r\n      value: currentValue,\r\n      change: change,\r\n      isPositive: change >= 0,\r\n      symbol: 'US_CORE_PPI',\r\n      unit: '%',\r\n      description: '미국 핵심 PPI 물가지수 (전년 동기 대비)',\r\n      isRealData: true,\r\n      dataSource: 'Trading Economics'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching US Core PPI:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core PPI YoY');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for US Core PPI');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// US Money Supply M2 가져오기 (Trading Economics)\r\nexport const fetchUSMoneySupplyM2 = async () => {\r\n  try {\r\n    console.log('🔄 Fetching US Money Supply M2 from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/united-states/money-supply-m2';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    // 여러 방법으로 시도\r\n    let data = null;\r\n    let lastError = null;\r\n    \r\n    // 방법 1: 프록시 서버들 시도\r\n    try {\r\n      data = await fetchWithProxy(url);\r\n      console.log('✅ Successfully fetched data using proxy');\r\n    } catch (error) {\r\n      console.log('❌ Proxy method failed:', error.message);\r\n      lastError = error;\r\n    }\r\n    \r\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying direct fetch...');\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\r\n            'Cache-Control': 'no-cache'\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          data = await response.text();\r\n          console.log('✅ Successfully fetched data using direct fetch');\r\n        } else {\r\n          throw new Error(`Direct fetch failed: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ Direct fetch failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    if (!data) {\r\n      console.log('❌ All methods failed, using dummy data');\r\n      console.log('🔍 Last error:', lastError);\r\n      \r\n      // 실패 시 더미 데이터 사용\r\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Money Supply M2');\r\n      if (dummyData) {\r\n        console.log('📊 Using dummy data for US Money Supply M2');\r\n        return {\r\n          ...dummyData,\r\n          isRealData: false,\r\n          dataSource: 'Dummy Data (All methods failed)'\r\n        };\r\n      }\r\n      \r\n      throw new Error('All data fetching methods failed');\r\n    }\r\n    \r\n    console.log(`📄 Total HTML length: ${data.length} characters`);\r\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\r\n    \r\n    // Trading Economics 페이지에서 데이터 추출 시도\r\n    // \"Money Supply M2\" 텍스트 찾기\r\n    const moneySupplyIndex = data.indexOf('Money Supply M2');\r\n    if (moneySupplyIndex === -1) {\r\n      console.log('❌ \"Money Supply M2\" text not found');\r\n      console.log('🔍 Searching for alternative patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const alternativePatterns = [\r\n        'Money Supply M2',\r\n        'money supply m2',\r\n        'MONEY SUPPLY M2',\r\n        'Money Supply',\r\n        'money supply'\r\n      ];\r\n      \r\n      for (const pattern of alternativePatterns) {\r\n        const index = data.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Money Supply M2 section not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"Money Supply M2\" at index ${moneySupplyIndex}`);\r\n    \r\n    // \"Money Supply M2\" 이후의 HTML에서 숫자 값 찾기\r\n    const afterMoneySupply = data.substring(moneySupplyIndex);\r\n    console.log('📄 After Money Supply M2 (first 1000 chars):', afterMoneySupply.substring(0, 1000));\r\n    \r\n    // 숫자 패턴 찾기 (소수점 포함)\r\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\r\n    const numberMatch = afterMoneySupply.match(numberPattern);\r\n    \r\n    if (!numberMatch) {\r\n      console.log('❌ Number value not found');\r\n      console.log('🔍 Searching for any number patterns...');\r\n      \r\n      // 다른 숫자 패턴들 시도\r\n      const numberPatterns = [\r\n        /[-+]?\\d+\\.\\d+/,  // 소수점 포함\r\n        /[-+]?\\d+/,       // 정수만\r\n        /\\d+\\.\\d+/        // 양수 소수점\r\n      ];\r\n      \r\n      for (const pattern of numberPatterns) {\r\n        const match = afterMoneySupply.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found number pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Number value not found');\r\n    }\r\n    \r\n    const currentValue = parseFloat(numberMatch[0]);\r\n    console.log(`✅ Successfully extracted US Money Supply M2: ${currentValue}`);\r\n    \r\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Money Supply M2');\r\n    const change = dummyData ? dummyData.change : 0.00;\r\n    \r\n    return {\r\n      title: 'US Money Supply M2',\r\n      value: currentValue,\r\n      change: change,\r\n      isPositive: change >= 0,\r\n      symbol: 'US_M2',\r\n      unit: '',\r\n      description: '미국 핵심 M2 통화량 (전년 동기 대비)',\r\n      isRealData: true,\r\n      dataSource: 'Trading Economics'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching US Money Supply M2:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Money Supply M2');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for US Money Supply M2');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// US SOFR 가져오기 (Trading Economics)\r\nexport const fetchUSSOFR = async () => {\r\n  try {\r\n    console.log('🔄 Fetching US SOFR from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/united-states/secured-overnight-financing-rate';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    // 여러 방법으로 시도\r\n    let data = null;\r\n    let lastError = null;\r\n    \r\n    // 방법 1: 프록시 서버들 시도\r\n    try {\r\n      data = await fetchWithProxy(url);\r\n      console.log('✅ Successfully fetched data using proxy');\r\n    } catch (error) {\r\n      console.log('❌ Proxy method failed:', error.message);\r\n      lastError = error;\r\n    }\r\n    \r\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying direct fetch...');\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\r\n            'Cache-Control': 'no-cache'\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          data = await response.text();\r\n          console.log('✅ Successfully fetched data using direct fetch');\r\n        } else {\r\n          throw new Error(`Direct fetch failed: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ Direct fetch failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    if (!data) {\r\n      console.log('❌ All methods failed, using dummy data');\r\n      console.log('🔍 Last error:', lastError);\r\n      \r\n      // 실패 시 더미 데이터 사용\r\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US SOFR');\r\n      if (dummyData) {\r\n        console.log('📊 Using dummy data for US SOFR');\r\n        return {\r\n          ...dummyData,\r\n          isRealData: false,\r\n          dataSource: 'Dummy Data (All methods failed)'\r\n        };\r\n      }\r\n      \r\n      throw new Error('All data fetching methods failed');\r\n    }\r\n    \r\n    console.log(`📄 Total HTML length: ${data.length} characters`);\r\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\r\n    \r\n    // Trading Economics 페이지에서 데이터 추출 시도\r\n    // \"SOFR\" 텍스트 찾기\r\n    const sofrIndex = data.indexOf('SOFR');\r\n    if (sofrIndex === -1) {\r\n      console.log('❌ \"SOFR\" text not found');\r\n      console.log('🔍 Searching for alternative patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const alternativePatterns = [\r\n        'SOFR',\r\n        'sofr',\r\n        'Secured Overnight Financing Rate',\r\n        'secured overnight financing rate',\r\n        'Overnight Financing Rate',\r\n        'overnight financing rate'\r\n      ];\r\n      \r\n      for (const pattern of alternativePatterns) {\r\n        const index = data.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('SOFR section not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"SOFR\" at index ${sofrIndex}`);\r\n    \r\n    // \"SOFR\" 이후의 HTML에서 숫자 값 찾기\r\n    const afterSOFR = data.substring(sofrIndex);\r\n    console.log('📄 After SOFR (first 1000 chars):', afterSOFR.substring(0, 1000));\r\n    \r\n    // 숫자 패턴 찾기 (소수점 포함)\r\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\r\n    const numberMatch = afterSOFR.match(numberPattern);\r\n    \r\n    if (!numberMatch) {\r\n      console.log('❌ Number value not found');\r\n      console.log('🔍 Searching for any number patterns...');\r\n      \r\n      // 다른 숫자 패턴들 시도\r\n      const numberPatterns = [\r\n        /[-+]?\\d+\\.\\d+/,  // 소수점 포함\r\n        /[-+]?\\d+/,       // 정수만\r\n        /\\d+\\.\\d+/        // 양수 소수점\r\n      ];\r\n      \r\n      for (const pattern of numberPatterns) {\r\n        const match = afterSOFR.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found number pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Number value not found');\r\n    }\r\n    \r\n    const currentValue = parseFloat(numberMatch[0]);\r\n    console.log(`✅ Successfully extracted US SOFR: ${currentValue}%`);\r\n    \r\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US SOFR');\r\n    const change = dummyData ? dummyData.change : 0.00;\r\n    \r\n    return {\r\n      title: 'US SOFR',\r\n      value: currentValue,\r\n      change: change,\r\n      isPositive: change >= 0,\r\n      symbol: 'US_SOFR',\r\n      unit: '%',\r\n      description: '미국 담보부 하루물 금리',\r\n      isRealData: true,\r\n      dataSource: 'Trading Economics'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching US SOFR:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US SOFR');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for US SOFR');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// 모든 Macro 데이터 가져오기\r\nexport const fetchAllMacroData = async () => {\r\n  try {\r\n    console.log('🔄 Fetching all Macro Economics data...');\r\n    \r\n    const promises = [\r\n      fetchSP500DividendFutures(),\r\n      fetchCitiEconomicSurpriseIndex(),\r\n      fetchInflationExpectationRate(),\r\n      fetchUSCoreInflationRate(),\r\n      fetchUSCorePCE(),\r\n      fetchUSCorePPI(),\r\n      fetchUSMoneySupplyM2(),\r\n      fetchUSSOFR()\r\n    ];\r\n    \r\n    // 모든 요청 완료 대기\r\n    const results = await Promise.all(promises);\r\n    \r\n    console.log(`✅ Successfully loaded ${results.length} Macro Economics indicators`);\r\n    \r\n    // 실제 데이터가 있는지 확인\r\n    const realDataCount = results.filter(item => item.isRealData).length;\r\n    if (realDataCount === 0) {\r\n      console.log('⚠️ No real data available, showing dummy data');\r\n    } else {\r\n      console.log(`✅ ${realDataCount} real Macro indicators loaded`);\r\n    }\r\n    \r\n    return results;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching all Macro data:', error);\r\n    console.log('📊 Falling back to dummy data...');\r\n    \r\n    // 전체 실패 시 더미 데이터 반환\r\n    return DUMMY_MACRO_DATA.map(item => ({\r\n      ...item,\r\n      isRealData: false,\r\n      dataSource: 'Dummy Data (Error)'\r\n    }));\r\n  }\r\n};\r\n\r\n// Macro 데이터 가져오기 (실시간 시뮬레이션)\r\nexport const fetchMacroData = async () => {\r\n  try {\r\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\r\n    return DUMMY_MACRO_DATA.map(item => ({\r\n      ...item,\r\n      isRealData: false,\r\n      dataSource: 'Dummy Data (Simulation)'\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error fetching macro data:', error);\r\n    return DUMMY_MACRO_DATA;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}