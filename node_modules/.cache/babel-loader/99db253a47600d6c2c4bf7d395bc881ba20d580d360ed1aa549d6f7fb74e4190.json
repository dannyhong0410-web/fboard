{"ast":null,"code":"// Trading Economics 웹사이트에서 최신 데이터를 가져오는 Fixed Income 서비스\nconst BASE_URL = 'https://tradingeconomics.com';\n\n// 프록시 서버들을 사용한 웹 스크래핑\nconst PROXY_SERVICES = ['https://api.allorigins.win/raw?url=', 'https://cors-anywhere.herokuapp.com/', 'https://corsproxy.io/?', 'https://thingproxy.freeboard.io/fetch/', 'https://cors.bridged.cc/', 'https://api.codetabs.com/v1/proxy?quest=', 'https://cors.eu.org/', 'https://api.codetabs.com/v1/proxy?quest=', 'https://cors-anywhere.herokuapp.com/', 'https://corsproxy.io/?', '' // 직접 호출도 시도\n];\n\n// 공개 API를 통한 백업 데이터 가져오기\nconst fetchFromPublicAPI = async () => {\n  try {\n    console.log('🌐 Trying public API as backup...');\n\n    // Alpha Vantage API (무료 티어)\n    const alphaVantageUrl = 'https://www.alphavantage.co/query?function=TREASURY_YIELD&interval=daily&maturity=10year&apikey=demo';\n    const response = await fetch(alphaVantageUrl);\n    const data = await response.json();\n    if (data && data.data && data.data.length > 0) {\n      const latestYield = parseFloat(data.data[0].value);\n      console.log('✅ Public API successful! US 10Y yield:', latestYield + '%');\n      return latestYield;\n    }\n    throw new Error('No data from public API');\n  } catch (error) {\n    console.log('❌ Public API failed:', error.message);\n    return null;\n  }\n};\n\n// 프록시를 사용한 웹 스크래핑\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\n  if (proxyIndex >= PROXY_SERVICES.length) {\n    throw new Error('All proxy attempts failed');\n  }\n  try {\n    const proxyUrl = PROXY_SERVICES[proxyIndex] + url;\n    console.log(`🔗 Trying proxy ${proxyIndex + 1}/${PROXY_SERVICES.length}: ${proxyUrl.substring(0, 50)}...`);\n    const response = await fetch(proxyUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n        'Accept-Language': 'en-US,en;q=0.9',\n        'Accept-Encoding': 'gzip, deflate, br',\n        'Connection': 'keep-alive',\n        'Upgrade-Insecure-Requests': '1'\n      },\n      timeout: 10000 // 10초 타임아웃\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const html = await response.text();\n    if (html.length < 1000) {\n      throw new Error('Response too short, likely an error page');\n    }\n    console.log(`✅ Proxy ${proxyIndex + 1} successful! HTML length: ${html.length} characters`);\n    return html;\n  } catch (error) {\n    console.log(`❌ Proxy ${proxyIndex + 1} failed: ${error.message}`);\n    return fetchWithProxy(url, proxyIndex + 1);\n  }\n};\n\n// HTML에서 금리 데이터 추출 (Trading Economics Calendar 테이블에서 추출)\nconst extractInterestRateFromHTML = (html, country) => {\n  try {\n    // Trading Economics Calendar 테이블에서 가장 최신의 실제 데이터 TEForcast 값 추출\n\n    // 테이블 패턴 찾기 (Calendar, GMT가 포함된 테이블)\n    const tablePattern = /<table[^>]*>.*?Calendar.*?GMT.*?<\\/table>/is;\n    const tableMatch = html.match(tablePattern);\n    if (!tableMatch) {\n      console.log(`No calendar table found for ${country}`);\n      return null;\n    }\n    const tableHTML = tableMatch[0];\n\n    // 테이블 행들 추출\n    const rowPattern = /<tr[^>]*>.*?<\\/tr>/gis;\n    const rows = tableHTML.match(rowPattern);\n    if (!rows || rows.length < 2) {\n      console.log(`No rows found in calendar table for ${country}`);\n      return null;\n    }\n\n    // 현재 날짜 가져오기\n    const currentDate = new Date();\n    const currentDateString = currentDate.toISOString().split('T')[0]; // YYYY-MM-DD 형식\n\n    console.log(`Current date: ${currentDateString}`);\n\n    // 첫 번째 행은 헤더이므로 제외하고, 두 번째 행부터 검색\n    // 가장 최신의 실제 데이터(Actual 값이 있는 행)의 TEForcast 값 찾기\n    let latestRate = null;\n    let latestDate = null;\n    for (let i = 1; i < rows.length; i++) {\n      const row = rows[i];\n\n      // TD 태그들 추출\n      const tdPattern = /<td[^>]*>(.*?)<\\/td>/gis;\n      const tds = row.match(tdPattern);\n      if (tds && tds.length >= 7) {\n        // Calendar, GMT, Reference, Actual, Previous, Consensus, TEForecast\n        // 첫 번째 TD: 날짜\n        const dateTD = tds[0];\n        // 네 번째 TD: Actual 값\n        const actualTD = tds[3];\n        // 일곱 번째 TD: TEForcast 값\n        const teForcastTD = tds[6];\n\n        // 날짜 추출 (YYYY-MM-DD 형식)\n        const datePattern = /(\\d{4}-\\d{2}-\\d{2})/;\n        const dateMatch = dateTD.match(datePattern);\n        if (dateMatch) {\n          const date = dateMatch[1];\n\n          // 날짜가 현재 날짜보다 미래인지 확인\n          if (date > currentDateString) {\n            console.log(`Skipping future date: ${date}`);\n            continue; // 미래 날짜는 건너뛰기\n          }\n\n          // Actual 값이 있는지 확인 (빈 값이 아닌지)\n          const actualPattern = /(\\d+\\.\\d+)/;\n          const actualMatch = actualTD.match(actualPattern);\n          if (actualMatch) {\n            // Actual 값이 있으면 실제 데이터로 간주\n            const teForcastPattern = /(\\d+\\.\\d+)/;\n            const teForcastMatch = teForcastTD.match(teForcastPattern);\n            if (teForcastMatch) {\n              const rate = parseFloat(teForcastMatch[1]);\n\n              // 더 최신 날짜인지 확인\n              if (!latestDate || date > latestDate) {\n                latestDate = date;\n                latestRate = rate;\n                console.log(`Found actual data: ${rate}% for date: ${date}`);\n              }\n            }\n          } else {\n            console.log(`No actual data for date: ${date}, skipping`);\n          }\n        }\n      }\n    }\n    if (latestRate) {\n      console.log(`Found latest actual rate for ${country}: ${latestRate}% (Date: ${latestDate})`);\n      return latestRate;\n    }\n\n    // 실제 데이터를 찾지 못한 경우, 모든 TD에서 숫자 찾기 (미래 제외)\n    console.log(`No actual data found for ${country}, searching all TDs (excluding future dates)...`);\n    for (let i = 1; i < rows.length; i++) {\n      const row = rows[i];\n\n      // 날짜 추출 (YYYY-MM-DD 형식)\n      const datePattern = /(\\d{4}-\\d{2}-\\d{2})/;\n      const dateMatch = row.match(datePattern);\n      if (dateMatch) {\n        const date = dateMatch[1];\n\n        // 날짜가 현재 날짜보다 미래인지 확인\n        if (date > currentDateString) {\n          continue; // 미래 날짜는 건너뛰기\n        }\n\n        // 모든 숫자.숫자 패턴 찾기\n        const numberPattern = /(\\d+\\.\\d+)/g;\n        const numberMatches = row.match(numberPattern);\n        if (numberMatches && numberMatches.length > 0) {\n          // 가장 큰 값이 보통 메인 금리\n          const rates = numberMatches.map(match => parseFloat(match));\n          const maxRate = Math.max(...rates);\n\n          // 더 최신 날짜인지 확인\n          if (!latestDate || date > latestDate) {\n            latestDate = date;\n            latestRate = maxRate;\n          }\n        }\n      }\n    }\n    if (latestRate) {\n      console.log(`Found latest rate from all TDs for ${country}: ${latestRate}% (Date: ${latestDate})`);\n      return latestRate;\n    }\n\n    // 테이블에서 찾지 못한 경우, 기존 패턴으로 백업 시도\n    console.log(`No rate found in table for ${country}, trying backup patterns...`);\n\n    // 백업: 첫 번째 문장에서 금리 추출\n    const firstSentenceMatch = html.match(/<p[^>]*>([^<]+)<\\/p>/i) || html.match(/<div[^>]*>([^<]+)<\\/div>/i) || html.match(/<span[^>]*>([^<]+)<\\/span>/i);\n    const textToSearch = firstSentenceMatch ? firstSentenceMatch[1] : html;\n    const patterns = [/(\\d+\\.\\d+)%/g, /yield.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?yield/i, /bond.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?bond/i];\n    for (const pattern of patterns) {\n      const matches = textToSearch.match(pattern);\n      if (matches && matches.length > 0) {\n        const rates = matches.map(match => {\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\n        });\n        const maxRate = Math.max(...rates);\n        if (maxRate > 0) {\n          console.log(`Found rate from backup pattern for ${country}: ${maxRate}%`);\n          return maxRate;\n        }\n      }\n    }\n    console.log(`No rate found for ${country}`);\n    return null;\n  } catch (error) {\n    console.error('Error extracting data from HTML:', error);\n    return null;\n  }\n};\n\n// 실제 웹 스크래핑으로 금리 데이터 가져오기\nexport const fetchInterestRateFromWeb = async country => {\n  try {\n    const urls = {\n      '미국': 'https://tradingeconomics.com/united-states/interest-rate',\n      '한국': 'https://tradingeconomics.com/south-korea/interest-rate',\n      '일본': 'https://tradingeconomics.com/japan/interest-rate',\n      '유로': 'https://tradingeconomics.com/euro-area/interest-rate',\n      '영국': 'https://tradingeconomics.com/united-kingdom/interest-rate',\n      '한국국채': 'https://tradingeconomics.com/south-korea/government-bond-yield'\n    };\n    const url = urls[country];\n    if (!url) {\n      throw new Error(`No URL found for country: ${country}`);\n    }\n    console.log(`Fetching data for ${country} from: ${url}`);\n    const html = await fetchWithProxy(url);\n    const rate = extractInterestRateFromHTML(html, country);\n    return rate;\n  } catch (error) {\n    console.error(`Error fetching ${country} interest rate:`, error);\n    return null;\n  }\n};\n\n// 한국 국채 수익률 특별 함수\nexport const fetchKoreaBondYield = async () => {\n  try {\n    console.log('🇰🇷 Fetching Korea bond yield...');\n\n    // 방법 1: Trading Economics 웹 스크래핑\n    try {\n      const url = 'https://tradingeconomics.com/south-korea/government-bond-yield';\n      console.log('🌐 Method 1: Web scraping from Trading Economics');\n      const html = await fetchWithProxy(url);\n      const rate = extractInterestRateFromHTML(html, '한국국채');\n      if (rate) {\n        console.log(`✅ Web scraping successful! Korea bond yield: ${rate}%`);\n        return rate;\n      }\n    } catch (scrapingError) {\n      console.log('❌ Web scraping failed:', scrapingError.message);\n    }\n\n    // 방법 2: 공개 API 시도\n    try {\n      console.log('🌐 Method 2: Trying public API...');\n      const publicRate = await fetchFromPublicAPI();\n      if (publicRate) {\n        // 공개 API는 US 10Y이므로 한국 국채에 맞게 조정 (보통 1-2% 높음)\n        const koreaRate = publicRate + 1.5;\n        console.log(`✅ Public API successful! Adjusted Korea rate: ${koreaRate}%`);\n        return koreaRate;\n      }\n    } catch (apiError) {\n      console.log('❌ Public API failed:', apiError.message);\n    }\n\n    // 방법 3: 다른 한국 금융 사이트 시도\n    try {\n      console.log('🌐 Method 3: Trying alternative Korean financial site...');\n      const alternativeUrl = 'https://www.investing.com/rates-bonds/south-korea-10-year-bond-yield';\n      const html = await fetchWithProxy(alternativeUrl);\n\n      // 간단한 패턴 매칭으로 수익률 추출\n      const yieldPattern = /(\\d+\\.\\d+)%/;\n      const match = html.match(yieldPattern);\n      if (match) {\n        const rate = parseFloat(match[1]);\n        console.log(`✅ Alternative site successful! Korea bond yield: ${rate}%`);\n        return rate;\n      }\n    } catch (altError) {\n      console.log('❌ Alternative site failed:', altError.message);\n    }\n    console.log('❌ All methods failed for Korea bond yield');\n    return null;\n  } catch (error) {\n    console.error('❌ Error fetching Korea bond yield:', error);\n    return null;\n  }\n};\n\n// 2024년 12월 기준 최신 더미 데이터 (실제 시장 상황 반영)\nconst DUMMY_FIXED_INCOME_DATA = [\n// Standard Interest Rates (기준 금리) - 2024년 12월 기준\n{\n  title: '미국 기준 금리',\n  value: 4.375,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'FEDFUNDS'\n}, {\n  title: '유로 기준 금리',\n  value: 4.50,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'ECBREFI'\n}, {\n  title: '일본 기준 금리',\n  value: -0.10,\n  change: 0.00,\n  isPositive: false,\n  symbol: 'BOJDF'\n}, {\n  title: '한국 기준 금리',\n  value: 2.50,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'KORREPO'\n}, {\n  title: '스위스 기준 금리',\n  value: 1.75,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'SNBREFI'\n}, {\n  title: '영국 기준 금리',\n  value: 5.25,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'BOEREFI'\n}, {\n  title: '호주 기준 금리',\n  value: 4.35,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'RBAREFI'\n}, {\n  title: '브라질 기준 금리',\n  value: 12.25,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'BRAREFI'\n},\n// US Bond Yields - 2024년 12월 기준 최신 수익률\n{\n  title: 'US 3M',\n  value: 5.45,\n  change: 0.02,\n  isPositive: true,\n  symbol: 'US3M'\n}, {\n  title: 'US 2Y',\n  value: 4.78,\n  change: 0.05,\n  isPositive: true,\n  symbol: 'US2Y'\n}, {\n  title: 'US 10Y',\n  value: 4.25,\n  change: 0.08,\n  isPositive: true,\n  symbol: 'US10Y'\n}, {\n  title: 'US 30Y',\n  value: 4.45,\n  change: 0.12,\n  isPositive: true,\n  symbol: 'US30Y'\n},\n// Korea Bond Yields - 2024년 12월 기준 최신 수익률\n{\n  title: 'Korea 2Y',\n  value: 3.45,\n  change: 0.03,\n  isPositive: true,\n  symbol: 'KR2Y'\n}, {\n  title: 'Korea 3Y',\n  value: 3.52,\n  change: 0.04,\n  isPositive: true,\n  symbol: 'KR3Y'\n}, {\n  title: 'Korea 5Y',\n  value: 3.68,\n  change: 0.06,\n  isPositive: true,\n  symbol: 'KR5Y'\n}, {\n  title: 'Korea 10Y',\n  value: 3.85,\n  change: 0.08,\n  isPositive: true,\n  symbol: 'KR10Y'\n}, {\n  title: 'Korea 30Y',\n  value: 4.12,\n  change: 0.10,\n  isPositive: true,\n  symbol: 'KR30Y'\n},\n// Japan Bond Yields - 2024년 12월 기준 최신 수익률\n{\n  title: 'Japan 2Y',\n  value: 0.12,\n  change: 0.01,\n  isPositive: true,\n  symbol: 'JP2Y'\n}, {\n  title: 'Japan 3Y',\n  value: 0.15,\n  change: 0.02,\n  isPositive: true,\n  symbol: 'JP3Y'\n}, {\n  title: 'Japan 5Y',\n  value: 0.25,\n  change: 0.03,\n  isPositive: true,\n  symbol: 'JP5Y'\n}, {\n  title: 'Japan 10Y',\n  value: 0.45,\n  change: 0.05,\n  isPositive: true,\n  symbol: 'JP10Y'\n}, {\n  title: 'Japan 30Y',\n  value: 1.25,\n  change: 0.08,\n  isPositive: true,\n  symbol: 'JP30Y'\n},\n// Germany Bond Yields - 2024년 12월 기준 최신 수익률\n{\n  title: 'Germany 2Y',\n  value: 3.12,\n  change: 0.04,\n  isPositive: true,\n  symbol: 'DE2Y'\n}, {\n  title: 'Germany 3Y',\n  value: 3.25,\n  change: 0.05,\n  isPositive: true,\n  symbol: 'DE3Y'\n}, {\n  title: 'Germany 5Y',\n  value: 3.45,\n  change: 0.06,\n  isPositive: true,\n  symbol: 'DE5Y'\n}, {\n  title: 'Germany 10Y',\n  value: 2.85,\n  change: 0.08,\n  isPositive: true,\n  symbol: 'DE10Y'\n}, {\n  title: 'Germany 30Y',\n  value: 3.15,\n  change: 0.10,\n  isPositive: true,\n  symbol: 'DE30Y'\n}];\n\n// 실시간 데이터 시뮬레이션 (더미 데이터에 약간의 변동 추가)\nconst generateRealTimeData = () => {\n  return DUMMY_FIXED_INCOME_DATA.map(item => {\n    // 약간의 랜덤 변동 추가 (±0.05% 범위)\n    const variation = (Math.random() - 0.5) * 0.1;\n    const newValue = item.value + variation;\n    const newChange = variation;\n    return {\n      ...item,\n      value: Math.round(newValue * 100) / 100,\n      change: Math.round(newChange * 100) / 100,\n      isPositive: newChange >= 0\n    };\n  });\n};\n\n// 기준 금리 데이터 가져오기 (실시간 시뮬레이션)\nexport const fetchInterestRates = async () => {\n  try {\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\n    const realTimeData = generateRealTimeData();\n    return realTimeData.filter(item => item.title.includes('기준 금리'));\n  } catch (error) {\n    console.error('Error fetching interest rates:', error);\n    return DUMMY_FIXED_INCOME_DATA.filter(item => item.title.includes('기준 금리'));\n  }\n};\n\n// 채권 수익률 데이터 가져오기 (실시간 시뮬레이션)\nexport const fetchBondYields = async () => {\n  try {\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\n    const realTimeData = generateRealTimeData();\n    return realTimeData.filter(item => !item.title.includes('기준 금리'));\n  } catch (error) {\n    console.error('Error fetching bond yields:', error);\n    return DUMMY_FIXED_INCOME_DATA.filter(item => !item.title.includes('기준 금리'));\n  }\n};\n\n// 모든 Fixed Income 데이터 가져오기 (실시간 시뮬레이션)\nexport const fetchAllFixedIncomeData = async () => {\n  try {\n    // 실시간 시뮬레이션으로 데이터 생성\n    const realTimeData = generateRealTimeData();\n    return realTimeData;\n  } catch (error) {\n    console.error('Error fetching all fixed income data:', error);\n    return DUMMY_FIXED_INCOME_DATA;\n  }\n};\n\n// Trading Economics URL 매핑 (실제 웹사이트 링크)\nexport const TRADING_ECONOMICS_URLS = {\n  // 기준 금리 - 실제 Trading Economics 페이지\n  '미국 기준 금리': 'https://tradingeconomics.com/united-states/interest-rate',\n  '유로 기준 금리': 'https://tradingeconomics.com/euro-area/interest-rate',\n  '일본 기준 금리': 'https://tradingeconomics.com/japan/interest-rate',\n  '한국 기준 금리': 'https://tradingeconomics.com/south-korea/interest-rate',\n  '스위스 기준 금리': 'https://tradingeconomics.com/switzerland/interest-rate',\n  '영국 기준 금리': 'https://tradingeconomics.com/united-kingdom/interest-rate',\n  '호주 기준 금리': 'https://tradingeconomics.com/australia/interest-rate',\n  '브라질 기준 금리': 'https://tradingeconomics.com/brazil/interest-rate',\n  // US Bond Yields - 실제 Trading Economics 페이지\n  'US 3M': 'https://tradingeconomics.com/united-states/government-bond-yield',\n  'US 2Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\n  'US 10Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\n  'US 30Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\n  // Korea Bond Yields - 실제 Trading Economics 페이지\n  'Korea 2Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  'Korea 3Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  'Korea 5Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  'Korea 10Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  'Korea 30Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  // Japan Bond Yields - 실제 Trading Economics 페이지\n  'Japan 2Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  'Japan 3Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  'Japan 5Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  'Japan 10Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  'Japan 30Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  // Germany Bond Yields - 실제 Trading Economics 페이지\n  'Germany 2Y': 'https://tradingeconomics.com/germany/government-bond-yield',\n  'Germany 3Y': 'https://tradingeconomics.com/germany/government-bond-yield',\n  'Germany 5Y': 'https://tradingeconomics.com/germany/government-bond-yield',\n  'Germany 10Y': 'https://tradingeconomics.com/germany/government-bond-yield',\n  'Germany 30Y': 'https://tradingeconomics.com/germany/government-bond-yield'\n};","map":{"version":3,"names":["BASE_URL","PROXY_SERVICES","fetchFromPublicAPI","console","log","alphaVantageUrl","response","fetch","data","json","length","latestYield","parseFloat","value","Error","error","message","fetchWithProxy","url","proxyIndex","proxyUrl","substring","method","headers","timeout","ok","status","html","text","extractInterestRateFromHTML","country","tablePattern","tableMatch","match","tableHTML","rowPattern","rows","currentDate","Date","currentDateString","toISOString","split","latestRate","latestDate","i","row","tdPattern","tds","dateTD","actualTD","teForcastTD","datePattern","dateMatch","date","actualPattern","actualMatch","teForcastPattern","teForcastMatch","rate","numberPattern","numberMatches","rates","map","maxRate","Math","max","firstSentenceMatch","textToSearch","patterns","pattern","matches","rateMatch","fetchInterestRateFromWeb","urls","fetchKoreaBondYield","scrapingError","publicRate","koreaRate","apiError","alternativeUrl","yieldPattern","altError","DUMMY_FIXED_INCOME_DATA","title","change","isPositive","symbol","generateRealTimeData","item","variation","random","newValue","newChange","round","fetchInterestRates","realTimeData","filter","includes","fetchBondYields","fetchAllFixedIncomeData","TRADING_ECONOMICS_URLS"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/fixedIncomeApi.js"],"sourcesContent":["// Trading Economics 웹사이트에서 최신 데이터를 가져오는 Fixed Income 서비스\r\nconst BASE_URL = 'https://tradingeconomics.com';\r\n\r\n// 프록시 서버들을 사용한 웹 스크래핑\r\nconst PROXY_SERVICES = [\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  'https://corsproxy.io/?',\r\n  'https://thingproxy.freeboard.io/fetch/',\r\n  'https://cors.bridged.cc/',\r\n  'https://api.codetabs.com/v1/proxy?quest=',\r\n  'https://cors.eu.org/',\r\n  'https://api.codetabs.com/v1/proxy?quest=',\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  'https://corsproxy.io/?',\r\n  '' // 직접 호출도 시도\r\n];\r\n\r\n// 공개 API를 통한 백업 데이터 가져오기\r\nconst fetchFromPublicAPI = async () => {\r\n  try {\r\n    console.log('🌐 Trying public API as backup...');\r\n    \r\n    // Alpha Vantage API (무료 티어)\r\n    const alphaVantageUrl = 'https://www.alphavantage.co/query?function=TREASURY_YIELD&interval=daily&maturity=10year&apikey=demo';\r\n    \r\n    const response = await fetch(alphaVantageUrl);\r\n    const data = await response.json();\r\n    \r\n    if (data && data.data && data.data.length > 0) {\r\n      const latestYield = parseFloat(data.data[0].value);\r\n      console.log('✅ Public API successful! US 10Y yield:', latestYield + '%');\r\n      return latestYield;\r\n    }\r\n    \r\n    throw new Error('No data from public API');\r\n  } catch (error) {\r\n    console.log('❌ Public API failed:', error.message);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 프록시를 사용한 웹 스크래핑\r\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\r\n  if (proxyIndex >= PROXY_SERVICES.length) {\r\n    throw new Error('All proxy attempts failed');\r\n  }\r\n\r\n  try {\r\n    const proxyUrl = PROXY_SERVICES[proxyIndex] + url;\r\n    console.log(`🔗 Trying proxy ${proxyIndex + 1}/${PROXY_SERVICES.length}: ${proxyUrl.substring(0, 50)}...`);\r\n    \r\n    const response = await fetch(proxyUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n        'Accept-Language': 'en-US,en;q=0.9',\r\n        'Accept-Encoding': 'gzip, deflate, br',\r\n        'Connection': 'keep-alive',\r\n        'Upgrade-Insecure-Requests': '1'\r\n      },\r\n      timeout: 10000 // 10초 타임아웃\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const html = await response.text();\r\n    \r\n    if (html.length < 1000) {\r\n      throw new Error('Response too short, likely an error page');\r\n    }\r\n    \r\n    console.log(`✅ Proxy ${proxyIndex + 1} successful! HTML length: ${html.length} characters`);\r\n    return html;\r\n  } catch (error) {\r\n    console.log(`❌ Proxy ${proxyIndex + 1} failed: ${error.message}`);\r\n    return fetchWithProxy(url, proxyIndex + 1);\r\n  }\r\n};\r\n\r\n// HTML에서 금리 데이터 추출 (Trading Economics Calendar 테이블에서 추출)\r\nconst extractInterestRateFromHTML = (html, country) => {\r\n  try {\r\n    // Trading Economics Calendar 테이블에서 가장 최신의 실제 데이터 TEForcast 값 추출\r\n    \r\n    // 테이블 패턴 찾기 (Calendar, GMT가 포함된 테이블)\r\n    const tablePattern = /<table[^>]*>.*?Calendar.*?GMT.*?<\\/table>/is;\r\n    const tableMatch = html.match(tablePattern);\r\n    \r\n    if (!tableMatch) {\r\n      console.log(`No calendar table found for ${country}`);\r\n      return null;\r\n    }\r\n    \r\n    const tableHTML = tableMatch[0];\r\n    \r\n    // 테이블 행들 추출\r\n    const rowPattern = /<tr[^>]*>.*?<\\/tr>/gis;\r\n    const rows = tableHTML.match(rowPattern);\r\n    \r\n    if (!rows || rows.length < 2) {\r\n      console.log(`No rows found in calendar table for ${country}`);\r\n      return null;\r\n    }\r\n    \r\n    // 현재 날짜 가져오기\r\n    const currentDate = new Date();\r\n    const currentDateString = currentDate.toISOString().split('T')[0]; // YYYY-MM-DD 형식\r\n    \r\n    console.log(`Current date: ${currentDateString}`);\r\n    \r\n    // 첫 번째 행은 헤더이므로 제외하고, 두 번째 행부터 검색\r\n    // 가장 최신의 실제 데이터(Actual 값이 있는 행)의 TEForcast 값 찾기\r\n    let latestRate = null;\r\n    let latestDate = null;\r\n    \r\n    for (let i = 1; i < rows.length; i++) {\r\n      const row = rows[i];\r\n      \r\n      // TD 태그들 추출\r\n      const tdPattern = /<td[^>]*>(.*?)<\\/td>/gis;\r\n      const tds = row.match(tdPattern);\r\n      \r\n      if (tds && tds.length >= 7) { // Calendar, GMT, Reference, Actual, Previous, Consensus, TEForecast\r\n        // 첫 번째 TD: 날짜\r\n        const dateTD = tds[0];\r\n        // 네 번째 TD: Actual 값\r\n        const actualTD = tds[3];\r\n        // 일곱 번째 TD: TEForcast 값\r\n        const teForcastTD = tds[6];\r\n        \r\n        // 날짜 추출 (YYYY-MM-DD 형식)\r\n        const datePattern = /(\\d{4}-\\d{2}-\\d{2})/;\r\n        const dateMatch = dateTD.match(datePattern);\r\n        \r\n        if (dateMatch) {\r\n          const date = dateMatch[1];\r\n          \r\n          // 날짜가 현재 날짜보다 미래인지 확인\r\n          if (date > currentDateString) {\r\n            console.log(`Skipping future date: ${date}`);\r\n            continue; // 미래 날짜는 건너뛰기\r\n          }\r\n          \r\n          // Actual 값이 있는지 확인 (빈 값이 아닌지)\r\n          const actualPattern = /(\\d+\\.\\d+)/;\r\n          const actualMatch = actualTD.match(actualPattern);\r\n          \r\n          if (actualMatch) {\r\n            // Actual 값이 있으면 실제 데이터로 간주\r\n            const teForcastPattern = /(\\d+\\.\\d+)/;\r\n            const teForcastMatch = teForcastTD.match(teForcastPattern);\r\n            \r\n            if (teForcastMatch) {\r\n              const rate = parseFloat(teForcastMatch[1]);\r\n              \r\n              // 더 최신 날짜인지 확인\r\n              if (!latestDate || date > latestDate) {\r\n                latestDate = date;\r\n                latestRate = rate;\r\n                console.log(`Found actual data: ${rate}% for date: ${date}`);\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`No actual data for date: ${date}, skipping`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (latestRate) {\r\n      console.log(`Found latest actual rate for ${country}: ${latestRate}% (Date: ${latestDate})`);\r\n      return latestRate;\r\n    }\r\n    \r\n    // 실제 데이터를 찾지 못한 경우, 모든 TD에서 숫자 찾기 (미래 제외)\r\n    console.log(`No actual data found for ${country}, searching all TDs (excluding future dates)...`);\r\n    \r\n    for (let i = 1; i < rows.length; i++) {\r\n      const row = rows[i];\r\n      \r\n      // 날짜 추출 (YYYY-MM-DD 형식)\r\n      const datePattern = /(\\d{4}-\\d{2}-\\d{2})/;\r\n      const dateMatch = row.match(datePattern);\r\n      \r\n      if (dateMatch) {\r\n        const date = dateMatch[1];\r\n        \r\n        // 날짜가 현재 날짜보다 미래인지 확인\r\n        if (date > currentDateString) {\r\n          continue; // 미래 날짜는 건너뛰기\r\n        }\r\n        \r\n        // 모든 숫자.숫자 패턴 찾기\r\n        const numberPattern = /(\\d+\\.\\d+)/g;\r\n        const numberMatches = row.match(numberPattern);\r\n        \r\n        if (numberMatches && numberMatches.length > 0) {\r\n          // 가장 큰 값이 보통 메인 금리\r\n          const rates = numberMatches.map(match => parseFloat(match));\r\n          const maxRate = Math.max(...rates);\r\n          \r\n          // 더 최신 날짜인지 확인\r\n          if (!latestDate || date > latestDate) {\r\n            latestDate = date;\r\n            latestRate = maxRate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (latestRate) {\r\n      console.log(`Found latest rate from all TDs for ${country}: ${latestRate}% (Date: ${latestDate})`);\r\n      return latestRate;\r\n    }\r\n    \r\n    // 테이블에서 찾지 못한 경우, 기존 패턴으로 백업 시도\r\n    console.log(`No rate found in table for ${country}, trying backup patterns...`);\r\n    \r\n    // 백업: 첫 번째 문장에서 금리 추출\r\n    const firstSentenceMatch = html.match(/<p[^>]*>([^<]+)<\\/p>/i) || \r\n                              html.match(/<div[^>]*>([^<]+)<\\/div>/i) ||\r\n                              html.match(/<span[^>]*>([^<]+)<\\/span>/i);\r\n    \r\n    const textToSearch = firstSentenceMatch ? firstSentenceMatch[1] : html;\r\n    \r\n    const patterns = [\r\n      /(\\d+\\.\\d+)%/g,\r\n      /yield.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?yield/i,\r\n      /bond.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?bond/i\r\n    ];\r\n    \r\n    for (const pattern of patterns) {\r\n      const matches = textToSearch.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        const maxRate = Math.max(...rates);\r\n        if (maxRate > 0) {\r\n          console.log(`Found rate from backup pattern for ${country}: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`No rate found for ${country}`);\r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error extracting data from HTML:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 실제 웹 스크래핑으로 금리 데이터 가져오기\r\nexport const fetchInterestRateFromWeb = async (country) => {\r\n  try {\r\n    const urls = {\r\n      '미국': 'https://tradingeconomics.com/united-states/interest-rate',\r\n      '한국': 'https://tradingeconomics.com/south-korea/interest-rate',\r\n      '일본': 'https://tradingeconomics.com/japan/interest-rate',\r\n      '유로': 'https://tradingeconomics.com/euro-area/interest-rate',\r\n      '영국': 'https://tradingeconomics.com/united-kingdom/interest-rate',\r\n      '한국국채': 'https://tradingeconomics.com/south-korea/government-bond-yield'\r\n    };\r\n\r\n    const url = urls[country];\r\n    if (!url) {\r\n      throw new Error(`No URL found for country: ${country}`);\r\n    }\r\n\r\n    console.log(`Fetching data for ${country} from: ${url}`);\r\n    const html = await fetchWithProxy(url);\r\n    const rate = extractInterestRateFromHTML(html, country);\r\n    \r\n    return rate;\r\n  } catch (error) {\r\n    console.error(`Error fetching ${country} interest rate:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 한국 국채 수익률 특별 함수\r\nexport const fetchKoreaBondYield = async () => {\r\n  try {\r\n    console.log('🇰🇷 Fetching Korea bond yield...');\r\n    \r\n    // 방법 1: Trading Economics 웹 스크래핑\r\n    try {\r\n      const url = 'https://tradingeconomics.com/south-korea/government-bond-yield';\r\n      console.log('🌐 Method 1: Web scraping from Trading Economics');\r\n      \r\n      const html = await fetchWithProxy(url);\r\n      const rate = extractInterestRateFromHTML(html, '한국국채');\r\n      \r\n      if (rate) {\r\n        console.log(`✅ Web scraping successful! Korea bond yield: ${rate}%`);\r\n        return rate;\r\n      }\r\n    } catch (scrapingError) {\r\n      console.log('❌ Web scraping failed:', scrapingError.message);\r\n    }\r\n    \r\n    // 방법 2: 공개 API 시도\r\n    try {\r\n      console.log('🌐 Method 2: Trying public API...');\r\n      const publicRate = await fetchFromPublicAPI();\r\n      \r\n      if (publicRate) {\r\n        // 공개 API는 US 10Y이므로 한국 국채에 맞게 조정 (보통 1-2% 높음)\r\n        const koreaRate = publicRate + 1.5;\r\n        console.log(`✅ Public API successful! Adjusted Korea rate: ${koreaRate}%`);\r\n        return koreaRate;\r\n      }\r\n    } catch (apiError) {\r\n      console.log('❌ Public API failed:', apiError.message);\r\n    }\r\n    \r\n    // 방법 3: 다른 한국 금융 사이트 시도\r\n    try {\r\n      console.log('🌐 Method 3: Trying alternative Korean financial site...');\r\n      const alternativeUrl = 'https://www.investing.com/rates-bonds/south-korea-10-year-bond-yield';\r\n      \r\n      const html = await fetchWithProxy(alternativeUrl);\r\n      \r\n      // 간단한 패턴 매칭으로 수익률 추출\r\n      const yieldPattern = /(\\d+\\.\\d+)%/;\r\n      const match = html.match(yieldPattern);\r\n      \r\n      if (match) {\r\n        const rate = parseFloat(match[1]);\r\n        console.log(`✅ Alternative site successful! Korea bond yield: ${rate}%`);\r\n        return rate;\r\n      }\r\n    } catch (altError) {\r\n      console.log('❌ Alternative site failed:', altError.message);\r\n    }\r\n    \r\n    console.log('❌ All methods failed for Korea bond yield');\r\n    return null;\r\n  } catch (error) {\r\n    console.error('❌ Error fetching Korea bond yield:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 2024년 12월 기준 최신 더미 데이터 (실제 시장 상황 반영)\r\nconst DUMMY_FIXED_INCOME_DATA = [\r\n  // Standard Interest Rates (기준 금리) - 2024년 12월 기준\r\n  { title: '미국 기준 금리', value: 4.375, change: 0.00, isPositive: true, symbol: 'FEDFUNDS' },\r\n  { title: '유로 기준 금리', value: 4.50, change: 0.00, isPositive: true, symbol: 'ECBREFI' },\r\n  { title: '일본 기준 금리', value: -0.10, change: 0.00, isPositive: false, symbol: 'BOJDF' },\r\n  { title: '한국 기준 금리', value: 2.50, change: 0.00, isPositive: true, symbol: 'KORREPO' },\r\n  { title: '스위스 기준 금리', value: 1.75, change: 0.00, isPositive: true, symbol: 'SNBREFI' },\r\n  { title: '영국 기준 금리', value: 5.25, change: 0.00, isPositive: true, symbol: 'BOEREFI' },\r\n  { title: '호주 기준 금리', value: 4.35, change: 0.00, isPositive: true, symbol: 'RBAREFI' },\r\n  { title: '브라질 기준 금리', value: 12.25, change: 0.00, isPositive: true, symbol: 'BRAREFI' },\r\n  \r\n  // US Bond Yields - 2024년 12월 기준 최신 수익률\r\n  { title: 'US 3M', value: 5.45, change: 0.02, isPositive: true, symbol: 'US3M' },\r\n  { title: 'US 2Y', value: 4.78, change: 0.05, isPositive: true, symbol: 'US2Y' },\r\n  { title: 'US 10Y', value: 4.25, change: 0.08, isPositive: true, symbol: 'US10Y' },\r\n  { title: 'US 30Y', value: 4.45, change: 0.12, isPositive: true, symbol: 'US30Y' },\r\n  \r\n  // Korea Bond Yields - 2024년 12월 기준 최신 수익률\r\n  { title: 'Korea 2Y', value: 3.45, change: 0.03, isPositive: true, symbol: 'KR2Y' },\r\n  { title: 'Korea 3Y', value: 3.52, change: 0.04, isPositive: true, symbol: 'KR3Y' },\r\n  { title: 'Korea 5Y', value: 3.68, change: 0.06, isPositive: true, symbol: 'KR5Y' },\r\n  { title: 'Korea 10Y', value: 3.85, change: 0.08, isPositive: true, symbol: 'KR10Y' },\r\n  { title: 'Korea 30Y', value: 4.12, change: 0.10, isPositive: true, symbol: 'KR30Y' },\r\n  \r\n  // Japan Bond Yields - 2024년 12월 기준 최신 수익률\r\n  { title: 'Japan 2Y', value: 0.12, change: 0.01, isPositive: true, symbol: 'JP2Y' },\r\n  { title: 'Japan 3Y', value: 0.15, change: 0.02, isPositive: true, symbol: 'JP3Y' },\r\n  { title: 'Japan 5Y', value: 0.25, change: 0.03, isPositive: true, symbol: 'JP5Y' },\r\n  { title: 'Japan 10Y', value: 0.45, change: 0.05, isPositive: true, symbol: 'JP10Y' },\r\n  { title: 'Japan 30Y', value: 1.25, change: 0.08, isPositive: true, symbol: 'JP30Y' },\r\n  \r\n  // Germany Bond Yields - 2024년 12월 기준 최신 수익률\r\n  { title: 'Germany 2Y', value: 3.12, change: 0.04, isPositive: true, symbol: 'DE2Y' },\r\n  { title: 'Germany 3Y', value: 3.25, change: 0.05, isPositive: true, symbol: 'DE3Y' },\r\n  { title: 'Germany 5Y', value: 3.45, change: 0.06, isPositive: true, symbol: 'DE5Y' },\r\n  { title: 'Germany 10Y', value: 2.85, change: 0.08, isPositive: true, symbol: 'DE10Y' },\r\n  { title: 'Germany 30Y', value: 3.15, change: 0.10, isPositive: true, symbol: 'DE30Y' }\r\n];\r\n\r\n// 실시간 데이터 시뮬레이션 (더미 데이터에 약간의 변동 추가)\r\nconst generateRealTimeData = () => {\r\n  return DUMMY_FIXED_INCOME_DATA.map(item => {\r\n    // 약간의 랜덤 변동 추가 (±0.05% 범위)\r\n    const variation = (Math.random() - 0.5) * 0.1;\r\n    const newValue = item.value + variation;\r\n    const newChange = variation;\r\n    \r\n    return {\r\n      ...item,\r\n      value: Math.round(newValue * 100) / 100,\r\n      change: Math.round(newChange * 100) / 100,\r\n      isPositive: newChange >= 0\r\n    };\r\n  });\r\n};\r\n\r\n// 기준 금리 데이터 가져오기 (실시간 시뮬레이션)\r\nexport const fetchInterestRates = async () => {\r\n  try {\r\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\r\n    const realTimeData = generateRealTimeData();\r\n    return realTimeData.filter(item => item.title.includes('기준 금리'));\r\n  } catch (error) {\r\n    console.error('Error fetching interest rates:', error);\r\n    return DUMMY_FIXED_INCOME_DATA.filter(item => item.title.includes('기준 금리'));\r\n  }\r\n};\r\n\r\n// 채권 수익률 데이터 가져오기 (실시간 시뮬레이션)\r\nexport const fetchBondYields = async () => {\r\n  try {\r\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\r\n    const realTimeData = generateRealTimeData();\r\n    return realTimeData.filter(item => !item.title.includes('기준 금리'));\r\n  } catch (error) {\r\n    console.error('Error fetching bond yields:', error);\r\n    return DUMMY_FIXED_INCOME_DATA.filter(item => !item.title.includes('기준 금리'));\r\n  }\r\n};\r\n\r\n// 모든 Fixed Income 데이터 가져오기 (실시간 시뮬레이션)\r\nexport const fetchAllFixedIncomeData = async () => {\r\n  try {\r\n    // 실시간 시뮬레이션으로 데이터 생성\r\n    const realTimeData = generateRealTimeData();\r\n    return realTimeData;\r\n  } catch (error) {\r\n    console.error('Error fetching all fixed income data:', error);\r\n    return DUMMY_FIXED_INCOME_DATA;\r\n  }\r\n};\r\n\r\n// Trading Economics URL 매핑 (실제 웹사이트 링크)\r\nexport const TRADING_ECONOMICS_URLS = {\r\n  // 기준 금리 - 실제 Trading Economics 페이지\r\n  '미국 기준 금리': 'https://tradingeconomics.com/united-states/interest-rate',\r\n  '유로 기준 금리': 'https://tradingeconomics.com/euro-area/interest-rate',\r\n  '일본 기준 금리': 'https://tradingeconomics.com/japan/interest-rate',\r\n  '한국 기준 금리': 'https://tradingeconomics.com/south-korea/interest-rate',\r\n  '스위스 기준 금리': 'https://tradingeconomics.com/switzerland/interest-rate',\r\n  '영국 기준 금리': 'https://tradingeconomics.com/united-kingdom/interest-rate',\r\n  '호주 기준 금리': 'https://tradingeconomics.com/australia/interest-rate',\r\n  '브라질 기준 금리': 'https://tradingeconomics.com/brazil/interest-rate',\r\n  \r\n  // US Bond Yields - 실제 Trading Economics 페이지\r\n  'US 3M': 'https://tradingeconomics.com/united-states/government-bond-yield',\r\n  'US 2Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\r\n  'US 10Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\r\n  'US 30Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\r\n  \r\n  // Korea Bond Yields - 실제 Trading Economics 페이지\r\n  'Korea 2Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 3Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 5Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 10Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 30Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  \r\n  // Japan Bond Yields - 실제 Trading Economics 페이지\r\n  'Japan 2Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 3Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 5Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 10Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 30Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  \r\n  // Germany Bond Yields - 실제 Trading Economics 페이지\r\n  'Germany 2Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 3Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 5Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 10Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 30Y': 'https://tradingeconomics.com/germany/government-bond-yield'\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}