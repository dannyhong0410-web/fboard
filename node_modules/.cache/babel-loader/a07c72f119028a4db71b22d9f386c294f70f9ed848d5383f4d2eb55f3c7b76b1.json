{"ast":null,"code":"import _objectSpread from\"C:/Users/\\uD64D\\uC131\\uAD00/Desktop/FBoard/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Macro Economics 데이터를 가져오는 서비스\nconst BASE_URL='https://query1.finance.yahoo.com/v8/finance/chart';// Macro 지표 심볼 매핑\nconst MACRO_SYMBOLS={'Korea GDP Growth':'KOREA_GDP_GROWTH','S&P 500 Annual Dividend Futures':'^SP500DIV','World Citi Economic Surprise Index':'CITI_SURPRISE','5-Year 5-Year Forward Inflation Expectation Rate':'T5YIFR','US Core Inflation Rate YoY':'US_CORE_INFLATION','US Core PCE YoY':'US_CORE_PCE','US Core PPI YoY':'US_CORE_PPI','US Money Supply M2':'US_M2','US SOFR':'US_SOFR','US 30Y Mortgage Rate':'US_30Y_MORTGAGE','US New House Price':'US_NEW_HOUSE_PRICE','Korea Export Import':'KOREA_EXPORT_IMPORT','US Non Farm Payrolls':'US_NON_FARM_PAYROLLS','US Unemployment Rate':'US_UNEMPLOYMENT_RATE'};// 외부 URL 매핑\nexport const EXTERNAL_URLS={'Korea GDP Growth':'https://tradingeconomics.com/south-korea/gdp-growth-annual','S&P 500 Annual Dividend Futures':'https://finance.yahoo.com/quote/%5ESP500DIV','World Citi Economic Surprise Index':'https://en.macromicro.me/charts/45866/global-citi-surprise-index','5-Year 5-Year Forward Inflation Expectation Rate':'https://fred.stlouisfed.org/series/T5YIFR','US Core Inflation Rate YoY':'https://tradingeconomics.com/united-states/core-inflation-rate','US Core PCE YoY':'https://tradingeconomics.com/united-states/core-pce-price-index-annual-change','US Core PPI YoY':'https://tradingeconomics.com/united-states/core-producer-prices-yoy','US Money Supply M2':'https://tradingeconomics.com/united-states/money-supply-m2','US SOFR':'https://tradingeconomics.com/united-states/secured-overnight-financing-rate','US 30Y Mortgage Rate':'https://tradingeconomics.com/united-states/30-year-mortgage-rate','US New House Price':'https://tradingeconomics.com/united-states/average-house-prices','Korea Export Import':'https://www.index.go.kr/unity/potal/main/EachDtlPageDetail.do?idx_cd=1066','US Non Farm Payrolls':'https://tradingeconomics.com/united-states/non-farm-payrolls','US Unemployment Rate':'https://tradingeconomics.com/united-states/unemployment-rate?c=usd&v=2024&d1=20140101&d2=20241231&h=10y'};// 프록시 서버들을 사용한 웹 스크래핑\nconst PROXY_SERVICES=['https://api.allorigins.win/raw?url=','https://corsproxy.io/?','https://thingproxy.freeboard.io/fetch/','https://cors.bridged.cc/','https://api.codetabs.com/v1/proxy?quest=','https://cors.eu.org/','https://cors-anywhere.herokuapp.com/','https://api.codetabs.com/v1/proxy?quest=','https://cors.bridged.cc/','https://thingproxy.freeboard.io/fetch/','https://corsproxy.io/?','https://api.allorigins.win/raw?url=','https://cors-anywhere.herokuapp.com/','https://api.allorigins.win/raw?url=','https://corsproxy.io/?','https://thingproxy.freeboard.io/fetch/','https://cors.bridged.cc/','https://api.codetabs.com/v1/proxy?quest=','https://cors.eu.org/',''// 직접 호출도 시도\n];// 프록시를 사용한 웹 스크래핑\nconst fetchWithProxy=async function(url){let proxyIndex=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;if(proxyIndex>=PROXY_SERVICES.length){throw new Error('All proxy attempts failed');}try{const proxyUrl=PROXY_SERVICES[proxyIndex]+url;console.log(\"\\uD83D\\uDD17 Trying proxy \".concat(proxyIndex+1,\"/\").concat(PROXY_SERVICES.length,\": \").concat(proxyUrl.substring(0,80),\"...\"));const response=await fetch(proxyUrl,{method:'GET',headers:{'Accept':'application/json,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36','Accept-Language':'en-US,en;q=0.9,ko;q=0.8','Accept-Encoding':'gzip, deflate, br','Connection':'keep-alive','Upgrade-Insecure-Requests':'1','Cache-Control':'no-cache','Pragma':'no-cache'},timeout:15000// 15초 타임아웃\n});console.log(\"\\uD83D\\uDCCA Response status: \".concat(response.status));console.log(\"\\uD83D\\uDCCA Response headers:\",Object.fromEntries(response.headers.entries()));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status,\" - \").concat(response.statusText));}const data=await response.text();console.log(\"\\uD83D\\uDCCA Response data length: \".concat(data.length,\" characters\"));if(data.length<100){console.log(\"\\uD83D\\uDCC4 Short response data: \".concat(data));throw new Error('Response too short, likely an error page');}// 에러 페이지인지 확인\nif(data.includes('error')||data.includes('Error')||data.includes('ERROR')){console.log('⚠️ Response contains error indicators');console.log('📄 Error response preview:',data.substring(0,500));}// CORS 에러인지 확인\nif(data.includes('CORS')||data.includes('cors')||data.includes('Access-Control')){console.log('⚠️ Response contains CORS error indicators');console.log('📄 CORS error preview:',data.substring(0,500));}console.log(\"\\u2705 Proxy \".concat(proxyIndex+1,\" successful! Data length: \").concat(data.length,\" characters\"));return data;}catch(error){console.log(\"\\u274C Proxy \".concat(proxyIndex+1,\" failed: \").concat(error.message));console.log(\"\\uD83D\\uDD0D Error details:\",error);// 마지막 프록시가 아니면 다음 프록시 시도\nif(proxyIndex<PROXY_SERVICES.length-1){console.log(\"\\uD83D\\uDD04 Retrying with next proxy...\");return fetchWithProxy(url,proxyIndex+1);}else{throw new Error(\"All \".concat(PROXY_SERVICES.length,\" proxies failed. Last error: \").concat(error.message));}}};// 2024년 12월 기준 최신 더미 데이터 (실제 시장 상황 반영)\nconst DUMMY_MACRO_DATA=[{title:'Korea GDP Growth',value:2.1,change:0.00,isPositive:true,symbol:'KOREA_GDP_GROWTH',unit:'%',description:'한국 GDP 성장률'},{title:'S&P 500 Annual Dividend Futures',value:2.15,change:0.05,isPositive:true,symbol:'^SP500DIV',unit:'%',description:'S&P 500 연간 배당률 선물'},{title:'World Citi Economic Surprise Index',value:13.40,// 실제 MacroMicro 사이트에서 확인한 값으로 업데이트\nchange:-0.90,// 13.40 - 14.30 = -0.90\nisPositive:true,symbol:'CITI_SURPRISE',unit:'',description:'글로벌 경제 서프라이즈 지수'},{title:'5-Year 5-Year Forward Inflation Expectation Rate',value:2.33,// FRED에서 확인한 실제 값으로 업데이트\nchange:-0.01,isPositive:true,symbol:'T5YIFR',unit:'%',description:'5년 후 5년 인플레이션 기대율'},{title:'US Core Inflation Rate YoY',value:3.2,change:-0.1,isPositive:false,symbol:'US_CORE_INFLATION',unit:'%',description:'미국 핵심 인플레이션률 (전년 동기 대비)'},{title:'US Core PCE YoY',value:2.9,change:-0.2,isPositive:false,symbol:'US_CORE_PCE',unit:'%',description:'미국 핵심 PCE 물가지수 (전년 동기 대비)'},{title:'US Core PPI YoY',value:2.4,change:-0.3,isPositive:false,symbol:'US_CORE_PPI',unit:'%',description:'미국 핵심 PPI 물가지수 (전년 동기 대비)'},{title:'US Money Supply M2',value:20.8,change:-2.1,isPositive:false,symbol:'US_M2',unit:'',description:'미국 M2 통화량 (전년 동기 대비)'},{title:'US SOFR',value:5.33,change:0.00,isPositive:true,symbol:'US_SOFR',unit:'%',description:'미국 담보부 하루물 금리'},{title:'US 30Y Mortgage Rate',value:7.15,change:0.00,isPositive:true,symbol:'US_30Y_MORTGAGE',unit:'%',description:'미국 30년 주택담보대출 금리'},{title:'US New House Price',value:400000,// 더미 데이터\nchange:0.00,isPositive:true,symbol:'US_NEW_HOUSE_PRICE',unit:'$',description:'미국 신축 주택 평균 가격'},{title:'Korea Export Import',value:1250.8,// 더미 데이터 (단위: 억 달러)\nchange:0.00,isPositive:true,symbol:'KOREA_EXPORT_IMPORT',unit:'억$',description:'한국 수출입 실적'},{title:'US Non Farm Payrolls',value:199.0,// 더미 데이터 (단위: 천 명)\nchange:0.00,isPositive:true,symbol:'US_NON_FARM_PAYROLLS',unit:'천명',description:'미국 비농업 고용 지표'},{title:'US Unemployment Rate',value:3.7,// 더미 데이터 (단위: %)\nchange:0.00,isPositive:false,symbol:'US_UNEMPLOYMENT_RATE',unit:'%',description:'미국 실업률'}];// S&P 500 Annual Dividend Futures 가져오기 (Yahoo Finance)\nexport const fetchSP500DividendFutures=async()=>{try{console.log('🔄 Fetching S&P 500 Annual Dividend Futures from Yahoo Finance...');const symbol='^SP500DIV';const url=\"\".concat(BASE_URL,\"/\").concat(symbol,\"?interval=1d&range=1d\");console.log(\"\\uD83D\\uDD17 URL: \".concat(url));const data=await fetchWithProxy(url);if(!data){throw new Error('Failed to fetch data');}// JSON 파싱 시도\nlet jsonData;try{jsonData=JSON.parse(data);}catch(error){console.log('❌ Failed to parse JSON, using dummy data');throw new Error('Invalid JSON response');}// Yahoo Finance API 응답 구조에서 데이터 추출\nif(jsonData.chart&&jsonData.chart.result&&jsonData.chart.result[0]){const result=jsonData.chart.result[0];const meta=result.meta;if(meta){const currentPrice=meta.regularMarketPrice;const previousClose=meta.previousClose;const change=currentPrice-previousClose;console.log(\"\\u2705 Successfully fetched S&P 500 Dividend Futures: \".concat(currentPrice,\"% (\").concat(change>=0?'+':'').concat(change.toFixed(2),\")\"));return{title:'S&P 500 Annual Dividend Futures',value:currentPrice,change:Math.round(change*100)/100,isPositive:change>=0,symbol:symbol,unit:'%',description:'S&P 500 연간 배당률 선물',isRealData:true,dataSource:'Yahoo Finance'};}}throw new Error('No valid data found for S&P 500 Dividend Futures');}catch(error){console.error('❌ Error fetching S&P 500 Dividend Futures:',error.message);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='S&P 500 Annual Dividend Futures');if(dummyData){console.log('📊 Using dummy data for S&P 500 Dividend Futures');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)'});}throw error;}};// World Citi Economic Surprise Index 가져오기 (MacroMicro)\nexport const fetchCitiEconomicSurpriseIndex=async()=>{try{console.log('🔄 Fetching World Citi Economic Surprise Index from MacroMicro...');const url='https://en.macromicro.me/charts/45866/global-citi-surprise-index';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));// 여러 방법으로 시도\nlet data=null;let lastError=null;// 방법 1: 프록시 서버들 시도\ntry{data=await fetchWithProxy(url);console.log('✅ Successfully fetched data using proxy');}catch(error){console.log('❌ Proxy method failed:',error.message);lastError=error;}// 방법 2: 직접 fetch 시도 (CORS 우회)\nif(!data){try{console.log('🔄 Trying direct fetch...');const response=await fetch(url,{method:'GET',mode:'cors',headers:{'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36','Accept-Language':'en-US,en;q=0.9,ko;q=0.8','Cache-Control':'no-cache'}});if(response.ok){data=await response.text();console.log('✅ Successfully fetched data using direct fetch');}else{throw new Error(\"Direct fetch failed: \".concat(response.status));}}catch(error){console.log('❌ Direct fetch failed:',error.message);lastError=error;}}// 방법 3: JSONP 방식 시도 (MacroMicro에서 지원하는 경우)\nif(!data){try{console.log('🔄 Trying JSONP approach...');// JSONP는 동적 스크립트 로딩을 통해 CORS를 우회\nconst script=document.createElement('script');script.src=url+'?callback=handleMacroData';// 전역 콜백 함수 정의\nwindow.handleMacroData=function(jsonData){console.log('✅ JSONP callback received:',jsonData);data=JSON.stringify(jsonData);};document.head.appendChild(script);// 5초 대기\nawait new Promise(resolve=>setTimeout(resolve,5000));if(data){console.log('✅ Successfully fetched data using JSONP');}else{throw new Error('JSONP timeout');}}catch(error){console.log('❌ JSONP method failed:',error.message);lastError=error;}}if(!data){console.log('❌ All methods failed, using dummy data');console.log('🔍 Last error:',lastError);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='World Citi Economic Surprise Index');if(dummyData){console.log('📊 Using dummy data for Citi Economic Surprise Index');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (All methods failed)'});}throw new Error('All data fetching methods failed');}console.log(\"\\uD83D\\uDCC4 Total HTML length: \".concat(data.length,\" characters\"));console.log('📄 HTML Preview (first 3000 chars):',data.substring(0,3000));// \"Latest Stats\" 텍스트 찾기\nconst latestStatsIndex=data.indexOf('Latest Stats');if(latestStatsIndex===-1){console.log('❌ \"Latest Stats\" text not found');console.log('🔍 Searching for alternative patterns...');// 대안 패턴들 시도\nconst alternativePatterns=['Latest Stats','latest stats','LATEST STATS','Latest Statistics','Statistics','Stats'];for(const pattern of alternativePatterns){const index=data.indexOf(pattern);if(index!==-1){console.log(\"\\u2705 Found alternative pattern: \\\"\".concat(pattern,\"\\\" at index \").concat(index));break;}}// HTML에서 \"Citigroup\" 관련 텍스트 찾기\nconst citigroupIndex=data.indexOf('Citigroup');if(citigroupIndex!==-1){console.log(\"\\u2705 Found \\\"Citigroup\\\" at index \".concat(citigroupIndex));console.log('📄 Context around Citigroup:',data.substring(citigroupIndex-100,citigroupIndex+200));}throw new Error('Latest Stats section not found');}console.log(\"\\u2705 Found \\\"Latest Stats\\\" section at index \".concat(latestStatsIndex));// \"Latest Stats\" 이후의 HTML에서 \"Citigroup Economic Surprise Index: Global\" 찾기\nconst afterLatestStats=data.substring(latestStatsIndex);console.log('📄 After Latest Stats (first 1000 chars):',afterLatestStats.substring(0,1000));const citiIndexIndex=afterLatestStats.indexOf('Citigroup Economic Surprise Index: Global');if(citiIndexIndex===-1){console.log('❌ \"Citigroup Economic Surprise Index: Global\" text not found');console.log('🔍 Searching for alternative Citigroup patterns...');// 대안 패턴들 시도\nconst citigroupPatterns=['Citigroup Economic Surprise Index: Global','Citigroup Economic Surprise Index','Economic Surprise Index: Global','Economic Surprise Index','Surprise Index: Global','Surprise Index'];for(const pattern of citigroupPatterns){const index=afterLatestStats.indexOf(pattern);if(index!==-1){console.log(\"\\u2705 Found alternative pattern: \\\"\".concat(pattern,\"\\\" at index \").concat(index));console.log('📄 Context around pattern:',afterLatestStats.substring(index-50,index+200));break;}}throw new Error('Citigroup Economic Surprise Index: Global not found');}console.log(\"\\u2705 Found \\\"Citigroup Economic Surprise Index: Global\\\" text at index \".concat(citiIndexIndex));// \"Citigroup Economic Surprise Index: Global\" 이후의 HTML에서 날짜와 값 찾기\nconst afterCitiIndex=afterLatestStats.substring(citiIndexIndex);console.log('📄 After Citigroup pattern (first 500 chars):',afterCitiIndex.substring(0,500));// YYYY-MM-DD 패턴 찾기\nconst datePattern=/\\d{4}-\\d{2}-\\d{2}/;const dateMatch=afterCitiIndex.match(datePattern);if(!dateMatch){console.log('❌ Date pattern not found');console.log('🔍 Searching for any date-like patterns...');// 다른 날짜 패턴들 시도\nconst datePatterns=[/\\d{4}-\\d{2}-\\d{2}/,// YYYY-MM-DD\n/\\d{2}-\\d{2}-\\d{4}/,// MM-DD-YYYY\n/\\d{4}\\/\\d{2}\\/\\d{2}/,// YYYY/MM/DD\n/\\d{2}\\/\\d{2}\\/\\d{4}/// MM/DD/YYYY\n];for(const pattern of datePatterns){const match=afterCitiIndex.match(pattern);if(match){console.log(\"\\u2705 Found date pattern: \".concat(match[0]));break;}}throw new Error('Date pattern not found');}const dateFound=dateMatch[0];console.log(\"\\u2705 Found date: \".concat(dateFound));// 날짜 이후의 HTML에서 숫자 값 찾기 (더 정확한 패턴)\nconst dateIndex=afterCitiIndex.indexOf(dateFound);const afterDate=afterCitiIndex.substring(dateIndex+dateFound.length);console.log('📄 After date (first 300 chars):',afterDate.substring(0,300));// 숫자 패턴 찾기 (소수점 포함, 더 정확한 매칭)\nconst numberPattern=/[-+]?\\d+\\.\\d+/;const numberMatch=afterDate.match(numberPattern);if(!numberMatch){console.log('❌ Number value not found after date');console.log('🔍 Searching for any number patterns...');// 다른 숫자 패턴들 시도\nconst numberPatterns=[/[-+]?\\d+\\.\\d+/,// 소수점 포함\n/[-+]?\\d+/,// 정수만\n/\\d+\\.\\d+/// 양수 소수점\n];for(const pattern of numberPatterns){const match=afterDate.match(pattern);if(match){console.log(\"\\u2705 Found number pattern: \".concat(match[0]));break;}}throw new Error('Number value not found after date');}const currentValue=parseFloat(numberMatch[0]);console.log(\"\\u2705 Successfully extracted Citi Economic Surprise Index: \".concat(currentValue));// 이전 값도 찾아보기 (Prev: 패턴)\nconst prevPattern=/Prev:\\s*([-+]?\\d+\\.\\d+)/;const prevMatch=afterDate.match(prevPattern);let change=0.00;if(prevMatch){const prevValue=parseFloat(prevMatch[1]);change=currentValue-prevValue;console.log(\"\\u2705 Found previous value: \".concat(prevValue,\", change: \").concat(change));}else{console.log('⚠️ Previous value not found, using 0.00 for change');}return{title:'World Citi Economic Surprise Index',value:currentValue,change:Math.round(change*100)/100,isPositive:currentValue>=0,symbol:'CITI_SURPRISE',unit:'',description:'글로벌 경제 서프라이즈 지수',isRealData:true,dataSource:'MacroMicro'};}catch(error){console.error('❌ Error fetching Citi Economic Surprise Index:',error.message);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='World Citi Economic Surprise Index');if(dummyData){console.log('📊 Using dummy data for Citi Economic Surprise Index');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)'});}throw error;}};// 5-Year 5-Year Forward Inflation Expectation Rate 가져오기 (FRED)\nexport const fetchInflationExpectationRate=async()=>{try{console.log('🔄 Fetching 5-Year 5-Year Forward Inflation Expectation Rate from FRED...');const url='https://fred.stlouisfed.org/series/T5YIFR';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));const data=await fetchWithProxy(url);if(!data){throw new Error('Failed to fetch data');}// FRED 페이지에서 데이터 추출 시도\nconsole.log('📄 HTML Preview:',data.substring(0,1000));// FRED 페이지에서 최신 값 추출 (2025-08-12: 2.33 형태)\nconst latestValueMatch=data.match(/2025-\\d{2}-\\d{2}:\\s*(\\d+\\.\\d+)/);if(latestValueMatch){const currentValue=parseFloat(latestValueMatch[1]);console.log(\"\\u2705 Successfully extracted inflation expectation rate: \".concat(currentValue,\"%\"));return{title:'5-Year 5-Year Forward Inflation Expectation Rate',value:currentValue,change:0.00,// FRED에서는 변화량을 직접 제공하지 않으므로 0으로 설정\nisPositive:true,symbol:'T5YIFR',unit:'%',description:'5년 후 5년 인플레이션 기대율',isRealData:true,dataSource:'FRED (Federal Reserve Economic Data)'};}// 임시로 더미 데이터 반환\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='5-Year 5-Year Forward Inflation Expectation Rate');if(dummyData){console.log('📊 Using dummy data for Inflation Expectation Rate (parsing not implemented)');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Parsing not implemented)'});}throw new Error('No valid data found for Inflation Expectation Rate');}catch(error){console.error('❌ Error fetching Inflation Expectation Rate:',error.message);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='5-Year 5-Year Forward Inflation Expectation Rate');if(dummyData){console.log('📊 Using dummy data for Inflation Expectation Rate');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)'});}throw error;}};// US Core Inflation Rate YoY 가져오기 (Trading Economics)\nexport const fetchUSCoreInflationRate=async()=>{try{console.log('🔄 Fetching US Core Inflation Rate YoY from Trading Economics...');const url='https://tradingeconomics.com/united-states/core-inflation-rate';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));// 여러 방법으로 시도\nlet data=null;let lastError=null;// 방법 1: 프록시 서버들 시도\ntry{data=await fetchWithProxy(url);console.log('✅ Successfully fetched data using proxy');}catch(error){console.log('❌ Proxy method failed:',error.message);lastError=error;}// 방법 2: 직접 fetch 시도 (CORS 우회)\nif(!data){try{console.log('🔄 Trying direct fetch...');const response=await fetch(url,{method:'GET',mode:'cors',headers:{'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36','Accept-Language':'en-US,en;q=0.9,ko;q=0.8','Cache-Control':'no-cache'}});if(response.ok){data=await response.text();console.log('✅ Successfully fetched data using direct fetch');}else{throw new Error(\"Direct fetch failed: \".concat(response.status));}}catch(error){console.log('❌ Direct fetch failed:',error.message);lastError=error;}}if(!data){console.log('❌ All methods failed, using dummy data');console.log('🔍 Last error:',lastError);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US Core Inflation Rate YoY');if(dummyData){console.log('📊 Using dummy data for US Core Inflation Rate');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (All methods failed)'});}throw new Error('All data fetching methods failed');}console.log(\"\\uD83D\\uDCC4 Total HTML length: \".concat(data.length,\" characters\"));console.log('📄 HTML Preview (first 3000 chars):',data.substring(0,3000));// Trading Economics 페이지에서 데이터 추출 시도\n// \"Core Inflation Rate\" 텍스트 찾기\nconst coreInflationIndex=data.indexOf('Core Inflation Rate');if(coreInflationIndex===-1){console.log('❌ \"Core Inflation Rate\" text not found');console.log('🔍 Searching for alternative patterns...');// 대안 패턴들 시도\nconst alternativePatterns=['Core Inflation Rate','core inflation rate','CORE INFLATION RATE','Inflation Rate','inflation rate'];for(const pattern of alternativePatterns){const index=data.indexOf(pattern);if(index!==-1){console.log(\"\\u2705 Found alternative pattern: \\\"\".concat(pattern,\"\\\" at index \").concat(index));console.log('📄 Context around pattern:',data.substring(index-100,index+200));break;}}throw new Error('Core Inflation Rate section not found');}console.log(\"\\u2705 Found \\\"Core Inflation Rate\\\" at index \".concat(coreInflationIndex));// \"Core Inflation Rate\" 이후의 HTML에서 숫자 값 찾기\nconst afterCoreInflation=data.substring(coreInflationIndex);console.log('📄 After Core Inflation Rate (first 1000 chars):',afterCoreInflation.substring(0,1000));// 숫자 패턴 찾기 (소수점 포함)\nconst numberPattern=/[-+]?\\d+\\.\\d+/;const numberMatch=afterCoreInflation.match(numberPattern);if(!numberMatch){console.log('❌ Number value not found');console.log('🔍 Searching for any number patterns...');// 다른 숫자 패턴들 시도\nconst numberPatterns=[/[-+]?\\d+\\.\\d+/,// 소수점 포함\n/[-+]?\\d+/,// 정수만\n/\\d+\\.\\d+/// 양수 소수점\n];for(const pattern of numberPatterns){const match=afterCoreInflation.match(pattern);if(match){console.log(\"\\u2705 Found number pattern: \".concat(match[0]));break;}}throw new Error('Number value not found');}const currentValue=parseFloat(numberMatch[0]);console.log(\"\\u2705 Successfully extracted US Core Inflation Rate: \".concat(currentValue,\"%\"));// 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US Core Inflation Rate YoY');const change=dummyData?dummyData.change:0.00;return{title:'US Core Inflation Rate YoY',value:currentValue,change:change,isPositive:change>=0,symbol:'US_CORE_INFLATION',unit:'%',description:'미국 핵심 인플레이션률 (전년 동기 대비)',isRealData:true,dataSource:'Trading Economics'};}catch(error){console.error('❌ Error fetching US Core Inflation Rate:',error.message);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US Core Inflation Rate YoY');if(dummyData){console.log('📊 Using dummy data for US Core Inflation Rate');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)'});}throw error;}};// US Core PCE YoY 가져오기 (Trading Economics)\nexport const fetchUSCorePCE=async()=>{try{console.log('🔄 Fetching US Core PCE YoY from Trading Economics...');const url='https://tradingeconomics.com/united-states/core-pce-price-index-annual-change';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));// 여러 방법으로 시도\nlet data=null;let lastError=null;// 방법 1: 프록시 서버들 시도\ntry{data=await fetchWithProxy(url);console.log('✅ Successfully fetched data using proxy');}catch(error){console.log('❌ Proxy method failed:',error.message);lastError=error;}// 방법 2: 직접 fetch 시도 (CORS 우회)\nif(!data){try{console.log('🔄 Trying direct fetch...');const response=await fetch(url,{method:'GET',mode:'cors',headers:{'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36','Accept-Language':'en-US,en;q=0.9,ko;q=0.8','Cache-Control':'no-cache'}});if(response.ok){data=await response.text();console.log('✅ Successfully fetched data using direct fetch');}else{throw new Error(\"Direct fetch failed: \".concat(response.status));}}catch(error){console.log('❌ Direct fetch failed:',error.message);lastError=error;}}if(!data){console.log('❌ All methods failed, using dummy data');console.log('🔍 Last error:',lastError);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US Core PCE YoY');if(dummyData){console.log('📊 Using dummy data for US Core PCE');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (All methods failed)'});}throw new Error('All data fetching methods failed');}console.log(\"\\uD83D\\uDCC4 Total HTML length: \".concat(data.length,\" characters\"));console.log('📄 HTML Preview (first 3000 chars):',data.substring(0,3000));// Trading Economics 페이지에서 데이터 추출 시도\n// \"Core PCE Price Index\" 텍스트 찾기\nconst corePCEIndex=data.indexOf('Core PCE Price Index');if(corePCEIndex===-1){console.log('❌ \"Core PCE Price Index\" text not found');console.log('🔍 Searching for alternative patterns...');// 대안 패턴들 시도\nconst alternativePatterns=['Core PCE Price Index','core pce price index','CORE PCE PRICE INDEX','PCE Price Index','pce price index','PCE','pce'];for(const pattern of alternativePatterns){const index=data.indexOf(pattern);if(index!==-1){console.log(\"\\u2705 Found alternative pattern: \\\"\".concat(pattern,\"\\\" at index \").concat(index));console.log('📄 Context around pattern:',data.substring(index-100,index+200));break;}}throw new Error('Core PCE Price Index section not found');}console.log(\"\\u2705 Found \\\"Core PCE Price Index\\\" at index \".concat(corePCEIndex));// \"Core PCE Price Index\" 이후의 HTML에서 숫자 값 찾기\nconst afterCorePCE=data.substring(corePCEIndex);console.log('📄 After Core PCE Price Index (first 1000 chars):',afterCorePCE.substring(0,1000));// 숫자 패턴 찾기 (소수점 포함)\nconst numberPattern=/[-+]?\\d+\\.\\d+/;const numberMatch=afterCorePCE.match(numberPattern);if(!numberMatch){console.log('❌ Number value not found');console.log('🔍 Searching for any number patterns...');// 다른 숫자 패턴들 시도\nconst numberPatterns=[/[-+]?\\d+\\.\\d+/,// 소수점 포함\n/[-+]?\\d+/,// 정수만\n/\\d+\\.\\d+/// 양수 소수점\n];for(const pattern of numberPatterns){const match=afterCorePCE.match(pattern);if(match){console.log(\"\\u2705 Found number pattern: \".concat(match[0]));break;}}throw new Error('Number value not found');}const currentValue=parseFloat(numberMatch[0]);console.log(\"\\u2705 Successfully extracted US Core PCE: \".concat(currentValue,\"%\"));// 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US Core PCE YoY');const change=dummyData?dummyData.change:0.00;return{title:'US Core PCE YoY',value:currentValue,change:change,isPositive:change>=0,symbol:'US_CORE_PCE',unit:'%',description:'미국 핵심 PCE 물가지수 (전년 동기 대비)',isRealData:true,dataSource:'Trading Economics'};}catch(error){console.error('❌ Error fetching US Core PCE:',error.message);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US Core PCE YoY');if(dummyData){console.log('📊 Using dummy data for US Core PCE');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)'});}throw error;}};// US Core PPI YoY 가져오기 (Trading Economics)\nexport const fetchUSCorePPI=async()=>{try{console.log('🔄 Fetching US Core PPI YoY from Trading Economics...');const url='https://tradingeconomics.com/united-states/core-producer-prices-yoy';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));// 여러 방법으로 시도\nlet data=null;let lastError=null;// 방법 1: 프록시 서버들 시도\ntry{data=await fetchWithProxy(url);console.log('✅ Successfully fetched data using proxy');}catch(error){console.log('❌ Proxy method failed:',error.message);lastError=error;}// 방법 2: 직접 fetch 시도 (CORS 우회)\nif(!data){try{console.log('🔄 Trying direct fetch...');const response=await fetch(url,{method:'GET',mode:'cors',headers:{'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36','Accept-Language':'en-US,en;q=0.9,ko;q=0.8','Cache-Control':'no-cache'}});if(response.ok){data=await response.text();console.log('✅ Successfully fetched data using direct fetch');}else{throw new Error(\"Direct fetch failed: \".concat(response.status));}}catch(error){console.log('❌ Direct fetch failed:',error.message);lastError=error;}}if(!data){console.log('❌ All methods failed, using dummy data');console.log('🔍 Last error:',lastError);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US Core PPI YoY');if(dummyData){console.log('📊 Using dummy data for US Core PPI');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (All methods failed)'});}throw new Error('All data fetching methods failed');}console.log(\"\\uD83D\\uDCC4 Total HTML length: \".concat(data.length,\" characters\"));console.log('📄 HTML Preview (first 3000 chars):',data.substring(0,3000));// Trading Economics 페이지에서 데이터 추출 시도\n// \"Core PPI\" 텍스트 찾기\nconst corePPIIndex=data.indexOf('Core PPI');if(corePPIIndex===-1){console.log('❌ \"Core PPI\" text not found');console.log('🔍 Searching for alternative patterns...');// 대안 패턴들 시도\nconst alternativePatterns=['Core PPI','core ppi','CORE PPI','PPI','ppi'];for(const pattern of alternativePatterns){const index=data.indexOf(pattern);if(index!==-1){console.log(\"\\u2705 Found alternative pattern: \\\"\".concat(pattern,\"\\\" at index \").concat(index));console.log('📄 Context around pattern:',data.substring(index-100,index+200));break;}}throw new Error('Core PPI section not found');}console.log(\"\\u2705 Found \\\"Core PPI\\\" at index \".concat(corePPIIndex));// \"Core PPI\" 이후의 HTML에서 숫자 값 찾기\nconst afterCorePPI=data.substring(corePPIIndex);console.log('📄 After Core PPI (first 1000 chars):',afterCorePPI.substring(0,1000));// 숫자 패턴 찾기 (소수점 포함)\nconst numberPattern=/[-+]?\\d+\\.\\d+/;const numberMatch=afterCorePPI.match(numberPattern);if(!numberMatch){console.log('❌ Number value not found');console.log('🔍 Searching for any number patterns...');// 다른 숫자 패턴들 시도\nconst numberPatterns=[/[-+]?\\d+\\.\\d+/,// 소수점 포함\n/[-+]?\\d+/,// 정수만\n/\\d+\\.\\d+/// 양수 소수점\n];for(const pattern of numberPatterns){const match=afterCorePPI.match(pattern);if(match){console.log(\"\\u2705 Found number pattern: \".concat(match[0]));break;}}throw new Error('Number value not found');}const currentValue=parseFloat(numberMatch[0]);console.log(\"\\u2705 Successfully extracted US Core PPI: \".concat(currentValue,\"%\"));// 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US Core PPI YoY');const change=dummyData?dummyData.change:0.00;return{title:'US Core PPI YoY',value:currentValue,change:change,isPositive:change>=0,symbol:'US_CORE_PPI',unit:'%',description:'미국 핵심 PPI 물가지수 (전년 동기 대비)',isRealData:true,dataSource:'Trading Economics'};}catch(error){console.error('❌ Error fetching US Core PPI:',error.message);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US Core PPI YoY');if(dummyData){console.log('📊 Using dummy data for US Core PPI');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)'});}throw error;}};// US Money Supply M2 가져오기 (Trading Economics)\nexport const fetchUSMoneySupplyM2=async()=>{try{console.log('🔄 Fetching US Money Supply M2 from Trading Economics...');const url='https://tradingeconomics.com/united-states/money-supply-m2';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));// 여러 방법으로 시도\nlet data=null;let lastError=null;// 방법 1: 프록시 서버들 시도\ntry{data=await fetchWithProxy(url);console.log('✅ Successfully fetched data using proxy');}catch(error){console.log('❌ Proxy method failed:',error.message);lastError=error;}// 방법 2: 직접 fetch 시도 (CORS 우회)\nif(!data){try{console.log('🔄 Trying direct fetch...');const response=await fetch(url,{method:'GET',mode:'cors',headers:{'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36','Accept-Language':'en-US,en;q=0.9,ko;q=0.8','Cache-Control':'no-cache'}});if(response.ok){data=await response.text();console.log('✅ Successfully fetched data using direct fetch');}else{throw new Error(\"Direct fetch failed: \".concat(response.status));}}catch(error){console.log('❌ Direct fetch failed:',error.message);lastError=error;}}if(!data){console.log('❌ All methods failed, using dummy data');console.log('🔍 Last error:',lastError);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US Money Supply M2');if(dummyData){console.log('📊 Using dummy data for US Money Supply M2');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (All methods failed)'});}throw new Error('All data fetching methods failed');}console.log(\"\\uD83D\\uDCC4 Total HTML length: \".concat(data.length,\" characters\"));console.log('📄 HTML Preview (first 3000 chars):',data.substring(0,3000));// Trading Economics 페이지에서 데이터 추출 시도\n// \"Money Supply M2\" 텍스트 찾기\nconst moneySupplyIndex=data.indexOf('Money Supply M2');if(moneySupplyIndex===-1){console.log('❌ \"Money Supply M2\" text not found');console.log('🔍 Searching for alternative patterns...');// 대안 패턴들 시도\nconst alternativePatterns=['Money Supply M2','money supply m2','MONEY SUPPLY M2','Money Supply','money supply'];for(const pattern of alternativePatterns){const index=data.indexOf(pattern);if(index!==-1){console.log(\"\\u2705 Found alternative pattern: \\\"\".concat(pattern,\"\\\" at index \").concat(index));console.log('📄 Context around pattern:',data.substring(index-100,index+200));break;}}throw new Error('Money Supply M2 section not found');}console.log(\"\\u2705 Found \\\"Money Supply M2\\\" at index \".concat(moneySupplyIndex));// \"Money Supply M2\" 이후의 HTML에서 숫자 값 찾기\nconst afterMoneySupply=data.substring(moneySupplyIndex);console.log('📄 After Money Supply M2 (first 1000 chars):',afterMoneySupply.substring(0,1000));// 숫자 패턴 찾기 (소수점 포함)\nconst numberPattern=/[-+]?\\d+\\.\\d+/;const numberMatch=afterMoneySupply.match(numberPattern);if(!numberMatch){console.log('❌ Number value not found');console.log('🔍 Searching for any number patterns...');// 다른 숫자 패턴들 시도\nconst numberPatterns=[/[-+]?\\d+\\.\\d+/,// 소수점 포함\n/[-+]?\\d+/,// 정수만\n/\\d+\\.\\d+/// 양수 소수점\n];for(const pattern of numberPatterns){const match=afterMoneySupply.match(pattern);if(match){console.log(\"\\u2705 Found number pattern: \".concat(match[0]));break;}}throw new Error('Number value not found');}const currentValue=parseFloat(numberMatch[0]);console.log(\"\\u2705 Successfully extracted US Money Supply M2: \".concat(currentValue));// 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US Money Supply M2');const change=dummyData?dummyData.change:0.00;return{title:'US Money Supply M2',value:currentValue,change:change,isPositive:change>=0,symbol:'US_M2',unit:'',description:'미국 핵심 M2 통화량 (전년 동기 대비)',isRealData:true,dataSource:'Trading Economics'};}catch(error){console.error('❌ Error fetching US Money Supply M2:',error.message);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US Money Supply M2');if(dummyData){console.log('📊 Using dummy data for US Money Supply M2');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)'});}throw error;}};// US SOFR 가져오기 (Trading Economics)\nexport const fetchUSSOFR=async()=>{try{console.log('🔄 Fetching US SOFR from Trading Economics...');const url='https://tradingeconomics.com/united-states/secured-overnight-financing-rate';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));// 여러 방법으로 시도\nlet data=null;let lastError=null;// 방법 1: 프록시 서버들 시도\ntry{data=await fetchWithProxy(url);console.log('✅ Successfully fetched data using proxy');}catch(error){console.log('❌ Proxy method failed:',error.message);lastError=error;}// 방법 2: 직접 fetch 시도 (CORS 우회)\nif(!data){try{console.log('🔄 Trying direct fetch...');const response=await fetch(url,{method:'GET',mode:'cors',headers:{'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36','Accept-Language':'en-US,en;q=0.9,ko;q=0.8','Cache-Control':'no-cache'}});if(response.ok){data=await response.text();console.log('✅ Successfully fetched data using direct fetch');}else{throw new Error(\"Direct fetch failed: \".concat(response.status));}}catch(error){console.log('❌ Direct fetch failed:',error.message);lastError=error;}}if(!data){console.log('❌ All methods failed, using dummy data');console.log('🔍 Last error:',lastError);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US SOFR');if(dummyData){console.log('📊 Using dummy data for US SOFR');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (All methods failed)'});}throw new Error('All data fetching methods failed');}console.log(\"\\uD83D\\uDCC4 Total HTML length: \".concat(data.length,\" characters\"));console.log('📄 HTML Preview (first 3000 chars):',data.substring(0,3000));// Trading Economics 페이지에서 데이터 추출 시도\n// \"SOFR\" 텍스트 찾기\nconst sofrIndex=data.indexOf('SOFR');if(sofrIndex===-1){console.log('❌ \"SOFR\" text not found');console.log('🔍 Searching for alternative patterns...');// 대안 패턴들 시도\nconst alternativePatterns=['SOFR','sofr','Secured Overnight Financing Rate','secured overnight financing rate','Overnight Financing Rate','overnight financing rate'];for(const pattern of alternativePatterns){const index=data.indexOf(pattern);if(index!==-1){console.log(\"\\u2705 Found alternative pattern: \\\"\".concat(pattern,\"\\\" at index \").concat(index));console.log('📄 Context around pattern:',data.substring(index-100,index+200));break;}}throw new Error('SOFR section not found');}console.log(\"\\u2705 Found \\\"SOFR\\\" at index \".concat(sofrIndex));// \"SOFR\" 이후의 HTML에서 숫자 값 찾기\nconst afterSOFR=data.substring(sofrIndex);console.log('📄 After SOFR (first 1000 chars):',afterSOFR.substring(0,1000));// 숫자 패턴 찾기 (소수점 포함)\nconst numberPattern=/[-+]?\\d+\\.\\d+/;const numberMatch=afterSOFR.match(numberPattern);if(!numberMatch){console.log('❌ Number value not found');console.log('🔍 Searching for any number patterns...');// 다른 숫자 패턴들 시도\nconst numberPatterns=[/[-+]?\\d+\\.\\d+/,// 소수점 포함\n/[-+]?\\d+/,// 정수만\n/\\d+\\.\\d+/// 양수 소수점\n];for(const pattern of numberPatterns){const match=afterSOFR.match(pattern);if(match){console.log(\"\\u2705 Found number pattern: \".concat(match[0]));break;}}throw new Error('Number value not found');}const currentValue=parseFloat(numberMatch[0]);console.log(\"\\u2705 Successfully extracted US SOFR: \".concat(currentValue,\"%\"));// 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US SOFR');const change=dummyData?dummyData.change:0.00;return{title:'US SOFR',value:currentValue,change:change,isPositive:change>=0,symbol:'US_SOFR',unit:'%',description:'미국 담보부 하루물 금리',isRealData:true,dataSource:'Trading Economics'};}catch(error){console.error('❌ Error fetching US SOFR:',error.message);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US SOFR');if(dummyData){console.log('📊 Using dummy data for US SOFR');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)'});}throw error;}};// US 30Y Mortgage Rate 가져오기 (Trading Economics)\nexport const fetchUS30YMortgageRate=async()=>{try{console.log('🔄 Fetching US 30Y Mortgage Rate from Trading Economics...');const url='https://tradingeconomics.com/united-states/30-year-mortgage-rate';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));// 여러 방법으로 시도\nlet data=null;let lastError=null;// 방법 1: 프록시 서버들 시도\ntry{data=await fetchWithProxy(url);console.log('✅ Successfully fetched data using proxy');}catch(error){console.log('❌ Proxy method failed:',error.message);lastError=error;}// 방법 2: 직접 fetch 시도 (CORS 우회)\nif(!data){try{console.log('🔄 Trying direct fetch...');const response=await fetch(url,{method:'GET',mode:'cors',headers:{'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36','Accept-Language':'en-US,en;q=0.9,ko;q=0.8','Cache-Control':'no-cache'}});if(response.ok){data=await response.text();console.log('✅ Successfully fetched data using direct fetch');}else{throw new Error(\"Direct fetch failed: \".concat(response.status));}}catch(error){console.log('❌ Direct fetch failed:',error.message);lastError=error;}}if(!data){console.log('❌ All methods failed, using dummy data');console.log('🔍 Last error:',lastError);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US 30Y Mortgage Rate');if(dummyData){console.log('📊 Using dummy data for US 30Y Mortgage Rate');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (All methods failed)'});}throw new Error('All data fetching methods failed');}console.log(\"\\uD83D\\uDCC4 Total HTML length: \".concat(data.length,\" characters\"));console.log('📄 HTML Preview (first 3000 chars):',data.substring(0,3000));// Trading Economics 페이지에서 데이터 추출 시도\n// \"30-Year Mortgage Rate\" 텍스트 찾기\nconst mortgageRateIndex=data.indexOf('30-Year Mortgage Rate');if(mortgageRateIndex===-1){console.log('❌ \"30-Year Mortgage Rate\" text not found');console.log('🔍 Searching for alternative patterns...');// 대안 패턴들 시도\nconst alternativePatterns=['30-Year Mortgage Rate','30 year mortgage rate','30-Year Mortgage','30 year mortgage','Mortgage Rate','mortgage rate'];for(const pattern of alternativePatterns){const index=data.indexOf(pattern);if(index!==-1){console.log(\"\\u2705 Found alternative pattern: \\\"\".concat(pattern,\"\\\" at index \").concat(index));console.log('📄 Context around pattern:',data.substring(index-100,index+200));break;}}throw new Error('30-Year Mortgage Rate section not found');}console.log(\"\\u2705 Found \\\"30-Year Mortgage Rate\\\" at index \".concat(mortgageRateIndex));// \"30-Year Mortgage Rate\" 이후의 HTML에서 숫자 값 찾기\nconst afterMortgageRate=data.substring(mortgageRateIndex);console.log('📄 After 30-Year Mortgage Rate (first 1000 chars):',afterMortgageRate.substring(0,1000));// 숫자 패턴 찾기 (소수점 포함)\nconst numberPattern=/[-+]?\\d+\\.\\d+/;const numberMatch=afterMortgageRate.match(numberPattern);if(!numberMatch){console.log('❌ Number value not found');console.log('🔍 Searching for any number patterns...');// 다른 숫자 패턴들 시도\nconst numberPatterns=[/[-+]?\\d+\\.\\d+/,// 소수점 포함\n/[-+]?\\d+/,// 정수만\n/\\d+\\.\\d+/// 양수 소수점\n];for(const pattern of numberPatterns){const match=afterMortgageRate.match(pattern);if(match){console.log(\"\\u2705 Found number pattern: \".concat(match[0]));break;}}throw new Error('Number value not found');}const currentValue=parseFloat(numberMatch[0]);console.log(\"\\u2705 Successfully extracted US 30Y Mortgage Rate: \".concat(currentValue,\"%\"));// 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US 30Y Mortgage Rate');const change=dummyData?dummyData.change:0.00;return{title:'US 30Y Mortgage Rate',value:currentValue,change:change,isPositive:change>=0,symbol:'US_30Y_MORTGAGE',unit:'%',description:'미국 30년 주택담보대출 금리',isRealData:true,dataSource:'Trading Economics'};}catch(error){console.error('❌ Error fetching US 30Y Mortgage Rate:',error.message);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US 30Y Mortgage Rate');if(dummyData){console.log('📊 Using dummy data for US 30Y Mortgage Rate');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)'});}throw error;}};// US New House Price 가져오기 (Trading Economics)\nexport const fetchUSNewHousePrice=async()=>{try{console.log('🔄 Fetching US New House Price from Trading Economics...');const url='https://tradingeconomics.com/united-states/average-house-prices';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));// 여러 방법으로 시도\nlet data=null;let lastError=null;// 방법 1: 프록시 서버들 시도\ntry{data=await fetchWithProxy(url);console.log('✅ Successfully fetched data using proxy');}catch(error){console.log('❌ Proxy method failed:',error.message);lastError=error;}// 방법 2: 직접 fetch 시도 (CORS 우회)\nif(!data){try{console.log('🔄 Trying direct fetch...');const response=await fetch(url,{method:'GET',mode:'cors',headers:{'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36','Accept-Language':'en-US,en;q=0.9,ko;q=0.8','Cache-Control':'no-cache'}});if(response.ok){data=await response.text();console.log('✅ Successfully fetched data using direct fetch');}else{throw new Error(\"Direct fetch failed: \".concat(response.status));}}catch(error){console.log('❌ Direct fetch failed:',error.message);lastError=error;}}if(!data){console.log('❌ All methods failed, using dummy data');console.log('🔍 Last error:',lastError);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US New House Price');if(dummyData){console.log('📊 Using dummy data for US New House Price');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (All methods failed)'});}throw new Error('All data fetching methods failed');}console.log(\"\\uD83D\\uDCC4 Total HTML length: \".concat(data.length,\" characters\"));console.log('📄 HTML Preview (first 3000 chars):',data.substring(0,3000));// Trading Economics 페이지에서 데이터 추출 시도\n// \"Average House Prices\" 텍스트 찾기\nconst averageHousePricesIndex=data.indexOf('Average House Prices');if(averageHousePricesIndex===-1){console.log('❌ \"Average House Prices\" text not found');console.log('🔍 Searching for alternative patterns...');// 대안 패턴들 시도\nconst alternativePatterns=['Average House Prices','average house prices','AVERAGE HOUSE PRICES','House Prices','house prices'];for(const pattern of alternativePatterns){const index=data.indexOf(pattern);if(index!==-1){console.log(\"\\u2705 Found alternative pattern: \\\"\".concat(pattern,\"\\\" at index \").concat(index));console.log('📄 Context around pattern:',data.substring(index-100,index+200));break;}}throw new Error('Average House Prices section not found');}console.log(\"\\u2705 Found \\\"Average House Prices\\\" at index \".concat(averageHousePricesIndex));// \"Average House Prices\" 이후의 HTML에서 숫자 값 찾기\nconst afterAverageHousePrices=data.substring(averageHousePricesIndex);console.log('📄 After Average House Prices (first 1000 chars):',afterAverageHousePrices.substring(0,1000));// Actual 값을 찾기 위한 패턴들 시도\nlet currentValue=null;// 패턴 1: \"Actual\" 텍스트 근처에서 숫자 찾기\nconst actualIndex=afterAverageHousePrices.indexOf('Actual');if(actualIndex!==-1){console.log(\"\\u2705 Found \\\"Actual\\\" at index \".concat(actualIndex));const afterActual=afterAverageHousePrices.substring(actualIndex);console.log('📄 After Actual (first 500 chars):',afterActual.substring(0,500));// Actual 이후의 숫자 패턴 찾기\nconst actualNumberPattern=/[-+]?[\\d,]+\\.?\\d*/;const actualMatch=afterActual.match(actualNumberPattern);if(actualMatch){currentValue=parseFloat(actualMatch[0].replace(/,/g,''));console.log(\"\\u2705 Found Actual value: \".concat(currentValue));}}// 패턴 2: \"Current\" 텍스트 근처에서 숫자 찾기\nif(!currentValue){const currentIndex=afterAverageHousePrices.indexOf('Current');if(currentIndex!==-1){console.log(\"\\u2705 Found \\\"Current\\\" at index \".concat(currentIndex));const afterCurrent=afterAverageHousePrices.substring(currentIndex);console.log('📄 After Current (first 500 chars):',afterCurrent.substring(0,500));const currentNumberPattern=/[-+]?[\\d,]+\\.?\\d*/;const currentMatch=afterCurrent.match(currentNumberPattern);if(currentMatch){currentValue=parseFloat(currentMatch[0].replace(/,/g,''));console.log(\"\\u2705 Found Current value: \".concat(currentValue));}}}// 패턴 3: \"Latest\" 텍스트 근처에서 숫자 찾기\nif(!currentValue){const latestIndex=afterAverageHousePrices.indexOf('Latest');if(latestIndex!==-1){console.log(\"\\u2705 Found \\\"Latest\\\" at index \".concat(latestIndex));const afterLatest=afterAverageHousePrices.substring(latestIndex);console.log('📄 After Latest (first 500 chars):',afterLatest.substring(0,500));const latestNumberPattern=/[-+]?[\\d,]+\\.?\\d*/;const latestMatch=afterLatest.match(latestNumberPattern);if(latestMatch){currentValue=parseFloat(latestMatch[0].replace(/,/g,''));console.log(\"\\u2705 Found Latest value: \".concat(currentValue));}}}// 패턴 4: 일반적인 숫자 패턴 (마지막 수단)\nif(!currentValue){console.log('🔍 Searching for general number patterns...');const numberPattern=/[-+]?[\\d,]+\\.?\\d*/;const numberMatch=afterAverageHousePrices.match(numberPattern);if(numberMatch){currentValue=parseFloat(numberMatch[0].replace(/,/g,''));console.log(\"\\u2705 Found general number value: \".concat(currentValue));}}if(!currentValue){console.log('❌ No valid number value found');console.log('🔍 Searching for any number patterns...');// 다른 숫자 패턴들 시도\nconst numberPatterns=[/[-+]?[\\d,]+\\.?\\d*/,// 콤마 포함\n/[-+]?\\d+\\.?\\d*/,// 소수점 포함\n/[-+]?\\d+/,// 정수만\n/\\d+\\.?\\d*/// 양수\n];for(const pattern of numberPatterns){const match=afterAverageHousePrices.match(pattern);if(match){console.log(\"\\u2705 Found number pattern: \".concat(match[0]));break;}}throw new Error('Number value not found');}console.log(\"\\u2705 Successfully extracted US New House Price: \".concat(currentValue));// 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US New House Price');const change=dummyData?dummyData.change:0.00;return{title:'US New House Price',value:currentValue,change:change,isPositive:change>=0,symbol:'US_NEW_HOUSE_PRICE',unit:'$',description:'미국 신축 주택 평균 가격',isRealData:true,dataSource:'Trading Economics'};}catch(error){console.error('❌ Error fetching US New House Price:',error.message);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US New House Price');if(dummyData){console.log('📊 Using dummy data for US New House Price');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)'});}throw error;}};// 모든 Macro 데이터 가져오기\nexport const fetchAllMacroData=async()=>{try{console.log('🔄 Fetching all Macro Economics data...');const promises=[fetchKoreaGDPGrowth(),fetchSP500DividendFutures(),fetchCitiEconomicSurpriseIndex(),fetchInflationExpectationRate(),fetchUSCoreInflationRate(),fetchUSCorePCE(),fetchUSCorePPI(),fetchUSMoneySupplyM2(),fetchUSSOFR(),fetchUS30YMortgageRate(),fetchUSNewHousePrice(),fetchKoreaExportImport(),fetchUSNonFarmPayrolls(),fetchUSUnemploymentRate()];// 모든 요청 완료 대기\nconst results=await Promise.all(promises);console.log(\"\\u2705 Successfully loaded \".concat(results.length,\" Macro Economics indicators\"));// 실제 데이터가 있는지 확인\nconst realDataCount=results.filter(item=>item.isRealData).length;if(realDataCount===0){console.log('⚠️ No real data available, showing dummy data');}else{console.log(\"\\u2705 \".concat(realDataCount,\" real Macro indicators loaded\"));}return results;}catch(error){console.error('❌ Error fetching all Macro data:',error);console.log('📊 Falling back to dummy data...');// 전체 실패 시 더미 데이터 반환\nreturn DUMMY_MACRO_DATA.map(item=>_objectSpread(_objectSpread({},item),{},{isRealData:false,dataSource:'Dummy Data (Error)'}));}};// Macro 데이터 가져오기 (실시간 시뮬레이션)\nexport const fetchMacroData=async()=>{try{// 실제 API 호출 대신 실시간 시뮬레이션 사용\nreturn DUMMY_MACRO_DATA.map(item=>_objectSpread(_objectSpread({},item),{},{isRealData:false,dataSource:'Dummy Data (Simulation)'}));}catch(error){console.error('Error fetching macro data:',error);return DUMMY_MACRO_DATA;}};// Korea Export Import 가져오기 (e-나라지표)\nexport const fetchKoreaExportImport=async()=>{try{console.log('🔄 Fetching Korea Export Import from e-나라지표...');const url='https://www.index.go.kr/unity/potal/main/EachDtlPageDetail.do?idx_cd=1066';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));// 여러 방법으로 시도\nlet data=null;let lastError=null;// 방법 1: 프록시 서버들 시도\ntry{data=await fetchWithProxy(url);console.log('✅ Successfully fetched data using proxy');}catch(error){console.log('❌ Proxy method failed:',error.message);lastError=error;}// 방법 2: 직접 fetch 시도 (CORS 우회)\nif(!data){try{console.log('🔄 Trying direct fetch...');const response=await fetch(url,{method:'GET',mode:'cors',headers:{'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36','Accept-Language':'ko-KR,ko;q=0.9,en;q=0.8','Cache-Control':'no-cache'}});if(response.ok){data=await response.text();console.log('✅ Successfully fetched data using direct fetch');}else{throw new Error(\"Direct fetch failed: \".concat(response.status));}}catch(error){console.log('❌ Direct fetch failed:',error.message);lastError=error;}}if(!data){console.log('❌ All methods failed, using dummy data');console.log('🔍 Last error:',lastError);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='Korea Export Import');if(dummyData){console.log('📊 Using dummy data for Korea Export Import');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (All methods failed)'});}throw new Error('All data fetching methods failed');}console.log(\"\\uD83D\\uDCC4 Total HTML length: \".concat(data.length,\" characters\"));console.log('📄 HTML Preview (first 3000 chars):',data.substring(0,3000));// e-나라지표 페이지에서 데이터 추출 시도\n// \"수출입실적\" 텍스트 찾기\nconst exportImportIndex=data.indexOf('수출입실적');if(exportImportIndex===-1){console.log('❌ \"수출입실적\" text not found');console.log('🔍 Searching for alternative patterns...');// 대안 패턴들 시도\nconst alternativePatterns=['수출입실적','수출입','export import','EXPORT IMPORT'];for(const pattern of alternativePatterns){const index=data.indexOf(pattern);if(index!==-1){console.log(\"\\u2705 Found alternative pattern: \\\"\".concat(pattern,\"\\\" at index \").concat(index));console.log('📄 Context around pattern:',data.substring(index-100,index+200));break;}}throw new Error('수출입실적 section not found');}console.log(\"\\u2705 Found \\\"\\uC218\\uCD9C\\uC785\\uC2E4\\uC801\\\" at index \".concat(exportImportIndex));// \"수출입실적\" 이후의 HTML에서 숫자 값 찾기\nconst afterExportImport=data.substring(exportImportIndex);console.log('📄 After 수출입실적 (first 1000 chars):',afterExportImport.substring(0,1000));// 숫자 패턴 찾기 (소수점 포함, 억 단위)\nconst numberPattern=/[-+]?\\d+\\.?\\d*/;const numberMatch=afterExportImport.match(numberPattern);if(!numberMatch){console.log('❌ Number value not found');console.log('🔍 Searching for any number patterns...');// 다른 숫자 패턴들 시도\nconst numberPatterns=[/[-+]?\\d+\\.?\\d*/,// 소수점 포함\n/[-+]?\\d+/,// 정수만\n/\\d+\\.?\\d*/// 양수\n];for(const pattern of numberPatterns){const match=afterExportImport.match(pattern);if(match){console.log(\"\\u2705 Found number pattern: \".concat(match[0]));break;}}throw new Error('Number value not found');}const currentValue=parseFloat(numberMatch[0]);console.log(\"\\u2705 Successfully extracted Korea Export Import: \".concat(currentValue));// 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='Korea Export Import');const change=dummyData?dummyData.change:0.00;return{title:'Korea Export Import',value:currentValue,change:change,isPositive:change>=0,symbol:'KOREA_EXPORT_IMPORT',unit:'억$',description:'한국 수출입 실적',isRealData:true,dataSource:'e-나라지표 (통계청)'};}catch(error){console.error('❌ Error fetching Korea Export Import:',error.message);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='Korea Export Import');if(dummyData){console.log('📊 Using dummy data for Korea Export Import');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)'});}throw error;}};// Korea GDP Growth 가져오기 (Trading Economics)\nexport const fetchKoreaGDPGrowth=async()=>{try{console.log('🔄 Fetching Korea GDP Growth from Trading Economics...');const url='https://tradingeconomics.com/south-korea/gdp-growth-annual';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));// 여러 방법으로 시도\nlet data=null;let lastError=null;// 방법 1: 프록시 서버들 시도\ntry{data=await fetchWithProxy(url);console.log('✅ Successfully fetched data using proxy');}catch(error){console.log('❌ Proxy method failed:',error.message);lastError=error;}// 방법 2: 직접 fetch 시도 (CORS 우회)\nif(!data){try{console.log('🔄 Trying direct fetch...');const response=await fetch(url,{method:'GET',mode:'cors',headers:{'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36','Accept-Language':'ko-KR,ko;q=0.9,en;q=0.8','Cache-Control':'no-cache'}});if(response.ok){data=await response.text();console.log('✅ Successfully fetched data using direct fetch');}else{throw new Error(\"Direct fetch failed: \".concat(response.status));}}catch(error){console.log('❌ Direct fetch failed:',error.message);lastError=error;}}if(!data){console.log('❌ All methods failed, using dummy data');console.log('🔍 Last error:',lastError);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='Korea GDP Growth');if(dummyData){console.log('📊 Using dummy data for Korea GDP Growth');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (All methods failed)'});}throw new Error('All data fetching methods failed');}console.log(\"\\uD83D\\uDCC4 Total HTML length: \".concat(data.length,\" characters\"));console.log('📄 HTML Preview (first 3000 chars):',data.substring(0,3000));// Trading Economics 페이지에서 데이터 추출 시도\n// \"GDP Growth\" 텍스트 찾기\nconst gdpGrowthIndex=data.indexOf('GDP Growth');if(gdpGrowthIndex===-1){console.log('❌ \"GDP Growth\" text not found');console.log('🔍 Searching for alternative patterns...');// 대안 패턴들 시도\nconst alternativePatterns=['GDP Growth','gdp growth','GDP GROWTH','GDP','gdp'];for(const pattern of alternativePatterns){const index=data.indexOf(pattern);if(index!==-1){console.log(\"\\u2705 Found alternative pattern: \\\"\".concat(pattern,\"\\\" at index \").concat(index));console.log('📄 Context around pattern:',data.substring(index-100,index+200));break;}}throw new Error('GDP Growth section not found');}console.log(\"\\u2705 Found \\\"GDP Growth\\\" at index \".concat(gdpGrowthIndex));// \"GDP Growth\" 이후의 HTML에서 숫자 값 찾기\nconst afterGDPGrowth=data.substring(gdpGrowthIndex);console.log('📄 After GDP Growth (first 1000 chars):',afterGDPGrowth.substring(0,1000));// 숫자 패턴 찾기 (소수점 포함)\nconst numberPattern=/[-+]?\\d+\\.\\d+/;const numberMatch=afterGDPGrowth.match(numberPattern);if(!numberMatch){console.log('❌ Number value not found');console.log('🔍 Searching for any number patterns...');// 다른 숫자 패턴들 시도\nconst numberPatterns=[/[-+]?\\d+\\.\\d+/,// 소수점 포함\n/[-+]?\\d+/,// 정수만\n/\\d+\\.\\d+/// 양수 소수점\n];for(const pattern of numberPatterns){const match=afterGDPGrowth.match(pattern);if(match){console.log(\"\\u2705 Found number pattern: \".concat(match[0]));break;}}throw new Error('Number value not found');}const currentValue=parseFloat(numberMatch[0]);console.log(\"\\u2705 Successfully extracted Korea GDP Growth: \".concat(currentValue,\"%\"));// 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='Korea GDP Growth');const change=dummyData?dummyData.change:0.00;return{title:'Korea GDP Growth',value:currentValue,change:change,isPositive:change>=0,symbol:'KOREA_GDP_GROWTH',unit:'%',description:'한국 GDP 성장률',isRealData:true,dataSource:'Trading Economics'};}catch(error){console.error('❌ Error fetching Korea GDP Growth:',error.message);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='Korea GDP Growth');if(dummyData){console.log('📊 Using dummy data for Korea GDP Growth');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)'});}throw error;}};// US Non Farm Payrolls 가져오기 (Trading Economics)\nexport const fetchUSNonFarmPayrolls=async()=>{try{console.log('🔄 Fetching US Non Farm Payrolls from Trading Economics...');const url='https://tradingeconomics.com/united-states/non-farm-payrolls';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));// 여러 방법으로 시도\nlet data=null;let lastError=null;// 방법 1: 프록시 서버들 시도\ntry{data=await fetchWithProxy(url);console.log('✅ Successfully fetched data using proxy');}catch(error){console.log('❌ Proxy method failed:',error.message);lastError=error;}// 방법 2: 직접 fetch 시도 (CORS 우회)\nif(!data){try{console.log('🔄 Trying direct fetch...');const response=await fetch(url,{method:'GET',mode:'cors',headers:{'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36','Accept-Language':'en-US,en;q=0.9,ko;q=0.8','Cache-Control':'no-cache'}});if(response.ok){data=await response.text();console.log('✅ Successfully fetched data using direct fetch');}else{throw new Error(\"Direct fetch failed: \".concat(response.status));}}catch(error){console.log('❌ Direct fetch failed:',error.message);lastError=error;}}if(!data){console.log('❌ All methods failed, using dummy data');console.log('🔍 Last error:',lastError);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US Non Farm Payrolls');if(dummyData){console.log('📊 Using dummy data for US Non Farm Payrolls');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (All methods failed)'});}throw new Error('All data fetching methods failed');}console.log(\"\\uD83D\\uDCC4 Total HTML length: \".concat(data.length,\" characters\"));console.log('📄 HTML Preview (first 3000 chars):',data.substring(0,3000));// Trading Economics 페이지에서 데이터 추출 시도\n// \"Non Farm Payrolls\" 텍스트 찾기\nconst nonFarmPayrollsIndex=data.indexOf('Non Farm Payrolls');if(nonFarmPayrollsIndex===-1){console.log('❌ \"Non Farm Payrolls\" text not found');console.log('🔍 Searching for alternative patterns...');// 대안 패턴들 시도\nconst alternativePatterns=['Non Farm Payrolls','non farm payrolls','NON FARM PAYROLLS','Nonfarm Payrolls','nonfarm payrolls','Payrolls','payrolls'];for(const pattern of alternativePatterns){const index=data.indexOf(pattern);if(index!==-1){console.log(\"\\u2705 Found alternative pattern: \\\"\".concat(pattern,\"\\\" at index \").concat(index));console.log('📄 Context around pattern:',data.substring(index-100,index+200));break;}}throw new Error('Non Farm Payrolls section not found');}console.log(\"\\u2705 Found \\\"Non Farm Payrolls\\\" at index \".concat(nonFarmPayrollsIndex));// \"Non Farm Payrolls\" 이후의 HTML에서 숫자 값 찾기\nconst afterNonFarmPayrolls=data.substring(nonFarmPayrollsIndex);console.log('📄 After Non Farm Payrolls (first 1000 chars):',afterNonFarmPayrolls.substring(0,1000));// 숫자 패턴 찾기 (소수점 포함)\nconst numberPattern=/[-+]?\\d+\\.?\\d*/;const numberMatch=afterNonFarmPayrolls.match(numberPattern);if(!numberMatch){console.log('❌ Number value not found');console.log('🔍 Searching for any number patterns...');// 다른 숫자 패턴들 시도\nconst numberPatterns=[/[-+]?\\d+\\.?\\d*/,// 소수점 포함\n/[-+]?\\d+/,// 정수만\n/\\d+\\.?\\d*/// 양수\n];for(const pattern of numberPatterns){const match=afterNonFarmPayrolls.match(pattern);if(match){console.log(\"\\u2705 Found number pattern: \".concat(match[0]));break;}}throw new Error('Number value not found');}const currentValue=parseFloat(numberMatch[0]);console.log(\"\\u2705 Successfully extracted US Non Farm Payrolls: \".concat(currentValue));// 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US Non Farm Payrolls');const change=dummyData?dummyData.change:0.00;return{title:'US Non Farm Payrolls',value:currentValue,change:change,isPositive:change>=0,symbol:'US_NON_FARM_PAYROLLS',unit:'천명',description:'미국 비농업 고용 지표',isRealData:true,dataSource:'Trading Economics'};}catch(error){console.error('❌ Error fetching US Non Farm Payrolls:',error.message);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US Non Farm Payrolls');if(dummyData){console.log('📊 Using dummy data for US Non Farm Payrolls');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)'});}throw error;}};// US Unemployment Rate 가져오기 (Trading Economics)\nexport const fetchUSUnemploymentRate=async()=>{try{console.log('🔄 Fetching US Unemployment Rate from Trading Economics...');const url='https://tradingeconomics.com/united-states/unemployment-rate';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));// 여러 방법으로 시도\nlet data=null;let lastError=null;// 방법 1: 프록시 서버들 시도\ntry{data=await fetchWithProxy(url);console.log('✅ Successfully fetched data using proxy');}catch(error){console.log('❌ Proxy method failed:',error.message);lastError=error;}// 방법 2: 직접 fetch 시도 (CORS 우회)\nif(!data){try{console.log('🔄 Trying direct fetch...');const response=await fetch(url,{method:'GET',mode:'cors',headers:{'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36','Accept-Language':'en-US,en;q=0.9,ko;q=0.8','Cache-Control':'no-cache'}});if(response.ok){data=await response.text();console.log('✅ Successfully fetched data using direct fetch');}else{throw new Error(\"Direct fetch failed: \".concat(response.status));}}catch(error){console.log('❌ Direct fetch failed:',error.message);lastError=error;}}if(!data){console.log('❌ All methods failed, using dummy data');console.log('🔍 Last error:',lastError);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US Unemployment Rate');if(dummyData){console.log('📊 Using dummy data for US Unemployment Rate');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (All methods failed)'});}throw new Error('All data fetching methods failed');}console.log(\"\\uD83D\\uDCC4 Total HTML length: \".concat(data.length,\" characters\"));console.log('📄 HTML Preview (first 3000 chars):',data.substring(0,3000));// Trading Economics 페이지에서 데이터 추출 시도\n// \"Unemployment Rate\" 텍스트 찾기\nconst unemploymentRateIndex=data.indexOf('Unemployment Rate');if(unemploymentRateIndex===-1){console.log('❌ \"Unemployment Rate\" text not found');console.log('🔍 Searching for alternative patterns...');// 대안 패턴들 시도\nconst alternativePatterns=['Unemployment Rate','unemployment rate','UNEMPLOYMENT RATE','Unemployment','unemployment'];for(const pattern of alternativePatterns){const index=data.indexOf(pattern);if(index!==-1){console.log(\"\\u2705 Found alternative pattern: \\\"\".concat(pattern,\"\\\" at index \").concat(index));console.log('📄 Context around pattern:',data.substring(index-100,index+200));break;}}throw new Error('Unemployment Rate section not found');}console.log(\"\\u2705 Found \\\"Unemployment Rate\\\" at index \".concat(unemploymentRateIndex));// \"Unemployment Rate\" 이후의 HTML에서 숫자 값 찾기\nconst afterUnemploymentRate=data.substring(unemploymentRateIndex);console.log('📄 After Unemployment Rate (first 1000 chars):',afterUnemploymentRate.substring(0,1000));// 숫자 패턴 찾기 (소수점 포함)\nconst numberPattern=/[-+]?\\d+\\.\\d+/;const numberMatch=afterUnemploymentRate.match(numberPattern);if(!numberMatch){console.log('❌ Number value not found');console.log('🔍 Searching for any number patterns...');// 다른 숫자 패턴들 시도\nconst numberPatterns=[/[-+]?\\d+\\.\\d+/,// 소수점 포함\n/[-+]?\\d+/,// 정수만\n/\\d+\\.\\d+/// 양수 소수점\n];for(const pattern of numberPatterns){const match=afterUnemploymentRate.match(pattern);if(match){console.log(\"\\u2705 Found number pattern: \".concat(match[0]));break;}}throw new Error('Number value not found');}const currentValue=parseFloat(numberMatch[0]);console.log(\"\\u2705 Successfully extracted US Unemployment Rate: \".concat(currentValue,\"%\"));// 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US Unemployment Rate');const change=dummyData?dummyData.change:0.00;return{title:'US Unemployment Rate',value:currentValue,change:change,isPositive:change>=0,symbol:'US_UNEMPLOYMENT_RATE',unit:'%',description:'미국 실업률',isRealData:true,dataSource:'Trading Economics'};}catch(error){console.error('❌ Error fetching US Unemployment Rate:',error.message);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_MACRO_DATA.find(item=>item.title==='US Unemployment Rate');if(dummyData){console.log('📊 Using dummy data for US Unemployment Rate');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)'});}throw error;}};","map":{"version":3,"names":["BASE_URL","MACRO_SYMBOLS","EXTERNAL_URLS","PROXY_SERVICES","fetchWithProxy","url","proxyIndex","arguments","length","undefined","Error","proxyUrl","console","log","concat","substring","response","fetch","method","headers","timeout","status","Object","fromEntries","entries","ok","statusText","data","text","includes","error","message","DUMMY_MACRO_DATA","title","value","change","isPositive","symbol","unit","description","fetchSP500DividendFutures","jsonData","JSON","parse","chart","result","meta","currentPrice","regularMarketPrice","previousClose","toFixed","Math","round","isRealData","dataSource","dummyData","find","item","_objectSpread","fetchCitiEconomicSurpriseIndex","lastError","mode","script","document","createElement","src","window","handleMacroData","stringify","head","appendChild","Promise","resolve","setTimeout","latestStatsIndex","indexOf","alternativePatterns","pattern","index","citigroupIndex","afterLatestStats","citiIndexIndex","citigroupPatterns","afterCitiIndex","datePattern","dateMatch","match","datePatterns","dateFound","dateIndex","afterDate","numberPattern","numberMatch","numberPatterns","currentValue","parseFloat","prevPattern","prevMatch","prevValue","fetchInflationExpectationRate","latestValueMatch","fetchUSCoreInflationRate","coreInflationIndex","afterCoreInflation","fetchUSCorePCE","corePCEIndex","afterCorePCE","fetchUSCorePPI","corePPIIndex","afterCorePPI","fetchUSMoneySupplyM2","moneySupplyIndex","afterMoneySupply","fetchUSSOFR","sofrIndex","afterSOFR","fetchUS30YMortgageRate","mortgageRateIndex","afterMortgageRate","fetchUSNewHousePrice","averageHousePricesIndex","afterAverageHousePrices","actualIndex","afterActual","actualNumberPattern","actualMatch","replace","currentIndex","afterCurrent","currentNumberPattern","currentMatch","latestIndex","afterLatest","latestNumberPattern","latestMatch","fetchAllMacroData","promises","fetchKoreaGDPGrowth","fetchKoreaExportImport","fetchUSNonFarmPayrolls","fetchUSUnemploymentRate","results","all","realDataCount","filter","map","fetchMacroData","exportImportIndex","afterExportImport","gdpGrowthIndex","afterGDPGrowth","nonFarmPayrollsIndex","afterNonFarmPayrolls","unemploymentRateIndex","afterUnemploymentRate"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/macroApi.js"],"sourcesContent":["// Macro Economics 데이터를 가져오는 서비스\r\nconst BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\r\n\r\n// Macro 지표 심볼 매핑\r\nconst MACRO_SYMBOLS = {\r\n  'Korea GDP Growth': 'KOREA_GDP_GROWTH',\r\n  'S&P 500 Annual Dividend Futures': '^SP500DIV',\r\n  'World Citi Economic Surprise Index': 'CITI_SURPRISE',\r\n  '5-Year 5-Year Forward Inflation Expectation Rate': 'T5YIFR',\r\n  'US Core Inflation Rate YoY': 'US_CORE_INFLATION',\r\n  'US Core PCE YoY': 'US_CORE_PCE',\r\n  'US Core PPI YoY': 'US_CORE_PPI',\r\n  'US Money Supply M2': 'US_M2',\r\n  'US SOFR': 'US_SOFR',\r\n  'US 30Y Mortgage Rate': 'US_30Y_MORTGAGE',\r\n  'US New House Price': 'US_NEW_HOUSE_PRICE',\r\n  'Korea Export Import': 'KOREA_EXPORT_IMPORT',\r\n  'US Non Farm Payrolls': 'US_NON_FARM_PAYROLLS',\r\n  'US Unemployment Rate': 'US_UNEMPLOYMENT_RATE'\r\n};\r\n\r\n// 외부 URL 매핑\r\nexport const EXTERNAL_URLS = {\r\n  'Korea GDP Growth': 'https://tradingeconomics.com/south-korea/gdp-growth-annual',\r\n  'S&P 500 Annual Dividend Futures': 'https://finance.yahoo.com/quote/%5ESP500DIV',\r\n  'World Citi Economic Surprise Index': 'https://en.macromicro.me/charts/45866/global-citi-surprise-index',\r\n  '5-Year 5-Year Forward Inflation Expectation Rate': 'https://fred.stlouisfed.org/series/T5YIFR',\r\n  'US Core Inflation Rate YoY': 'https://tradingeconomics.com/united-states/core-inflation-rate',\r\n  'US Core PCE YoY': 'https://tradingeconomics.com/united-states/core-pce-price-index-annual-change',\r\n  'US Core PPI YoY': 'https://tradingeconomics.com/united-states/core-producer-prices-yoy',\r\n  'US Money Supply M2': 'https://tradingeconomics.com/united-states/money-supply-m2',\r\n  'US SOFR': 'https://tradingeconomics.com/united-states/secured-overnight-financing-rate',\r\n  'US 30Y Mortgage Rate': 'https://tradingeconomics.com/united-states/30-year-mortgage-rate',\r\n  'US New House Price': 'https://tradingeconomics.com/united-states/average-house-prices',\r\n  'Korea Export Import': 'https://www.index.go.kr/unity/potal/main/EachDtlPageDetail.do?idx_cd=1066',\r\n  'US Non Farm Payrolls': 'https://tradingeconomics.com/united-states/non-farm-payrolls',\r\n  'US Unemployment Rate': 'https://tradingeconomics.com/united-states/unemployment-rate?c=usd&v=2024&d1=20140101&d2=20241231&h=10y'\r\n};\r\n\r\n// 프록시 서버들을 사용한 웹 스크래핑\r\nconst PROXY_SERVICES = [\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://corsproxy.io/?',\r\n  'https://thingproxy.freeboard.io/fetch/',\r\n  'https://cors.bridged.cc/',\r\n  'https://api.codetabs.com/v1/proxy?quest=',\r\n  'https://cors.eu.org/',\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  'https://api.codetabs.com/v1/proxy?quest=',\r\n  'https://cors.bridged.cc/',\r\n  'https://thingproxy.freeboard.io/fetch/',\r\n  'https://corsproxy.io/?',\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://corsproxy.io/?',\r\n  'https://thingproxy.freeboard.io/fetch/',\r\n  'https://cors.bridged.cc/',\r\n  'https://api.codetabs.com/v1/proxy?quest=',\r\n  'https://cors.eu.org/',\r\n  '' // 직접 호출도 시도\r\n];\r\n\r\n// 프록시를 사용한 웹 스크래핑\r\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\r\n  if (proxyIndex >= PROXY_SERVICES.length) {\r\n    throw new Error('All proxy attempts failed');\r\n  }\r\n\r\n  try {\r\n    const proxyUrl = PROXY_SERVICES[proxyIndex] + url;\r\n    console.log(`🔗 Trying proxy ${proxyIndex + 1}/${PROXY_SERVICES.length}: ${proxyUrl.substring(0, 80)}...`);\r\n    \r\n    const response = await fetch(proxyUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n        'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\r\n        'Accept-Encoding': 'gzip, deflate, br',\r\n        'Connection': 'keep-alive',\r\n        'Upgrade-Insecure-Requests': '1',\r\n        'Cache-Control': 'no-cache',\r\n        'Pragma': 'no-cache'\r\n      },\r\n      timeout: 15000 // 15초 타임아웃\r\n    });\r\n\r\n    console.log(`📊 Response status: ${response.status}`);\r\n    console.log(`📊 Response headers:`, Object.fromEntries(response.headers.entries()));\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.text();\r\n    \r\n    console.log(`📊 Response data length: ${data.length} characters`);\r\n    \r\n    if (data.length < 100) {\r\n      console.log(`📄 Short response data: ${data}`);\r\n      throw new Error('Response too short, likely an error page');\r\n    }\r\n    \r\n    // 에러 페이지인지 확인\r\n    if (data.includes('error') || data.includes('Error') || data.includes('ERROR')) {\r\n      console.log('⚠️ Response contains error indicators');\r\n      console.log('📄 Error response preview:', data.substring(0, 500));\r\n    }\r\n    \r\n    // CORS 에러인지 확인\r\n    if (data.includes('CORS') || data.includes('cors') || data.includes('Access-Control')) {\r\n      console.log('⚠️ Response contains CORS error indicators');\r\n      console.log('📄 CORS error preview:', data.substring(0, 500));\r\n    }\r\n    \r\n    console.log(`✅ Proxy ${proxyIndex + 1} successful! Data length: ${data.length} characters`);\r\n    return data;\r\n  } catch (error) {\r\n    console.log(`❌ Proxy ${proxyIndex + 1} failed: ${error.message}`);\r\n    console.log(`🔍 Error details:`, error);\r\n    \r\n    // 마지막 프록시가 아니면 다음 프록시 시도\r\n    if (proxyIndex < PROXY_SERVICES.length - 1) {\r\n      console.log(`🔄 Retrying with next proxy...`);\r\n      return fetchWithProxy(url, proxyIndex + 1);\r\n    } else {\r\n      throw new Error(`All ${PROXY_SERVICES.length} proxies failed. Last error: ${error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\n// 2024년 12월 기준 최신 더미 데이터 (실제 시장 상황 반영)\r\nconst DUMMY_MACRO_DATA = [\r\n  {\r\n    title: 'Korea GDP Growth',\r\n    value: 2.1,\r\n    change: 0.00,\r\n    isPositive: true,\r\n    symbol: 'KOREA_GDP_GROWTH',\r\n    unit: '%',\r\n    description: '한국 GDP 성장률'\r\n  },\r\n  {\r\n    title: 'S&P 500 Annual Dividend Futures',\r\n    value: 2.15,\r\n    change: 0.05,\r\n    isPositive: true,\r\n    symbol: '^SP500DIV',\r\n    unit: '%',\r\n    description: 'S&P 500 연간 배당률 선물'\r\n  },\r\n  {\r\n    title: 'World Citi Economic Surprise Index',\r\n    value: 13.40,  // 실제 MacroMicro 사이트에서 확인한 값으로 업데이트\r\n    change: -0.90, // 13.40 - 14.30 = -0.90\r\n    isPositive: true,\r\n    symbol: 'CITI_SURPRISE',\r\n    unit: '',\r\n    description: '글로벌 경제 서프라이즈 지수'\r\n  },\r\n  {\r\n    title: '5-Year 5-Year Forward Inflation Expectation Rate',\r\n    value: 2.33,  // FRED에서 확인한 실제 값으로 업데이트\r\n    change: -0.01,\r\n    isPositive: true,\r\n    symbol: 'T5YIFR',\r\n    unit: '%',\r\n    description: '5년 후 5년 인플레이션 기대율'\r\n  },\r\n  {\r\n    title: 'US Core Inflation Rate YoY',\r\n    value: 3.2,\r\n    change: -0.1,\r\n    isPositive: false,\r\n    symbol: 'US_CORE_INFLATION',\r\n    unit: '%',\r\n    description: '미국 핵심 인플레이션률 (전년 동기 대비)'\r\n  },\r\n  {\r\n    title: 'US Core PCE YoY',\r\n    value: 2.9,\r\n    change: -0.2,\r\n    isPositive: false,\r\n    symbol: 'US_CORE_PCE',\r\n    unit: '%',\r\n    description: '미국 핵심 PCE 물가지수 (전년 동기 대비)'\r\n  },\r\n  {\r\n    title: 'US Core PPI YoY',\r\n    value: 2.4,\r\n    change: -0.3,\r\n    isPositive: false,\r\n    symbol: 'US_CORE_PPI',\r\n    unit: '%',\r\n    description: '미국 핵심 PPI 물가지수 (전년 동기 대비)'\r\n  },\r\n  {\r\n    title: 'US Money Supply M2',\r\n    value: 20.8,\r\n    change: -2.1,\r\n    isPositive: false,\r\n    symbol: 'US_M2',\r\n    unit: '',\r\n    description: '미국 M2 통화량 (전년 동기 대비)'\r\n  },\r\n  {\r\n    title: 'US SOFR',\r\n    value: 5.33,\r\n    change: 0.00,\r\n    isPositive: true,\r\n    symbol: 'US_SOFR',\r\n    unit: '%',\r\n    description: '미국 담보부 하루물 금리'\r\n  },\r\n  {\r\n    title: 'US 30Y Mortgage Rate',\r\n    value: 7.15,\r\n    change: 0.00,\r\n    isPositive: true,\r\n    symbol: 'US_30Y_MORTGAGE',\r\n    unit: '%',\r\n    description: '미국 30년 주택담보대출 금리'\r\n  },\r\n  {\r\n    title: 'US New House Price',\r\n    value: 400000, // 더미 데이터\r\n    change: 0.00,\r\n    isPositive: true,\r\n    symbol: 'US_NEW_HOUSE_PRICE',\r\n    unit: '$',\r\n    description: '미국 신축 주택 평균 가격'\r\n  },\r\n  {\r\n    title: 'Korea Export Import',\r\n    value: 1250.8, // 더미 데이터 (단위: 억 달러)\r\n    change: 0.00,\r\n    isPositive: true,\r\n    symbol: 'KOREA_EXPORT_IMPORT',\r\n    unit: '억$',\r\n    description: '한국 수출입 실적'\r\n  },\r\n  {\r\n    title: 'US Non Farm Payrolls',\r\n    value: 199.0, // 더미 데이터 (단위: 천 명)\r\n    change: 0.00,\r\n    isPositive: true,\r\n    symbol: 'US_NON_FARM_PAYROLLS',\r\n    unit: '천명',\r\n    description: '미국 비농업 고용 지표'\r\n  },\r\n  {\r\n    title: 'US Unemployment Rate',\r\n    value: 3.7, // 더미 데이터 (단위: %)\r\n    change: 0.00,\r\n    isPositive: false,\r\n    symbol: 'US_UNEMPLOYMENT_RATE',\r\n    unit: '%',\r\n    description: '미국 실업률'\r\n  }\r\n];\r\n\r\n// S&P 500 Annual Dividend Futures 가져오기 (Yahoo Finance)\r\nexport const fetchSP500DividendFutures = async () => {\r\n  try {\r\n    console.log('🔄 Fetching S&P 500 Annual Dividend Futures from Yahoo Finance...');\r\n    \r\n    const symbol = '^SP500DIV';\r\n    const url = `${BASE_URL}/${symbol}?interval=1d&range=1d`;\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const data = await fetchWithProxy(url);\r\n    \r\n    if (!data) {\r\n      throw new Error('Failed to fetch data');\r\n    }\r\n    \r\n    // JSON 파싱 시도\r\n    let jsonData;\r\n    try {\r\n      jsonData = JSON.parse(data);\r\n    } catch (error) {\r\n      console.log('❌ Failed to parse JSON, using dummy data');\r\n      throw new Error('Invalid JSON response');\r\n    }\r\n    \r\n    // Yahoo Finance API 응답 구조에서 데이터 추출\r\n    if (jsonData.chart && jsonData.chart.result && jsonData.chart.result[0]) {\r\n      const result = jsonData.chart.result[0];\r\n      const meta = result.meta;\r\n      \r\n      if (meta) {\r\n        const currentPrice = meta.regularMarketPrice;\r\n        const previousClose = meta.previousClose;\r\n        const change = currentPrice - previousClose;\r\n        \r\n        console.log(`✅ Successfully fetched S&P 500 Dividend Futures: ${currentPrice}% (${change >= 0 ? '+' : ''}${change.toFixed(2)})`);\r\n        return {\r\n          title: 'S&P 500 Annual Dividend Futures',\r\n          value: currentPrice,\r\n          change: Math.round(change * 100) / 100,\r\n          isPositive: change >= 0,\r\n          symbol: symbol,\r\n          unit: '%',\r\n          description: 'S&P 500 연간 배당률 선물',\r\n          isRealData: true,\r\n          dataSource: 'Yahoo Finance'\r\n        };\r\n      }\r\n    }\r\n    \r\n    throw new Error('No valid data found for S&P 500 Dividend Futures');\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching S&P 500 Dividend Futures:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'S&P 500 Annual Dividend Futures');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for S&P 500 Dividend Futures');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// World Citi Economic Surprise Index 가져오기 (MacroMicro)\r\nexport const fetchCitiEconomicSurpriseIndex = async () => {\r\n  try {\r\n    console.log('🔄 Fetching World Citi Economic Surprise Index from MacroMicro...');\r\n    \r\n    const url = 'https://en.macromicro.me/charts/45866/global-citi-surprise-index';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    // 여러 방법으로 시도\r\n    let data = null;\r\n    let lastError = null;\r\n    \r\n    // 방법 1: 프록시 서버들 시도\r\n    try {\r\n      data = await fetchWithProxy(url);\r\n      console.log('✅ Successfully fetched data using proxy');\r\n    } catch (error) {\r\n      console.log('❌ Proxy method failed:', error.message);\r\n      lastError = error;\r\n    }\r\n    \r\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying direct fetch...');\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\r\n            'Cache-Control': 'no-cache'\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          data = await response.text();\r\n          console.log('✅ Successfully fetched data using direct fetch');\r\n        } else {\r\n          throw new Error(`Direct fetch failed: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ Direct fetch failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    // 방법 3: JSONP 방식 시도 (MacroMicro에서 지원하는 경우)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying JSONP approach...');\r\n        // JSONP는 동적 스크립트 로딩을 통해 CORS를 우회\r\n        const script = document.createElement('script');\r\n        script.src = url + '?callback=handleMacroData';\r\n        \r\n        // 전역 콜백 함수 정의\r\n        window.handleMacroData = function(jsonData) {\r\n          console.log('✅ JSONP callback received:', jsonData);\r\n          data = JSON.stringify(jsonData);\r\n        };\r\n        \r\n        document.head.appendChild(script);\r\n        \r\n        // 5초 대기\r\n        await new Promise(resolve => setTimeout(resolve, 5000));\r\n        \r\n        if (data) {\r\n          console.log('✅ Successfully fetched data using JSONP');\r\n        } else {\r\n          throw new Error('JSONP timeout');\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ JSONP method failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    if (!data) {\r\n      console.log('❌ All methods failed, using dummy data');\r\n      console.log('🔍 Last error:', lastError);\r\n      \r\n      // 실패 시 더미 데이터 사용\r\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'World Citi Economic Surprise Index');\r\n      if (dummyData) {\r\n        console.log('📊 Using dummy data for Citi Economic Surprise Index');\r\n        return {\r\n          ...dummyData,\r\n          isRealData: false,\r\n          dataSource: 'Dummy Data (All methods failed)'\r\n        };\r\n      }\r\n      \r\n      throw new Error('All data fetching methods failed');\r\n    }\r\n    \r\n    console.log(`📄 Total HTML length: ${data.length} characters`);\r\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\r\n    \r\n    // \"Latest Stats\" 텍스트 찾기\r\n    const latestStatsIndex = data.indexOf('Latest Stats');\r\n    if (latestStatsIndex === -1) {\r\n      console.log('❌ \"Latest Stats\" text not found');\r\n      console.log('🔍 Searching for alternative patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const alternativePatterns = [\r\n        'Latest Stats',\r\n        'latest stats',\r\n        'LATEST STATS',\r\n        'Latest Statistics',\r\n        'Statistics',\r\n        'Stats'\r\n      ];\r\n      \r\n      for (const pattern of alternativePatterns) {\r\n        const index = data.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      // HTML에서 \"Citigroup\" 관련 텍스트 찾기\r\n      const citigroupIndex = data.indexOf('Citigroup');\r\n      if (citigroupIndex !== -1) {\r\n        console.log(`✅ Found \"Citigroup\" at index ${citigroupIndex}`);\r\n        console.log('📄 Context around Citigroup:', data.substring(citigroupIndex - 100, citigroupIndex + 200));\r\n      }\r\n      \r\n      throw new Error('Latest Stats section not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"Latest Stats\" section at index ${latestStatsIndex}`);\r\n    \r\n    // \"Latest Stats\" 이후의 HTML에서 \"Citigroup Economic Surprise Index: Global\" 찾기\r\n    const afterLatestStats = data.substring(latestStatsIndex);\r\n    console.log('📄 After Latest Stats (first 1000 chars):', afterLatestStats.substring(0, 1000));\r\n    \r\n    const citiIndexIndex = afterLatestStats.indexOf('Citigroup Economic Surprise Index: Global');\r\n    if (citiIndexIndex === -1) {\r\n      console.log('❌ \"Citigroup Economic Surprise Index: Global\" text not found');\r\n      console.log('🔍 Searching for alternative Citigroup patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const citigroupPatterns = [\r\n        'Citigroup Economic Surprise Index: Global',\r\n        'Citigroup Economic Surprise Index',\r\n        'Economic Surprise Index: Global',\r\n        'Economic Surprise Index',\r\n        'Surprise Index: Global',\r\n        'Surprise Index'\r\n      ];\r\n      \r\n      for (const pattern of citigroupPatterns) {\r\n        const index = afterLatestStats.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          console.log('📄 Context around pattern:', afterLatestStats.substring(index - 50, index + 200));\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Citigroup Economic Surprise Index: Global not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"Citigroup Economic Surprise Index: Global\" text at index ${citiIndexIndex}`);\r\n    \r\n    // \"Citigroup Economic Surprise Index: Global\" 이후의 HTML에서 날짜와 값 찾기\r\n    const afterCitiIndex = afterLatestStats.substring(citiIndexIndex);\r\n    console.log('📄 After Citigroup pattern (first 500 chars):', afterCitiIndex.substring(0, 500));\r\n    \r\n    // YYYY-MM-DD 패턴 찾기\r\n    const datePattern = /\\d{4}-\\d{2}-\\d{2}/;\r\n    const dateMatch = afterCitiIndex.match(datePattern);\r\n    \r\n    if (!dateMatch) {\r\n      console.log('❌ Date pattern not found');\r\n      console.log('🔍 Searching for any date-like patterns...');\r\n      \r\n      // 다른 날짜 패턴들 시도\r\n      const datePatterns = [\r\n        /\\d{4}-\\d{2}-\\d{2}/,  // YYYY-MM-DD\r\n        /\\d{2}-\\d{2}-\\d{4}/,  // MM-DD-YYYY\r\n        /\\d{4}\\/\\d{2}\\/\\d{2}/, // YYYY/MM/DD\r\n        /\\d{2}\\/\\d{2}\\/\\d{4}/  // MM/DD/YYYY\r\n      ];\r\n      \r\n      for (const pattern of datePatterns) {\r\n        const match = afterCitiIndex.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found date pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Date pattern not found');\r\n    }\r\n    \r\n    const dateFound = dateMatch[0];\r\n    console.log(`✅ Found date: ${dateFound}`);\r\n    \r\n    // 날짜 이후의 HTML에서 숫자 값 찾기 (더 정확한 패턴)\r\n    const dateIndex = afterCitiIndex.indexOf(dateFound);\r\n    const afterDate = afterCitiIndex.substring(dateIndex + dateFound.length);\r\n    console.log('📄 After date (first 300 chars):', afterDate.substring(0, 300));\r\n    \r\n    // 숫자 패턴 찾기 (소수점 포함, 더 정확한 매칭)\r\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\r\n    const numberMatch = afterDate.match(numberPattern);\r\n    \r\n    if (!numberMatch) {\r\n      console.log('❌ Number value not found after date');\r\n      console.log('🔍 Searching for any number patterns...');\r\n      \r\n      // 다른 숫자 패턴들 시도\r\n      const numberPatterns = [\r\n        /[-+]?\\d+\\.\\d+/,  // 소수점 포함\r\n        /[-+]?\\d+/,       // 정수만\r\n        /\\d+\\.\\d+/        // 양수 소수점\r\n      ];\r\n      \r\n      for (const pattern of numberPatterns) {\r\n        const match = afterDate.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found number pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Number value not found after date');\r\n    }\r\n    \r\n    const currentValue = parseFloat(numberMatch[0]);\r\n    console.log(`✅ Successfully extracted Citi Economic Surprise Index: ${currentValue}`);\r\n    \r\n    // 이전 값도 찾아보기 (Prev: 패턴)\r\n    const prevPattern = /Prev:\\s*([-+]?\\d+\\.\\d+)/;\r\n    const prevMatch = afterDate.match(prevPattern);\r\n    let change = 0.00;\r\n    \r\n    if (prevMatch) {\r\n      const prevValue = parseFloat(prevMatch[1]);\r\n      change = currentValue - prevValue;\r\n      console.log(`✅ Found previous value: ${prevValue}, change: ${change}`);\r\n    } else {\r\n      console.log('⚠️ Previous value not found, using 0.00 for change');\r\n    }\r\n    \r\n    return {\r\n      title: 'World Citi Economic Surprise Index',\r\n      value: currentValue,\r\n      change: Math.round(change * 100) / 100,\r\n      isPositive: currentValue >= 0,\r\n      symbol: 'CITI_SURPRISE',\r\n      unit: '',\r\n      description: '글로벌 경제 서프라이즈 지수',\r\n      isRealData: true,\r\n      dataSource: 'MacroMicro'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching Citi Economic Surprise Index:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'World Citi Economic Surprise Index');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for Citi Economic Surprise Index');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// 5-Year 5-Year Forward Inflation Expectation Rate 가져오기 (FRED)\r\nexport const fetchInflationExpectationRate = async () => {\r\n  try {\r\n    console.log('🔄 Fetching 5-Year 5-Year Forward Inflation Expectation Rate from FRED...');\r\n    \r\n    const url = 'https://fred.stlouisfed.org/series/T5YIFR';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const data = await fetchWithProxy(url);\r\n    \r\n    if (!data) {\r\n      throw new Error('Failed to fetch data');\r\n    }\r\n    \r\n    // FRED 페이지에서 데이터 추출 시도\r\n    console.log('📄 HTML Preview:', data.substring(0, 1000));\r\n    \r\n    // FRED 페이지에서 최신 값 추출 (2025-08-12: 2.33 형태)\r\n    const latestValueMatch = data.match(/2025-\\d{2}-\\d{2}:\\s*(\\d+\\.\\d+)/);\r\n    if (latestValueMatch) {\r\n      const currentValue = parseFloat(latestValueMatch[1]);\r\n      console.log(`✅ Successfully extracted inflation expectation rate: ${currentValue}%`);\r\n      \r\n      return {\r\n        title: '5-Year 5-Year Forward Inflation Expectation Rate',\r\n        value: currentValue,\r\n        change: 0.00, // FRED에서는 변화량을 직접 제공하지 않으므로 0으로 설정\r\n        isPositive: true,\r\n        symbol: 'T5YIFR',\r\n        unit: '%',\r\n        description: '5년 후 5년 인플레이션 기대율',\r\n        isRealData: true,\r\n        dataSource: 'FRED (Federal Reserve Economic Data)'\r\n      };\r\n    }\r\n    \r\n    // 임시로 더미 데이터 반환\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === '5-Year 5-Year Forward Inflation Expectation Rate');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for Inflation Expectation Rate (parsing not implemented)');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Parsing not implemented)'\r\n      };\r\n    }\r\n    \r\n    throw new Error('No valid data found for Inflation Expectation Rate');\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching Inflation Expectation Rate:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === '5-Year 5-Year Forward Inflation Expectation Rate');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for Inflation Expectation Rate');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// US Core Inflation Rate YoY 가져오기 (Trading Economics)\r\nexport const fetchUSCoreInflationRate = async () => {\r\n  try {\r\n    console.log('🔄 Fetching US Core Inflation Rate YoY from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/united-states/core-inflation-rate';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    // 여러 방법으로 시도\r\n    let data = null;\r\n    let lastError = null;\r\n    \r\n    // 방법 1: 프록시 서버들 시도\r\n    try {\r\n      data = await fetchWithProxy(url);\r\n      console.log('✅ Successfully fetched data using proxy');\r\n    } catch (error) {\r\n      console.log('❌ Proxy method failed:', error.message);\r\n      lastError = error;\r\n    }\r\n    \r\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying direct fetch...');\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\r\n            'Cache-Control': 'no-cache'\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          data = await response.text();\r\n          console.log('✅ Successfully fetched data using direct fetch');\r\n        } else {\r\n          throw new Error(`Direct fetch failed: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ Direct fetch failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    if (!data) {\r\n      console.log('❌ All methods failed, using dummy data');\r\n      console.log('🔍 Last error:', lastError);\r\n      \r\n      // 실패 시 더미 데이터 사용\r\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core Inflation Rate YoY');\r\n      if (dummyData) {\r\n        console.log('📊 Using dummy data for US Core Inflation Rate');\r\n        return {\r\n          ...dummyData,\r\n          isRealData: false,\r\n          dataSource: 'Dummy Data (All methods failed)'\r\n        };\r\n      }\r\n      \r\n      throw new Error('All data fetching methods failed');\r\n    }\r\n    \r\n    console.log(`📄 Total HTML length: ${data.length} characters`);\r\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\r\n    \r\n    // Trading Economics 페이지에서 데이터 추출 시도\r\n    // \"Core Inflation Rate\" 텍스트 찾기\r\n    const coreInflationIndex = data.indexOf('Core Inflation Rate');\r\n    if (coreInflationIndex === -1) {\r\n      console.log('❌ \"Core Inflation Rate\" text not found');\r\n      console.log('🔍 Searching for alternative patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const alternativePatterns = [\r\n        'Core Inflation Rate',\r\n        'core inflation rate',\r\n        'CORE INFLATION RATE',\r\n        'Inflation Rate',\r\n        'inflation rate'\r\n      ];\r\n      \r\n      for (const pattern of alternativePatterns) {\r\n        const index = data.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Core Inflation Rate section not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"Core Inflation Rate\" at index ${coreInflationIndex}`);\r\n    \r\n    // \"Core Inflation Rate\" 이후의 HTML에서 숫자 값 찾기\r\n    const afterCoreInflation = data.substring(coreInflationIndex);\r\n    console.log('📄 After Core Inflation Rate (first 1000 chars):', afterCoreInflation.substring(0, 1000));\r\n    \r\n    // 숫자 패턴 찾기 (소수점 포함)\r\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\r\n    const numberMatch = afterCoreInflation.match(numberPattern);\r\n    \r\n    if (!numberMatch) {\r\n      console.log('❌ Number value not found');\r\n      console.log('🔍 Searching for any number patterns...');\r\n      \r\n      // 다른 숫자 패턴들 시도\r\n      const numberPatterns = [\r\n        /[-+]?\\d+\\.\\d+/,  // 소수점 포함\r\n        /[-+]?\\d+/,       // 정수만\r\n        /\\d+\\.\\d+/        // 양수 소수점\r\n      ];\r\n      \r\n      for (const pattern of numberPatterns) {\r\n        const match = afterCoreInflation.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found number pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Number value not found');\r\n    }\r\n    \r\n    const currentValue = parseFloat(numberMatch[0]);\r\n    console.log(`✅ Successfully extracted US Core Inflation Rate: ${currentValue}%`);\r\n    \r\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core Inflation Rate YoY');\r\n    const change = dummyData ? dummyData.change : 0.00;\r\n    \r\n    return {\r\n      title: 'US Core Inflation Rate YoY',\r\n      value: currentValue,\r\n      change: change,\r\n      isPositive: change >= 0,\r\n      symbol: 'US_CORE_INFLATION',\r\n      unit: '%',\r\n      description: '미국 핵심 인플레이션률 (전년 동기 대비)',\r\n      isRealData: true,\r\n      dataSource: 'Trading Economics'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching US Core Inflation Rate:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core Inflation Rate YoY');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for US Core Inflation Rate');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// US Core PCE YoY 가져오기 (Trading Economics)\r\nexport const fetchUSCorePCE = async () => {\r\n  try {\r\n    console.log('🔄 Fetching US Core PCE YoY from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/united-states/core-pce-price-index-annual-change';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    // 여러 방법으로 시도\r\n    let data = null;\r\n    let lastError = null;\r\n    \r\n    // 방법 1: 프록시 서버들 시도\r\n    try {\r\n      data = await fetchWithProxy(url);\r\n      console.log('✅ Successfully fetched data using proxy');\r\n    } catch (error) {\r\n      console.log('❌ Proxy method failed:', error.message);\r\n      lastError = error;\r\n    }\r\n    \r\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying direct fetch...');\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\r\n            'Cache-Control': 'no-cache'\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          data = await response.text();\r\n          console.log('✅ Successfully fetched data using direct fetch');\r\n        } else {\r\n          throw new Error(`Direct fetch failed: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ Direct fetch failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    if (!data) {\r\n      console.log('❌ All methods failed, using dummy data');\r\n      console.log('🔍 Last error:', lastError);\r\n      \r\n      // 실패 시 더미 데이터 사용\r\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core PCE YoY');\r\n      if (dummyData) {\r\n        console.log('📊 Using dummy data for US Core PCE');\r\n        return {\r\n          ...dummyData,\r\n          isRealData: false,\r\n          dataSource: 'Dummy Data (All methods failed)'\r\n        };\r\n      }\r\n      \r\n      throw new Error('All data fetching methods failed');\r\n    }\r\n    \r\n    console.log(`📄 Total HTML length: ${data.length} characters`);\r\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\r\n    \r\n    // Trading Economics 페이지에서 데이터 추출 시도\r\n    // \"Core PCE Price Index\" 텍스트 찾기\r\n    const corePCEIndex = data.indexOf('Core PCE Price Index');\r\n    if (corePCEIndex === -1) {\r\n      console.log('❌ \"Core PCE Price Index\" text not found');\r\n      console.log('🔍 Searching for alternative patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const alternativePatterns = [\r\n        'Core PCE Price Index',\r\n        'core pce price index',\r\n        'CORE PCE PRICE INDEX',\r\n        'PCE Price Index',\r\n        'pce price index',\r\n        'PCE',\r\n        'pce'\r\n      ];\r\n      \r\n      for (const pattern of alternativePatterns) {\r\n        const index = data.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Core PCE Price Index section not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"Core PCE Price Index\" at index ${corePCEIndex}`);\r\n    \r\n    // \"Core PCE Price Index\" 이후의 HTML에서 숫자 값 찾기\r\n    const afterCorePCE = data.substring(corePCEIndex);\r\n    console.log('📄 After Core PCE Price Index (first 1000 chars):', afterCorePCE.substring(0, 1000));\r\n    \r\n    // 숫자 패턴 찾기 (소수점 포함)\r\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\r\n    const numberMatch = afterCorePCE.match(numberPattern);\r\n    \r\n    if (!numberMatch) {\r\n      console.log('❌ Number value not found');\r\n      console.log('🔍 Searching for any number patterns...');\r\n      \r\n      // 다른 숫자 패턴들 시도\r\n      const numberPatterns = [\r\n        /[-+]?\\d+\\.\\d+/,  // 소수점 포함\r\n        /[-+]?\\d+/,       // 정수만\r\n        /\\d+\\.\\d+/        // 양수 소수점\r\n      ];\r\n      \r\n      for (const pattern of numberPatterns) {\r\n        const match = afterCorePCE.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found number pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Number value not found');\r\n    }\r\n    \r\n    const currentValue = parseFloat(numberMatch[0]);\r\n    console.log(`✅ Successfully extracted US Core PCE: ${currentValue}%`);\r\n    \r\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core PCE YoY');\r\n    const change = dummyData ? dummyData.change : 0.00;\r\n    \r\n    return {\r\n      title: 'US Core PCE YoY',\r\n      value: currentValue,\r\n      change: change,\r\n      isPositive: change >= 0,\r\n      symbol: 'US_CORE_PCE',\r\n      unit: '%',\r\n      description: '미국 핵심 PCE 물가지수 (전년 동기 대비)',\r\n      isRealData: true,\r\n      dataSource: 'Trading Economics'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching US Core PCE:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core PCE YoY');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for US Core PCE');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// US Core PPI YoY 가져오기 (Trading Economics)\r\nexport const fetchUSCorePPI = async () => {\r\n  try {\r\n    console.log('🔄 Fetching US Core PPI YoY from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/united-states/core-producer-prices-yoy';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    // 여러 방법으로 시도\r\n    let data = null;\r\n    let lastError = null;\r\n    \r\n    // 방법 1: 프록시 서버들 시도\r\n    try {\r\n      data = await fetchWithProxy(url);\r\n      console.log('✅ Successfully fetched data using proxy');\r\n    } catch (error) {\r\n      console.log('❌ Proxy method failed:', error.message);\r\n      lastError = error;\r\n    }\r\n    \r\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying direct fetch...');\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\r\n            'Cache-Control': 'no-cache'\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          data = await response.text();\r\n          console.log('✅ Successfully fetched data using direct fetch');\r\n        } else {\r\n          throw new Error(`Direct fetch failed: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ Direct fetch failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    if (!data) {\r\n      console.log('❌ All methods failed, using dummy data');\r\n      console.log('🔍 Last error:', lastError);\r\n      \r\n      // 실패 시 더미 데이터 사용\r\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core PPI YoY');\r\n      if (dummyData) {\r\n        console.log('📊 Using dummy data for US Core PPI');\r\n        return {\r\n          ...dummyData,\r\n          isRealData: false,\r\n          dataSource: 'Dummy Data (All methods failed)'\r\n        };\r\n      }\r\n      \r\n      throw new Error('All data fetching methods failed');\r\n    }\r\n    \r\n    console.log(`📄 Total HTML length: ${data.length} characters`);\r\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\r\n    \r\n    // Trading Economics 페이지에서 데이터 추출 시도\r\n    // \"Core PPI\" 텍스트 찾기\r\n    const corePPIIndex = data.indexOf('Core PPI');\r\n    if (corePPIIndex === -1) {\r\n      console.log('❌ \"Core PPI\" text not found');\r\n      console.log('🔍 Searching for alternative patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const alternativePatterns = [\r\n        'Core PPI',\r\n        'core ppi',\r\n        'CORE PPI',\r\n        'PPI',\r\n        'ppi'\r\n      ];\r\n      \r\n      for (const pattern of alternativePatterns) {\r\n        const index = data.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Core PPI section not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"Core PPI\" at index ${corePPIIndex}`);\r\n    \r\n    // \"Core PPI\" 이후의 HTML에서 숫자 값 찾기\r\n    const afterCorePPI = data.substring(corePPIIndex);\r\n    console.log('📄 After Core PPI (first 1000 chars):', afterCorePPI.substring(0, 1000));\r\n    \r\n    // 숫자 패턴 찾기 (소수점 포함)\r\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\r\n    const numberMatch = afterCorePPI.match(numberPattern);\r\n    \r\n    if (!numberMatch) {\r\n      console.log('❌ Number value not found');\r\n      console.log('🔍 Searching for any number patterns...');\r\n      \r\n      // 다른 숫자 패턴들 시도\r\n      const numberPatterns = [\r\n        /[-+]?\\d+\\.\\d+/,  // 소수점 포함\r\n        /[-+]?\\d+/,       // 정수만\r\n        /\\d+\\.\\d+/        // 양수 소수점\r\n      ];\r\n      \r\n      for (const pattern of numberPatterns) {\r\n        const match = afterCorePPI.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found number pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Number value not found');\r\n    }\r\n    \r\n    const currentValue = parseFloat(numberMatch[0]);\r\n    console.log(`✅ Successfully extracted US Core PPI: ${currentValue}%`);\r\n    \r\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core PPI YoY');\r\n    const change = dummyData ? dummyData.change : 0.00;\r\n    \r\n    return {\r\n      title: 'US Core PPI YoY',\r\n      value: currentValue,\r\n      change: change,\r\n      isPositive: change >= 0,\r\n      symbol: 'US_CORE_PPI',\r\n      unit: '%',\r\n      description: '미국 핵심 PPI 물가지수 (전년 동기 대비)',\r\n      isRealData: true,\r\n      dataSource: 'Trading Economics'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching US Core PPI:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Core PPI YoY');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for US Core PPI');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// US Money Supply M2 가져오기 (Trading Economics)\r\nexport const fetchUSMoneySupplyM2 = async () => {\r\n  try {\r\n    console.log('🔄 Fetching US Money Supply M2 from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/united-states/money-supply-m2';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    // 여러 방법으로 시도\r\n    let data = null;\r\n    let lastError = null;\r\n    \r\n    // 방법 1: 프록시 서버들 시도\r\n    try {\r\n      data = await fetchWithProxy(url);\r\n      console.log('✅ Successfully fetched data using proxy');\r\n    } catch (error) {\r\n      console.log('❌ Proxy method failed:', error.message);\r\n      lastError = error;\r\n    }\r\n    \r\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying direct fetch...');\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\r\n            'Cache-Control': 'no-cache'\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          data = await response.text();\r\n          console.log('✅ Successfully fetched data using direct fetch');\r\n        } else {\r\n          throw new Error(`Direct fetch failed: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ Direct fetch failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    if (!data) {\r\n      console.log('❌ All methods failed, using dummy data');\r\n      console.log('🔍 Last error:', lastError);\r\n      \r\n      // 실패 시 더미 데이터 사용\r\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Money Supply M2');\r\n      if (dummyData) {\r\n        console.log('📊 Using dummy data for US Money Supply M2');\r\n        return {\r\n          ...dummyData,\r\n          isRealData: false,\r\n          dataSource: 'Dummy Data (All methods failed)'\r\n        };\r\n      }\r\n      \r\n      throw new Error('All data fetching methods failed');\r\n    }\r\n    \r\n    console.log(`📄 Total HTML length: ${data.length} characters`);\r\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\r\n    \r\n    // Trading Economics 페이지에서 데이터 추출 시도\r\n    // \"Money Supply M2\" 텍스트 찾기\r\n    const moneySupplyIndex = data.indexOf('Money Supply M2');\r\n    if (moneySupplyIndex === -1) {\r\n      console.log('❌ \"Money Supply M2\" text not found');\r\n      console.log('🔍 Searching for alternative patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const alternativePatterns = [\r\n        'Money Supply M2',\r\n        'money supply m2',\r\n        'MONEY SUPPLY M2',\r\n        'Money Supply',\r\n        'money supply'\r\n      ];\r\n      \r\n      for (const pattern of alternativePatterns) {\r\n        const index = data.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Money Supply M2 section not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"Money Supply M2\" at index ${moneySupplyIndex}`);\r\n    \r\n    // \"Money Supply M2\" 이후의 HTML에서 숫자 값 찾기\r\n    const afterMoneySupply = data.substring(moneySupplyIndex);\r\n    console.log('📄 After Money Supply M2 (first 1000 chars):', afterMoneySupply.substring(0, 1000));\r\n    \r\n    // 숫자 패턴 찾기 (소수점 포함)\r\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\r\n    const numberMatch = afterMoneySupply.match(numberPattern);\r\n    \r\n    if (!numberMatch) {\r\n      console.log('❌ Number value not found');\r\n      console.log('🔍 Searching for any number patterns...');\r\n      \r\n      // 다른 숫자 패턴들 시도\r\n      const numberPatterns = [\r\n        /[-+]?\\d+\\.\\d+/,  // 소수점 포함\r\n        /[-+]?\\d+/,       // 정수만\r\n        /\\d+\\.\\d+/        // 양수 소수점\r\n      ];\r\n      \r\n      for (const pattern of numberPatterns) {\r\n        const match = afterMoneySupply.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found number pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Number value not found');\r\n    }\r\n    \r\n    const currentValue = parseFloat(numberMatch[0]);\r\n    console.log(`✅ Successfully extracted US Money Supply M2: ${currentValue}`);\r\n    \r\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Money Supply M2');\r\n    const change = dummyData ? dummyData.change : 0.00;\r\n    \r\n    return {\r\n      title: 'US Money Supply M2',\r\n      value: currentValue,\r\n      change: change,\r\n      isPositive: change >= 0,\r\n      symbol: 'US_M2',\r\n      unit: '',\r\n      description: '미국 핵심 M2 통화량 (전년 동기 대비)',\r\n      isRealData: true,\r\n      dataSource: 'Trading Economics'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching US Money Supply M2:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Money Supply M2');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for US Money Supply M2');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// US SOFR 가져오기 (Trading Economics)\r\nexport const fetchUSSOFR = async () => {\r\n  try {\r\n    console.log('🔄 Fetching US SOFR from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/united-states/secured-overnight-financing-rate';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    // 여러 방법으로 시도\r\n    let data = null;\r\n    let lastError = null;\r\n    \r\n    // 방법 1: 프록시 서버들 시도\r\n    try {\r\n      data = await fetchWithProxy(url);\r\n      console.log('✅ Successfully fetched data using proxy');\r\n    } catch (error) {\r\n      console.log('❌ Proxy method failed:', error.message);\r\n      lastError = error;\r\n    }\r\n    \r\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying direct fetch...');\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\r\n            'Cache-Control': 'no-cache'\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          data = await response.text();\r\n          console.log('✅ Successfully fetched data using direct fetch');\r\n        } else {\r\n          throw new Error(`Direct fetch failed: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ Direct fetch failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    if (!data) {\r\n      console.log('❌ All methods failed, using dummy data');\r\n      console.log('🔍 Last error:', lastError);\r\n      \r\n      // 실패 시 더미 데이터 사용\r\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US SOFR');\r\n      if (dummyData) {\r\n        console.log('📊 Using dummy data for US SOFR');\r\n        return {\r\n          ...dummyData,\r\n          isRealData: false,\r\n          dataSource: 'Dummy Data (All methods failed)'\r\n        };\r\n      }\r\n      \r\n      throw new Error('All data fetching methods failed');\r\n    }\r\n    \r\n    console.log(`📄 Total HTML length: ${data.length} characters`);\r\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\r\n    \r\n    // Trading Economics 페이지에서 데이터 추출 시도\r\n    // \"SOFR\" 텍스트 찾기\r\n    const sofrIndex = data.indexOf('SOFR');\r\n    if (sofrIndex === -1) {\r\n      console.log('❌ \"SOFR\" text not found');\r\n      console.log('🔍 Searching for alternative patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const alternativePatterns = [\r\n        'SOFR',\r\n        'sofr',\r\n        'Secured Overnight Financing Rate',\r\n        'secured overnight financing rate',\r\n        'Overnight Financing Rate',\r\n        'overnight financing rate'\r\n      ];\r\n      \r\n      for (const pattern of alternativePatterns) {\r\n        const index = data.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('SOFR section not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"SOFR\" at index ${sofrIndex}`);\r\n    \r\n    // \"SOFR\" 이후의 HTML에서 숫자 값 찾기\r\n    const afterSOFR = data.substring(sofrIndex);\r\n    console.log('📄 After SOFR (first 1000 chars):', afterSOFR.substring(0, 1000));\r\n    \r\n    // 숫자 패턴 찾기 (소수점 포함)\r\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\r\n    const numberMatch = afterSOFR.match(numberPattern);\r\n    \r\n    if (!numberMatch) {\r\n      console.log('❌ Number value not found');\r\n      console.log('🔍 Searching for any number patterns...');\r\n      \r\n      // 다른 숫자 패턴들 시도\r\n      const numberPatterns = [\r\n        /[-+]?\\d+\\.\\d+/,  // 소수점 포함\r\n        /[-+]?\\d+/,       // 정수만\r\n        /\\d+\\.\\d+/        // 양수 소수점\r\n      ];\r\n      \r\n      for (const pattern of numberPatterns) {\r\n        const match = afterSOFR.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found number pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Number value not found');\r\n    }\r\n    \r\n    const currentValue = parseFloat(numberMatch[0]);\r\n    console.log(`✅ Successfully extracted US SOFR: ${currentValue}%`);\r\n    \r\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US SOFR');\r\n    const change = dummyData ? dummyData.change : 0.00;\r\n    \r\n    return {\r\n      title: 'US SOFR',\r\n      value: currentValue,\r\n      change: change,\r\n      isPositive: change >= 0,\r\n      symbol: 'US_SOFR',\r\n      unit: '%',\r\n      description: '미국 담보부 하루물 금리',\r\n      isRealData: true,\r\n      dataSource: 'Trading Economics'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching US SOFR:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US SOFR');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for US SOFR');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// US 30Y Mortgage Rate 가져오기 (Trading Economics)\r\nexport const fetchUS30YMortgageRate = async () => {\r\n  try {\r\n    console.log('🔄 Fetching US 30Y Mortgage Rate from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/united-states/30-year-mortgage-rate';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    // 여러 방법으로 시도\r\n    let data = null;\r\n    let lastError = null;\r\n    \r\n    // 방법 1: 프록시 서버들 시도\r\n    try {\r\n      data = await fetchWithProxy(url);\r\n      console.log('✅ Successfully fetched data using proxy');\r\n    } catch (error) {\r\n      console.log('❌ Proxy method failed:', error.message);\r\n      lastError = error;\r\n    }\r\n    \r\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying direct fetch...');\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\r\n            'Cache-Control': 'no-cache'\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          data = await response.text();\r\n          console.log('✅ Successfully fetched data using direct fetch');\r\n        } else {\r\n          throw new Error(`Direct fetch failed: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ Direct fetch failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    if (!data) {\r\n      console.log('❌ All methods failed, using dummy data');\r\n      console.log('🔍 Last error:', lastError);\r\n      \r\n      // 실패 시 더미 데이터 사용\r\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US 30Y Mortgage Rate');\r\n      if (dummyData) {\r\n        console.log('📊 Using dummy data for US 30Y Mortgage Rate');\r\n        return {\r\n          ...dummyData,\r\n          isRealData: false,\r\n          dataSource: 'Dummy Data (All methods failed)'\r\n        };\r\n      }\r\n      \r\n      throw new Error('All data fetching methods failed');\r\n    }\r\n    \r\n    console.log(`📄 Total HTML length: ${data.length} characters`);\r\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\r\n    \r\n    // Trading Economics 페이지에서 데이터 추출 시도\r\n    // \"30-Year Mortgage Rate\" 텍스트 찾기\r\n    const mortgageRateIndex = data.indexOf('30-Year Mortgage Rate');\r\n    if (mortgageRateIndex === -1) {\r\n      console.log('❌ \"30-Year Mortgage Rate\" text not found');\r\n      console.log('🔍 Searching for alternative patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const alternativePatterns = [\r\n        '30-Year Mortgage Rate',\r\n        '30 year mortgage rate',\r\n        '30-Year Mortgage',\r\n        '30 year mortgage',\r\n        'Mortgage Rate',\r\n        'mortgage rate'\r\n      ];\r\n      \r\n      for (const pattern of alternativePatterns) {\r\n        const index = data.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('30-Year Mortgage Rate section not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"30-Year Mortgage Rate\" at index ${mortgageRateIndex}`);\r\n    \r\n    // \"30-Year Mortgage Rate\" 이후의 HTML에서 숫자 값 찾기\r\n    const afterMortgageRate = data.substring(mortgageRateIndex);\r\n    console.log('📄 After 30-Year Mortgage Rate (first 1000 chars):', afterMortgageRate.substring(0, 1000));\r\n    \r\n    // 숫자 패턴 찾기 (소수점 포함)\r\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\r\n    const numberMatch = afterMortgageRate.match(numberPattern);\r\n    \r\n    if (!numberMatch) {\r\n      console.log('❌ Number value not found');\r\n      console.log('🔍 Searching for any number patterns...');\r\n      \r\n      // 다른 숫자 패턴들 시도\r\n      const numberPatterns = [\r\n        /[-+]?\\d+\\.\\d+/,  // 소수점 포함\r\n        /[-+]?\\d+/,       // 정수만\r\n        /\\d+\\.\\d+/        // 양수 소수점\r\n      ];\r\n      \r\n      for (const pattern of numberPatterns) {\r\n        const match = afterMortgageRate.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found number pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Number value not found');\r\n    }\r\n    \r\n    const currentValue = parseFloat(numberMatch[0]);\r\n    console.log(`✅ Successfully extracted US 30Y Mortgage Rate: ${currentValue}%`);\r\n    \r\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US 30Y Mortgage Rate');\r\n    const change = dummyData ? dummyData.change : 0.00;\r\n    \r\n    return {\r\n      title: 'US 30Y Mortgage Rate',\r\n      value: currentValue,\r\n      change: change,\r\n      isPositive: change >= 0,\r\n      symbol: 'US_30Y_MORTGAGE',\r\n      unit: '%',\r\n      description: '미국 30년 주택담보대출 금리',\r\n      isRealData: true,\r\n      dataSource: 'Trading Economics'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching US 30Y Mortgage Rate:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US 30Y Mortgage Rate');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for US 30Y Mortgage Rate');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// US New House Price 가져오기 (Trading Economics)\r\nexport const fetchUSNewHousePrice = async () => {\r\n  try {\r\n    console.log('🔄 Fetching US New House Price from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/united-states/average-house-prices';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    // 여러 방법으로 시도\r\n    let data = null;\r\n    let lastError = null;\r\n    \r\n    // 방법 1: 프록시 서버들 시도\r\n    try {\r\n      data = await fetchWithProxy(url);\r\n      console.log('✅ Successfully fetched data using proxy');\r\n    } catch (error) {\r\n      console.log('❌ Proxy method failed:', error.message);\r\n      lastError = error;\r\n    }\r\n    \r\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying direct fetch...');\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\r\n            'Cache-Control': 'no-cache'\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          data = await response.text();\r\n          console.log('✅ Successfully fetched data using direct fetch');\r\n        } else {\r\n          throw new Error(`Direct fetch failed: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ Direct fetch failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    if (!data) {\r\n      console.log('❌ All methods failed, using dummy data');\r\n      console.log('🔍 Last error:', lastError);\r\n      \r\n      // 실패 시 더미 데이터 사용\r\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US New House Price');\r\n      if (dummyData) {\r\n        console.log('📊 Using dummy data for US New House Price');\r\n        return {\r\n          ...dummyData,\r\n          isRealData: false,\r\n          dataSource: 'Dummy Data (All methods failed)'\r\n        };\r\n      }\r\n      \r\n      throw new Error('All data fetching methods failed');\r\n    }\r\n    \r\n    console.log(`📄 Total HTML length: ${data.length} characters`);\r\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\r\n    \r\n    // Trading Economics 페이지에서 데이터 추출 시도\r\n    // \"Average House Prices\" 텍스트 찾기\r\n    const averageHousePricesIndex = data.indexOf('Average House Prices');\r\n    if (averageHousePricesIndex === -1) {\r\n      console.log('❌ \"Average House Prices\" text not found');\r\n      console.log('🔍 Searching for alternative patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const alternativePatterns = [\r\n        'Average House Prices',\r\n        'average house prices',\r\n        'AVERAGE HOUSE PRICES',\r\n        'House Prices',\r\n        'house prices'\r\n      ];\r\n      \r\n      for (const pattern of alternativePatterns) {\r\n        const index = data.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Average House Prices section not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"Average House Prices\" at index ${averageHousePricesIndex}`);\r\n    \r\n    // \"Average House Prices\" 이후의 HTML에서 숫자 값 찾기\r\n    const afterAverageHousePrices = data.substring(averageHousePricesIndex);\r\n    console.log('📄 After Average House Prices (first 1000 chars):', afterAverageHousePrices.substring(0, 1000));\r\n    \r\n    // Actual 값을 찾기 위한 패턴들 시도\r\n    let currentValue = null;\r\n    \r\n    // 패턴 1: \"Actual\" 텍스트 근처에서 숫자 찾기\r\n    const actualIndex = afterAverageHousePrices.indexOf('Actual');\r\n    if (actualIndex !== -1) {\r\n      console.log(`✅ Found \"Actual\" at index ${actualIndex}`);\r\n      const afterActual = afterAverageHousePrices.substring(actualIndex);\r\n      console.log('📄 After Actual (first 500 chars):', afterActual.substring(0, 500));\r\n      \r\n      // Actual 이후의 숫자 패턴 찾기\r\n      const actualNumberPattern = /[-+]?[\\d,]+\\.?\\d*/;\r\n      const actualMatch = afterActual.match(actualNumberPattern);\r\n      if (actualMatch) {\r\n        currentValue = parseFloat(actualMatch[0].replace(/,/g, ''));\r\n        console.log(`✅ Found Actual value: ${currentValue}`);\r\n      }\r\n    }\r\n    \r\n    // 패턴 2: \"Current\" 텍스트 근처에서 숫자 찾기\r\n    if (!currentValue) {\r\n      const currentIndex = afterAverageHousePrices.indexOf('Current');\r\n      if (currentIndex !== -1) {\r\n        console.log(`✅ Found \"Current\" at index ${currentIndex}`);\r\n        const afterCurrent = afterAverageHousePrices.substring(currentIndex);\r\n        console.log('📄 After Current (first 500 chars):', afterCurrent.substring(0, 500));\r\n        \r\n        const currentNumberPattern = /[-+]?[\\d,]+\\.?\\d*/;\r\n        const currentMatch = afterCurrent.match(currentNumberPattern);\r\n        if (currentMatch) {\r\n          currentValue = parseFloat(currentMatch[0].replace(/,/g, ''));\r\n          console.log(`✅ Found Current value: ${currentValue}`);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 패턴 3: \"Latest\" 텍스트 근처에서 숫자 찾기\r\n    if (!currentValue) {\r\n      const latestIndex = afterAverageHousePrices.indexOf('Latest');\r\n      if (latestIndex !== -1) {\r\n        console.log(`✅ Found \"Latest\" at index ${latestIndex}`);\r\n        const afterLatest = afterAverageHousePrices.substring(latestIndex);\r\n        console.log('📄 After Latest (first 500 chars):', afterLatest.substring(0, 500));\r\n        \r\n        const latestNumberPattern = /[-+]?[\\d,]+\\.?\\d*/;\r\n        const latestMatch = afterLatest.match(latestNumberPattern);\r\n        if (latestMatch) {\r\n          currentValue = parseFloat(latestMatch[0].replace(/,/g, ''));\r\n          console.log(`✅ Found Latest value: ${currentValue}`);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 패턴 4: 일반적인 숫자 패턴 (마지막 수단)\r\n    if (!currentValue) {\r\n      console.log('🔍 Searching for general number patterns...');\r\n      const numberPattern = /[-+]?[\\d,]+\\.?\\d*/;\r\n      const numberMatch = afterAverageHousePrices.match(numberPattern);\r\n      \r\n      if (numberMatch) {\r\n        currentValue = parseFloat(numberMatch[0].replace(/,/g, ''));\r\n        console.log(`✅ Found general number value: ${currentValue}`);\r\n      }\r\n    }\r\n    \r\n    if (!currentValue) {\r\n      console.log('❌ No valid number value found');\r\n      console.log('🔍 Searching for any number patterns...');\r\n      \r\n      // 다른 숫자 패턴들 시도\r\n      const numberPatterns = [\r\n        /[-+]?[\\d,]+\\.?\\d*/,  // 콤마 포함\r\n        /[-+]?\\d+\\.?\\d*/,     // 소수점 포함\r\n        /[-+]?\\d+/,           // 정수만\r\n        /\\d+\\.?\\d*/           // 양수\r\n      ];\r\n      \r\n      for (const pattern of numberPatterns) {\r\n        const match = afterAverageHousePrices.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found number pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Number value not found');\r\n    }\r\n    \r\n    console.log(`✅ Successfully extracted US New House Price: ${currentValue}`);\r\n    \r\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US New House Price');\r\n    const change = dummyData ? dummyData.change : 0.00;\r\n    \r\n    return {\r\n      title: 'US New House Price',\r\n      value: currentValue,\r\n      change: change,\r\n      isPositive: change >= 0,\r\n      symbol: 'US_NEW_HOUSE_PRICE',\r\n      unit: '$',\r\n      description: '미국 신축 주택 평균 가격',\r\n      isRealData: true,\r\n      dataSource: 'Trading Economics'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching US New House Price:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US New House Price');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for US New House Price');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// 모든 Macro 데이터 가져오기\r\nexport const fetchAllMacroData = async () => {\r\n  try {\r\n    console.log('🔄 Fetching all Macro Economics data...');\r\n    \r\n    const promises = [\r\n      fetchKoreaGDPGrowth(),\r\n      fetchSP500DividendFutures(),\r\n      fetchCitiEconomicSurpriseIndex(),\r\n      fetchInflationExpectationRate(),\r\n      fetchUSCoreInflationRate(),\r\n      fetchUSCorePCE(),\r\n      fetchUSCorePPI(),\r\n      fetchUSMoneySupplyM2(),\r\n      fetchUSSOFR(),\r\n      fetchUS30YMortgageRate(),\r\n      fetchUSNewHousePrice(),\r\n      fetchKoreaExportImport(),\r\n      fetchUSNonFarmPayrolls(),\r\n      fetchUSUnemploymentRate()\r\n    ];\r\n    \r\n    // 모든 요청 완료 대기\r\n    const results = await Promise.all(promises);\r\n    \r\n    console.log(`✅ Successfully loaded ${results.length} Macro Economics indicators`);\r\n    \r\n    // 실제 데이터가 있는지 확인\r\n    const realDataCount = results.filter(item => item.isRealData).length;\r\n    if (realDataCount === 0) {\r\n      console.log('⚠️ No real data available, showing dummy data');\r\n    } else {\r\n      console.log(`✅ ${realDataCount} real Macro indicators loaded`);\r\n    }\r\n    \r\n    return results;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching all Macro data:', error);\r\n    console.log('📊 Falling back to dummy data...');\r\n    \r\n    // 전체 실패 시 더미 데이터 반환\r\n    return DUMMY_MACRO_DATA.map(item => ({\r\n      ...item,\r\n      isRealData: false,\r\n      dataSource: 'Dummy Data (Error)'\r\n    }));\r\n  }\r\n};\r\n\r\n// Macro 데이터 가져오기 (실시간 시뮬레이션)\r\nexport const fetchMacroData = async () => {\r\n  try {\r\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\r\n    return DUMMY_MACRO_DATA.map(item => ({\r\n      ...item,\r\n      isRealData: false,\r\n      dataSource: 'Dummy Data (Simulation)'\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error fetching macro data:', error);\r\n    return DUMMY_MACRO_DATA;\r\n  }\r\n};\r\n\r\n// Korea Export Import 가져오기 (e-나라지표)\r\nexport const fetchKoreaExportImport = async () => {\r\n  try {\r\n    console.log('🔄 Fetching Korea Export Import from e-나라지표...');\r\n    \r\n    const url = 'https://www.index.go.kr/unity/potal/main/EachDtlPageDetail.do?idx_cd=1066';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    // 여러 방법으로 시도\r\n    let data = null;\r\n    let lastError = null;\r\n    \r\n    // 방법 1: 프록시 서버들 시도\r\n    try {\r\n      data = await fetchWithProxy(url);\r\n      console.log('✅ Successfully fetched data using proxy');\r\n    } catch (error) {\r\n      console.log('❌ Proxy method failed:', error.message);\r\n      lastError = error;\r\n    }\r\n    \r\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying direct fetch...');\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n            'Accept-Language': 'ko-KR,ko;q=0.9,en;q=0.8',\r\n            'Cache-Control': 'no-cache'\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          data = await response.text();\r\n          console.log('✅ Successfully fetched data using direct fetch');\r\n        } else {\r\n          throw new Error(`Direct fetch failed: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ Direct fetch failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    if (!data) {\r\n      console.log('❌ All methods failed, using dummy data');\r\n      console.log('🔍 Last error:', lastError);\r\n      \r\n      // 실패 시 더미 데이터 사용\r\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'Korea Export Import');\r\n      if (dummyData) {\r\n        console.log('📊 Using dummy data for Korea Export Import');\r\n        return {\r\n          ...dummyData,\r\n          isRealData: false,\r\n          dataSource: 'Dummy Data (All methods failed)'\r\n        };\r\n      }\r\n      \r\n      throw new Error('All data fetching methods failed');\r\n    }\r\n    \r\n    console.log(`📄 Total HTML length: ${data.length} characters`);\r\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\r\n    \r\n    // e-나라지표 페이지에서 데이터 추출 시도\r\n    // \"수출입실적\" 텍스트 찾기\r\n    const exportImportIndex = data.indexOf('수출입실적');\r\n    if (exportImportIndex === -1) {\r\n      console.log('❌ \"수출입실적\" text not found');\r\n      console.log('🔍 Searching for alternative patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const alternativePatterns = [\r\n        '수출입실적',\r\n        '수출입',\r\n        'export import',\r\n        'EXPORT IMPORT'\r\n      ];\r\n      \r\n      for (const pattern of alternativePatterns) {\r\n        const index = data.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('수출입실적 section not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"수출입실적\" at index ${exportImportIndex}`);\r\n    \r\n    // \"수출입실적\" 이후의 HTML에서 숫자 값 찾기\r\n    const afterExportImport = data.substring(exportImportIndex);\r\n    console.log('📄 After 수출입실적 (first 1000 chars):', afterExportImport.substring(0, 1000));\r\n    \r\n    // 숫자 패턴 찾기 (소수점 포함, 억 단위)\r\n    const numberPattern = /[-+]?\\d+\\.?\\d*/;\r\n    const numberMatch = afterExportImport.match(numberPattern);\r\n    \r\n    if (!numberMatch) {\r\n      console.log('❌ Number value not found');\r\n      console.log('🔍 Searching for any number patterns...');\r\n      \r\n      // 다른 숫자 패턴들 시도\r\n      const numberPatterns = [\r\n        /[-+]?\\d+\\.?\\d*/,  // 소수점 포함\r\n        /[-+]?\\d+/,        // 정수만\r\n        /\\d+\\.?\\d*/        // 양수\r\n      ];\r\n      \r\n      for (const pattern of numberPatterns) {\r\n        const match = afterExportImport.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found number pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Number value not found');\r\n    }\r\n    \r\n    const currentValue = parseFloat(numberMatch[0]);\r\n    console.log(`✅ Successfully extracted Korea Export Import: ${currentValue}`);\r\n    \r\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'Korea Export Import');\r\n    const change = dummyData ? dummyData.change : 0.00;\r\n    \r\n    return {\r\n      title: 'Korea Export Import',\r\n      value: currentValue,\r\n      change: change,\r\n      isPositive: change >= 0,\r\n      symbol: 'KOREA_EXPORT_IMPORT',\r\n      unit: '억$',\r\n      description: '한국 수출입 실적',\r\n      isRealData: true,\r\n      dataSource: 'e-나라지표 (통계청)'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching Korea Export Import:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'Korea Export Import');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for Korea Export Import');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// Korea GDP Growth 가져오기 (Trading Economics)\r\nexport const fetchKoreaGDPGrowth = async () => {\r\n  try {\r\n    console.log('🔄 Fetching Korea GDP Growth from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/south-korea/gdp-growth-annual';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    // 여러 방법으로 시도\r\n    let data = null;\r\n    let lastError = null;\r\n    \r\n    // 방법 1: 프록시 서버들 시도\r\n    try {\r\n      data = await fetchWithProxy(url);\r\n      console.log('✅ Successfully fetched data using proxy');\r\n    } catch (error) {\r\n      console.log('❌ Proxy method failed:', error.message);\r\n      lastError = error;\r\n    }\r\n    \r\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying direct fetch...');\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n            'Accept-Language': 'ko-KR,ko;q=0.9,en;q=0.8',\r\n            'Cache-Control': 'no-cache'\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          data = await response.text();\r\n          console.log('✅ Successfully fetched data using direct fetch');\r\n        } else {\r\n          throw new Error(`Direct fetch failed: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ Direct fetch failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    if (!data) {\r\n      console.log('❌ All methods failed, using dummy data');\r\n      console.log('🔍 Last error:', lastError);\r\n      \r\n      // 실패 시 더미 데이터 사용\r\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'Korea GDP Growth');\r\n      if (dummyData) {\r\n        console.log('📊 Using dummy data for Korea GDP Growth');\r\n        return {\r\n          ...dummyData,\r\n          isRealData: false,\r\n          dataSource: 'Dummy Data (All methods failed)'\r\n        };\r\n      }\r\n      \r\n      throw new Error('All data fetching methods failed');\r\n    }\r\n    \r\n    console.log(`📄 Total HTML length: ${data.length} characters`);\r\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\r\n    \r\n    // Trading Economics 페이지에서 데이터 추출 시도\r\n    // \"GDP Growth\" 텍스트 찾기\r\n    const gdpGrowthIndex = data.indexOf('GDP Growth');\r\n    if (gdpGrowthIndex === -1) {\r\n      console.log('❌ \"GDP Growth\" text not found');\r\n      console.log('🔍 Searching for alternative patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const alternativePatterns = [\r\n        'GDP Growth',\r\n        'gdp growth',\r\n        'GDP GROWTH',\r\n        'GDP',\r\n        'gdp'\r\n      ];\r\n      \r\n      for (const pattern of alternativePatterns) {\r\n        const index = data.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('GDP Growth section not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"GDP Growth\" at index ${gdpGrowthIndex}`);\r\n    \r\n    // \"GDP Growth\" 이후의 HTML에서 숫자 값 찾기\r\n    const afterGDPGrowth = data.substring(gdpGrowthIndex);\r\n    console.log('📄 After GDP Growth (first 1000 chars):', afterGDPGrowth.substring(0, 1000));\r\n    \r\n    // 숫자 패턴 찾기 (소수점 포함)\r\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\r\n    const numberMatch = afterGDPGrowth.match(numberPattern);\r\n    \r\n    if (!numberMatch) {\r\n      console.log('❌ Number value not found');\r\n      console.log('🔍 Searching for any number patterns...');\r\n      \r\n      // 다른 숫자 패턴들 시도\r\n      const numberPatterns = [\r\n        /[-+]?\\d+\\.\\d+/,  // 소수점 포함\r\n        /[-+]?\\d+/,       // 정수만\r\n        /\\d+\\.\\d+/        // 양수 소수점\r\n      ];\r\n      \r\n      for (const pattern of numberPatterns) {\r\n        const match = afterGDPGrowth.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found number pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Number value not found');\r\n    }\r\n    \r\n    const currentValue = parseFloat(numberMatch[0]);\r\n    console.log(`✅ Successfully extracted Korea GDP Growth: ${currentValue}%`);\r\n    \r\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'Korea GDP Growth');\r\n    const change = dummyData ? dummyData.change : 0.00;\r\n    \r\n    return {\r\n      title: 'Korea GDP Growth',\r\n      value: currentValue,\r\n      change: change,\r\n      isPositive: change >= 0,\r\n      symbol: 'KOREA_GDP_GROWTH',\r\n      unit: '%',\r\n      description: '한국 GDP 성장률',\r\n      isRealData: true,\r\n      dataSource: 'Trading Economics'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching Korea GDP Growth:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'Korea GDP Growth');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for Korea GDP Growth');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// US Non Farm Payrolls 가져오기 (Trading Economics)\r\nexport const fetchUSNonFarmPayrolls = async () => {\r\n  try {\r\n    console.log('🔄 Fetching US Non Farm Payrolls from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/united-states/non-farm-payrolls';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    // 여러 방법으로 시도\r\n    let data = null;\r\n    let lastError = null;\r\n    \r\n    // 방법 1: 프록시 서버들 시도\r\n    try {\r\n      data = await fetchWithProxy(url);\r\n      console.log('✅ Successfully fetched data using proxy');\r\n    } catch (error) {\r\n      console.log('❌ Proxy method failed:', error.message);\r\n      lastError = error;\r\n    }\r\n    \r\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying direct fetch...');\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\r\n            'Cache-Control': 'no-cache'\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          data = await response.text();\r\n          console.log('✅ Successfully fetched data using direct fetch');\r\n        } else {\r\n          throw new Error(`Direct fetch failed: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ Direct fetch failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    if (!data) {\r\n      console.log('❌ All methods failed, using dummy data');\r\n      console.log('🔍 Last error:', lastError);\r\n      \r\n      // 실패 시 더미 데이터 사용\r\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Non Farm Payrolls');\r\n      if (dummyData) {\r\n        console.log('📊 Using dummy data for US Non Farm Payrolls');\r\n        return {\r\n          ...dummyData,\r\n          isRealData: false,\r\n          dataSource: 'Dummy Data (All methods failed)'\r\n        };\r\n      }\r\n      \r\n      throw new Error('All data fetching methods failed');\r\n    }\r\n    \r\n    console.log(`📄 Total HTML length: ${data.length} characters`);\r\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\r\n    \r\n    // Trading Economics 페이지에서 데이터 추출 시도\r\n    // \"Non Farm Payrolls\" 텍스트 찾기\r\n    const nonFarmPayrollsIndex = data.indexOf('Non Farm Payrolls');\r\n    if (nonFarmPayrollsIndex === -1) {\r\n      console.log('❌ \"Non Farm Payrolls\" text not found');\r\n      console.log('🔍 Searching for alternative patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const alternativePatterns = [\r\n        'Non Farm Payrolls',\r\n        'non farm payrolls',\r\n        'NON FARM PAYROLLS',\r\n        'Nonfarm Payrolls',\r\n        'nonfarm payrolls',\r\n        'Payrolls',\r\n        'payrolls'\r\n      ];\r\n      \r\n      for (const pattern of alternativePatterns) {\r\n        const index = data.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Non Farm Payrolls section not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"Non Farm Payrolls\" at index ${nonFarmPayrollsIndex}`);\r\n    \r\n    // \"Non Farm Payrolls\" 이후의 HTML에서 숫자 값 찾기\r\n    const afterNonFarmPayrolls = data.substring(nonFarmPayrollsIndex);\r\n    console.log('📄 After Non Farm Payrolls (first 1000 chars):', afterNonFarmPayrolls.substring(0, 1000));\r\n    \r\n    // 숫자 패턴 찾기 (소수점 포함)\r\n    const numberPattern = /[-+]?\\d+\\.?\\d*/;\r\n    const numberMatch = afterNonFarmPayrolls.match(numberPattern);\r\n    \r\n    if (!numberMatch) {\r\n      console.log('❌ Number value not found');\r\n      console.log('🔍 Searching for any number patterns...');\r\n      \r\n      // 다른 숫자 패턴들 시도\r\n      const numberPatterns = [\r\n        /[-+]?\\d+\\.?\\d*/,  // 소수점 포함\r\n        /[-+]?\\d+/,        // 정수만\r\n        /\\d+\\.?\\d*/        // 양수\r\n      ];\r\n      \r\n      for (const pattern of numberPatterns) {\r\n        const match = afterNonFarmPayrolls.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found number pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Number value not found');\r\n    }\r\n    \r\n    const currentValue = parseFloat(numberMatch[0]);\r\n    console.log(`✅ Successfully extracted US Non Farm Payrolls: ${currentValue}`);\r\n    \r\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Non Farm Payrolls');\r\n    const change = dummyData ? dummyData.change : 0.00;\r\n    \r\n    return {\r\n      title: 'US Non Farm Payrolls',\r\n      value: currentValue,\r\n      change: change,\r\n      isPositive: change >= 0,\r\n      symbol: 'US_NON_FARM_PAYROLLS',\r\n      unit: '천명',\r\n      description: '미국 비농업 고용 지표',\r\n      isRealData: true,\r\n      dataSource: 'Trading Economics'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching US Non Farm Payrolls:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Non Farm Payrolls');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for US Non Farm Payrolls');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// US Unemployment Rate 가져오기 (Trading Economics)\r\nexport const fetchUSUnemploymentRate = async () => {\r\n  try {\r\n    console.log('🔄 Fetching US Unemployment Rate from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/united-states/unemployment-rate';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    // 여러 방법으로 시도\r\n    let data = null;\r\n    let lastError = null;\r\n    \r\n    // 방법 1: 프록시 서버들 시도\r\n    try {\r\n      data = await fetchWithProxy(url);\r\n      console.log('✅ Successfully fetched data using proxy');\r\n    } catch (error) {\r\n      console.log('❌ Proxy method failed:', error.message);\r\n      lastError = error;\r\n    }\r\n    \r\n    // 방법 2: 직접 fetch 시도 (CORS 우회)\r\n    if (!data) {\r\n      try {\r\n        console.log('🔄 Trying direct fetch...');\r\n        const response = await fetch(url, {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\r\n            'Accept-Language': 'en-US,en;q=0.9,ko;q=0.8',\r\n            'Cache-Control': 'no-cache'\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          data = await response.text();\r\n          console.log('✅ Successfully fetched data using direct fetch');\r\n        } else {\r\n          throw new Error(`Direct fetch failed: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        console.log('❌ Direct fetch failed:', error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    if (!data) {\r\n      console.log('❌ All methods failed, using dummy data');\r\n      console.log('🔍 Last error:', lastError);\r\n      \r\n      // 실패 시 더미 데이터 사용\r\n      const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Unemployment Rate');\r\n      if (dummyData) {\r\n        console.log('📊 Using dummy data for US Unemployment Rate');\r\n        return {\r\n          ...dummyData,\r\n          isRealData: false,\r\n          dataSource: 'Dummy Data (All methods failed)'\r\n        };\r\n      }\r\n      \r\n      throw new Error('All data fetching methods failed');\r\n    }\r\n    \r\n    console.log(`📄 Total HTML length: ${data.length} characters`);\r\n    console.log('📄 HTML Preview (first 3000 chars):', data.substring(0, 3000));\r\n    \r\n    // Trading Economics 페이지에서 데이터 추출 시도\r\n    // \"Unemployment Rate\" 텍스트 찾기\r\n    const unemploymentRateIndex = data.indexOf('Unemployment Rate');\r\n    if (unemploymentRateIndex === -1) {\r\n      console.log('❌ \"Unemployment Rate\" text not found');\r\n      console.log('🔍 Searching for alternative patterns...');\r\n      \r\n      // 대안 패턴들 시도\r\n      const alternativePatterns = [\r\n        'Unemployment Rate',\r\n        'unemployment rate',\r\n        'UNEMPLOYMENT RATE',\r\n        'Unemployment',\r\n        'unemployment'\r\n      ];\r\n      \r\n      for (const pattern of alternativePatterns) {\r\n        const index = data.indexOf(pattern);\r\n        if (index !== -1) {\r\n          console.log(`✅ Found alternative pattern: \"${pattern}\" at index ${index}`);\r\n          console.log('📄 Context around pattern:', data.substring(index - 100, index + 200));\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Unemployment Rate section not found');\r\n    }\r\n    \r\n    console.log(`✅ Found \"Unemployment Rate\" at index ${unemploymentRateIndex}`);\r\n    \r\n    // \"Unemployment Rate\" 이후의 HTML에서 숫자 값 찾기\r\n    const afterUnemploymentRate = data.substring(unemploymentRateIndex);\r\n    console.log('📄 After Unemployment Rate (first 1000 chars):', afterUnemploymentRate.substring(0, 1000));\r\n    \r\n    // 숫자 패턴 찾기 (소수점 포함)\r\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\r\n    const numberMatch = afterUnemploymentRate.match(numberPattern);\r\n    \r\n    if (!numberMatch) {\r\n      console.log('❌ Number value not found');\r\n      console.log('🔍 Searching for any number patterns...');\r\n      \r\n      // 다른 숫자 패턴들 시도\r\n      const numberPatterns = [\r\n        /[-+]?\\d+\\.\\d+/,  // 소수점 포함\r\n        /[-+]?\\d+/,       // 정수만\r\n        /\\d+\\.\\d+/        // 양수 소수점\r\n      ];\r\n      \r\n      for (const pattern of numberPatterns) {\r\n        const match = afterUnemploymentRate.match(pattern);\r\n        if (match) {\r\n          console.log(`✅ Found number pattern: ${match[0]}`);\r\n          break;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Number value not found');\r\n    }\r\n    \r\n    const currentValue = parseFloat(numberMatch[0]);\r\n    console.log(`✅ Successfully extracted US Unemployment Rate: ${currentValue}%`);\r\n    \r\n    // 변화량은 별도로 계산하기 어려우므로 더미 데이터에서 가져오기\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Unemployment Rate');\r\n    const change = dummyData ? dummyData.change : 0.00;\r\n    \r\n    return {\r\n      title: 'US Unemployment Rate',\r\n      value: currentValue,\r\n      change: change,\r\n      isPositive: change >= 0,\r\n      symbol: 'US_UNEMPLOYMENT_RATE',\r\n      unit: '%',\r\n      description: '미국 실업률',\r\n      isRealData: true,\r\n      dataSource: 'Trading Economics'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching US Unemployment Rate:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'US Unemployment Rate');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for US Unemployment Rate');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}