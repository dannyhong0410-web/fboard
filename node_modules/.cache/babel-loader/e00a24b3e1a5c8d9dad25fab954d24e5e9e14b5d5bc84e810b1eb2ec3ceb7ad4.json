{"ast":null,"code":"// Macro Economics 데이터를 가져오는 서비스\nconst BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\n\n// Macro 지표 심볼 매핑\nconst MACRO_SYMBOLS = {\n  'S&P 500 Annual Dividend Futures': '^SP500DIV',\n  'World Citi Economic Surprise Index': 'CITI_SURPRISE',\n  '5-Year 5-Year Forward Inflation Expectation Rate': 'T5YIFR'\n};\n\n// 외부 URL 매핑\nexport const EXTERNAL_URLS = {\n  'S&P 500 Annual Dividend Futures': 'https://finance.yahoo.com/quote/%5ESP500DIV',\n  'World Citi Economic Surprise Index': 'https://en.macromicro.me/charts/45866/global-citi-surprise-index',\n  '5-Year 5-Year Forward Inflation Expectation Rate': 'https://fred.stlouisfed.org/series/T5YIFR'\n};\n\n// 프록시 서버들을 사용한 웹 스크래핑\nconst PROXY_SERVICES = ['https://api.allorigins.win/raw?url=', 'https://corsproxy.io/?', 'https://thingproxy.freeboard.io/fetch/', 'https://cors.bridged.cc/', 'https://api.codetabs.com/v1/proxy?quest=', 'https://cors.eu.org/', 'https://cors-anywhere.herokuapp.com/', '' // 직접 호출도 시도\n];\n\n// 프록시를 사용한 웹 스크래핑\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\n  if (proxyIndex >= PROXY_SERVICES.length) {\n    throw new Error('All proxy attempts failed');\n  }\n  try {\n    const proxyUrl = PROXY_SERVICES[proxyIndex] + url;\n    console.log(`🔗 Trying proxy ${proxyIndex + 1}/${PROXY_SERVICES.length}: ${proxyUrl.substring(0, 50)}...`);\n    const response = await fetch(proxyUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n        'Accept-Language': 'en-US,en;q=0.9',\n        'Accept-Encoding': 'gzip, deflate, br',\n        'Connection': 'keep-alive',\n        'Upgrade-Insecure-Requests': '1'\n      },\n      timeout: 10000 // 10초 타임아웃\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.text();\n    if (data.length < 100) {\n      throw new Error('Response too short, likely an error page');\n    }\n    console.log(`✅ Proxy ${proxyIndex + 1} successful! Data length: ${data.length} characters`);\n    return data;\n  } catch (error) {\n    console.log(`❌ Proxy ${proxyIndex + 1} failed: ${error.message}`);\n    return fetchWithProxy(url, proxyIndex + 1);\n  }\n};\n\n// 2024년 12월 기준 최신 더미 데이터\nconst DUMMY_MACRO_DATA = [{\n  title: 'S&P 500 Annual Dividend Futures',\n  value: 2.15,\n  change: 0.05,\n  isPositive: true,\n  symbol: '^SP500DIV',\n  unit: '%',\n  description: 'S&P 500 연간 배당률 선물'\n}, {\n  title: 'World Citi Economic Surprise Index',\n  value: 12.5,\n  change: -2.3,\n  isPositive: false,\n  symbol: 'CITI_SURPRISE',\n  unit: '',\n  description: '글로벌 경제 서프라이즈 지수'\n}, {\n  title: '5-Year 5-Year Forward Inflation Expectation Rate',\n  value: 2.33,\n  change: -0.01,\n  isPositive: false,\n  symbol: 'T5YIFR',\n  unit: '%',\n  description: '5년 후 5년 인플레이션 기대율'\n}];\n\n// S&P 500 Annual Dividend Futures 가져오기 (Yahoo Finance)\nexport const fetchSP500DividendFutures = async () => {\n  try {\n    console.log('🔄 Fetching S&P 500 Annual Dividend Futures from Yahoo Finance...');\n    const symbol = '^SP500DIV';\n    const url = `${BASE_URL}/${symbol}?interval=1d&range=1d`;\n    console.log(`🔗 URL: ${url}`);\n    const data = await fetchWithProxy(url);\n    if (!data) {\n      throw new Error('Failed to fetch data');\n    }\n\n    // JSON 파싱 시도\n    let jsonData;\n    try {\n      jsonData = JSON.parse(data);\n    } catch (error) {\n      console.log('❌ Failed to parse JSON, using dummy data');\n      throw new Error('Invalid JSON response');\n    }\n\n    // Yahoo Finance API 응답 구조에서 데이터 추출\n    if (jsonData.chart && jsonData.chart.result && jsonData.chart.result[0]) {\n      const result = jsonData.chart.result[0];\n      const meta = result.meta;\n      if (meta) {\n        const currentPrice = meta.regularMarketPrice;\n        const previousClose = meta.previousClose;\n        const change = currentPrice - previousClose;\n        console.log(`✅ Successfully fetched S&P 500 Dividend Futures: ${currentPrice}% (${change >= 0 ? '+' : ''}${change.toFixed(2)})`);\n        return {\n          title: 'S&P 500 Annual Dividend Futures',\n          value: currentPrice,\n          change: Math.round(change * 100) / 100,\n          isPositive: change >= 0,\n          symbol: symbol,\n          unit: '%',\n          description: 'S&P 500 연간 배당률 선물',\n          isRealData: true,\n          dataSource: 'Yahoo Finance'\n        };\n      }\n    }\n    throw new Error('No valid data found for S&P 500 Dividend Futures');\n  } catch (error) {\n    console.error('❌ Error fetching S&P 500 Dividend Futures:', error.message);\n\n    // 실패 시 더미 데이터 사용\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'S&P 500 Annual Dividend Futures');\n    if (dummyData) {\n      console.log('📊 Using dummy data for S&P 500 Dividend Futures');\n      return {\n        ...dummyData,\n        isRealData: false,\n        dataSource: 'Dummy Data (Error)'\n      };\n    }\n    throw error;\n  }\n};\n\n// World Citi Economic Surprise Index 가져오기 (MacroMicro)\nexport const fetchCitiEconomicSurpriseIndex = async () => {\n  try {\n    console.log('🔄 Fetching World Citi Economic Surprise Index from MacroMicro...');\n    const url = 'https://en.macromicro.me/charts/45866/global-citi-surprise-index';\n    console.log(`🔗 URL: ${url}`);\n    const data = await fetchWithProxy(url);\n    if (!data) {\n      throw new Error('Failed to fetch data');\n    }\n\n    // MacroMicro 페이지에서 데이터 추출 시도\n    console.log('📄 HTML Preview:', data.substring(0, 2000));\n\n    // \"Latest Stats\" 텍스트 찾기\n    const latestStatsIndex = data.indexOf('Latest Stats');\n    if (latestStatsIndex === -1) {\n      console.log('❌ \"Latest Stats\" text not found');\n      throw new Error('Latest Stats section not found');\n    }\n    console.log('✅ Found \"Latest Stats\" section');\n\n    // \"Latest Stats\" 이후의 HTML에서 \"Citigroup Economic Surprise Index: Global\" 찾기\n    const afterLatestStats = data.substring(latestStatsIndex);\n    const citiIndexIndex = afterLatestStats.indexOf('Citigroup Economic Surprise Index: Global');\n    if (citiIndexIndex === -1) {\n      console.log('❌ \"Citigroup Economic Surprise Index: Global\" text not found');\n      throw new Error('Citigroup Economic Surprise Index: Global not found');\n    }\n    console.log('✅ Found \"Citigroup Economic Surprise Index: Global\" text');\n\n    // \"Citigroup Economic Surprise Index: Global\" 이후의 HTML에서 날짜와 값 찾기\n    const afterCitiIndex = afterLatestStats.substring(citiIndexIndex);\n\n    // YYYY-MM-DD 패턴 찾기\n    const datePattern = /\\d{4}-\\d{2}-\\d{2}/;\n    const dateMatch = afterCitiIndex.match(datePattern);\n    if (!dateMatch) {\n      console.log('❌ Date pattern not found');\n      throw new Error('Date pattern not found');\n    }\n    const dateFound = dateMatch[0];\n    console.log(`✅ Found date: ${dateFound}`);\n\n    // 날짜 이후의 HTML에서 숫자 값 찾기 (더 정확한 패턴)\n    const dateIndex = afterCitiIndex.indexOf(dateFound);\n    const afterDate = afterCitiIndex.substring(dateIndex + dateFound.length);\n\n    // 숫자 패턴 찾기 (소수점 포함, 더 정확한 매칭)\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\n    const numberMatch = afterDate.match(numberPattern);\n    if (!numberMatch) {\n      console.log('❌ Number value not found after date');\n      throw new Error('Number value not found after date');\n    }\n    const currentValue = parseFloat(numberMatch[0]);\n    console.log(`✅ Successfully extracted Citi Economic Surprise Index: ${currentValue}`);\n\n    // 이전 값도 찾아보기 (Prev: 패턴)\n    const prevPattern = /Prev:\\s*([-+]?\\d+\\.\\d+)/;\n    const prevMatch = afterDate.match(prevPattern);\n    let change = 0.00;\n    if (prevMatch) {\n      const prevValue = parseFloat(prevMatch[1]);\n      change = currentValue - prevValue;\n      console.log(`✅ Found previous value: ${prevValue}, change: ${change}`);\n    }\n    return {\n      title: 'World Citi Economic Surprise Index',\n      value: currentValue,\n      change: Math.round(change * 100) / 100,\n      isPositive: currentValue >= 0,\n      symbol: 'CITI_SURPRISE',\n      unit: '',\n      description: '글로벌 경제 서프라이즈 지수',\n      isRealData: true,\n      dataSource: 'MacroMicro'\n    };\n  } catch (error) {\n    console.error('❌ Error fetching Citi Economic Surprise Index:', error.message);\n\n    // 실패 시 더미 데이터 사용\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'World Citi Economic Surprise Index');\n    if (dummyData) {\n      console.log('📊 Using dummy data for Citi Economic Surprise Index');\n      return {\n        ...dummyData,\n        isRealData: false,\n        dataSource: 'Dummy Data (Error)'\n      };\n    }\n    throw error;\n  }\n};\n\n// 5-Year 5-Year Forward Inflation Expectation Rate 가져오기 (FRED)\nexport const fetchInflationExpectationRate = async () => {\n  try {\n    console.log('🔄 Fetching 5-Year 5-Year Forward Inflation Expectation Rate from FRED...');\n    const url = 'https://fred.stlouisfed.org/series/T5YIFR';\n    console.log(`🔗 URL: ${url}`);\n    const data = await fetchWithProxy(url);\n    if (!data) {\n      throw new Error('Failed to fetch data');\n    }\n\n    // FRED 페이지에서 데이터 추출 시도\n    console.log('📄 HTML Preview:', data.substring(0, 1000));\n\n    // FRED 페이지에서 최신 값 추출 (2025-08-12: 2.33 형태)\n    const latestValueMatch = data.match(/2025-\\d{2}-\\d{2}:\\s*(\\d+\\.\\d+)/);\n    if (latestValueMatch) {\n      const currentValue = parseFloat(latestValueMatch[1]);\n      console.log(`✅ Successfully extracted inflation expectation rate: ${currentValue}%`);\n      return {\n        title: '5-Year 5-Year Forward Inflation Expectation Rate',\n        value: currentValue,\n        change: 0.00,\n        // FRED에서는 변화량을 직접 제공하지 않으므로 0으로 설정\n        isPositive: true,\n        symbol: 'T5YIFR',\n        unit: '%',\n        description: '5년 후 5년 인플레이션 기대율',\n        isRealData: true,\n        dataSource: 'FRED (Federal Reserve Economic Data)'\n      };\n    }\n\n    // 임시로 더미 데이터 반환\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === '5-Year 5-Year Forward Inflation Expectation Rate');\n    if (dummyData) {\n      console.log('📊 Using dummy data for Inflation Expectation Rate (parsing not implemented)');\n      return {\n        ...dummyData,\n        isRealData: false,\n        dataSource: 'Dummy Data (Parsing not implemented)'\n      };\n    }\n    throw new Error('No valid data found for Inflation Expectation Rate');\n  } catch (error) {\n    console.error('❌ Error fetching Inflation Expectation Rate:', error.message);\n\n    // 실패 시 더미 데이터 사용\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === '5-Year 5-Year Forward Inflation Expectation Rate');\n    if (dummyData) {\n      console.log('📊 Using dummy data for Inflation Expectation Rate');\n      return {\n        ...dummyData,\n        isRealData: false,\n        dataSource: 'Dummy Data (Error)'\n      };\n    }\n    throw error;\n  }\n};\n\n// 모든 Macro 데이터 가져오기\nexport const fetchAllMacroData = async () => {\n  try {\n    console.log('🔄 Fetching all Macro Economics data...');\n    const promises = [fetchSP500DividendFutures(), fetchCitiEconomicSurpriseIndex(), fetchInflationExpectationRate()];\n\n    // 모든 요청 완료 대기\n    const results = await Promise.all(promises);\n    console.log(`✅ Successfully loaded ${results.length} Macro Economics indicators`);\n\n    // 실제 데이터가 있는지 확인\n    const realDataCount = results.filter(item => item.isRealData).length;\n    if (realDataCount === 0) {\n      console.log('⚠️ No real data available, showing dummy data');\n    } else {\n      console.log(`✅ ${realDataCount} real Macro indicators loaded`);\n    }\n    return results;\n  } catch (error) {\n    console.error('❌ Error fetching all Macro data:', error);\n    console.log('📊 Falling back to dummy data...');\n\n    // 전체 실패 시 더미 데이터 반환\n    return DUMMY_MACRO_DATA.map(item => ({\n      ...item,\n      isRealData: false,\n      dataSource: 'Dummy Data (Error)'\n    }));\n  }\n};\n\n// Macro 데이터 가져오기 (실시간 시뮬레이션)\nexport const fetchMacroData = async () => {\n  try {\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\n    return DUMMY_MACRO_DATA.map(item => ({\n      ...item,\n      isRealData: false,\n      dataSource: 'Dummy Data (Simulation)'\n    }));\n  } catch (error) {\n    console.error('Error fetching macro data:', error);\n    return DUMMY_MACRO_DATA;\n  }\n};","map":{"version":3,"names":["BASE_URL","MACRO_SYMBOLS","EXTERNAL_URLS","PROXY_SERVICES","fetchWithProxy","url","proxyIndex","length","Error","proxyUrl","console","log","substring","response","fetch","method","headers","timeout","ok","status","data","text","error","message","DUMMY_MACRO_DATA","title","value","change","isPositive","symbol","unit","description","fetchSP500DividendFutures","jsonData","JSON","parse","chart","result","meta","currentPrice","regularMarketPrice","previousClose","toFixed","Math","round","isRealData","dataSource","dummyData","find","item","fetchCitiEconomicSurpriseIndex","latestStatsIndex","indexOf","afterLatestStats","citiIndexIndex","afterCitiIndex","datePattern","dateMatch","match","dateFound","dateIndex","afterDate","numberPattern","numberMatch","currentValue","parseFloat","prevPattern","prevMatch","prevValue","fetchInflationExpectationRate","latestValueMatch","fetchAllMacroData","promises","results","Promise","all","realDataCount","filter","map","fetchMacroData"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/macroApi.js"],"sourcesContent":["// Macro Economics 데이터를 가져오는 서비스\r\nconst BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\r\n\r\n// Macro 지표 심볼 매핑\r\nconst MACRO_SYMBOLS = {\r\n  'S&P 500 Annual Dividend Futures': '^SP500DIV',\r\n  'World Citi Economic Surprise Index': 'CITI_SURPRISE',\r\n  '5-Year 5-Year Forward Inflation Expectation Rate': 'T5YIFR'\r\n};\r\n\r\n// 외부 URL 매핑\r\nexport const EXTERNAL_URLS = {\r\n  'S&P 500 Annual Dividend Futures': 'https://finance.yahoo.com/quote/%5ESP500DIV',\r\n  'World Citi Economic Surprise Index': 'https://en.macromicro.me/charts/45866/global-citi-surprise-index',\r\n  '5-Year 5-Year Forward Inflation Expectation Rate': 'https://fred.stlouisfed.org/series/T5YIFR'\r\n};\r\n\r\n// 프록시 서버들을 사용한 웹 스크래핑\r\nconst PROXY_SERVICES = [\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://corsproxy.io/?',\r\n  'https://thingproxy.freeboard.io/fetch/',\r\n  'https://cors.bridged.cc/',\r\n  'https://api.codetabs.com/v1/proxy?quest=',\r\n  'https://cors.eu.org/',\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  '' // 직접 호출도 시도\r\n];\r\n\r\n// 프록시를 사용한 웹 스크래핑\r\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\r\n  if (proxyIndex >= PROXY_SERVICES.length) {\r\n    throw new Error('All proxy attempts failed');\r\n  }\r\n\r\n  try {\r\n    const proxyUrl = PROXY_SERVICES[proxyIndex] + url;\r\n    console.log(`🔗 Trying proxy ${proxyIndex + 1}/${PROXY_SERVICES.length}: ${proxyUrl.substring(0, 50)}...`);\r\n    \r\n    const response = await fetch(proxyUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n        'Accept-Language': 'en-US,en;q=0.9',\r\n        'Accept-Encoding': 'gzip, deflate, br',\r\n        'Connection': 'keep-alive',\r\n        'Upgrade-Insecure-Requests': '1'\r\n      },\r\n      timeout: 10000 // 10초 타임아웃\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.text();\r\n    \r\n    if (data.length < 100) {\r\n      throw new Error('Response too short, likely an error page');\r\n    }\r\n    \r\n    console.log(`✅ Proxy ${proxyIndex + 1} successful! Data length: ${data.length} characters`);\r\n    return data;\r\n  } catch (error) {\r\n    console.log(`❌ Proxy ${proxyIndex + 1} failed: ${error.message}`);\r\n    return fetchWithProxy(url, proxyIndex + 1);\r\n  }\r\n};\r\n\r\n// 2024년 12월 기준 최신 더미 데이터\r\nconst DUMMY_MACRO_DATA = [\r\n  {\r\n    title: 'S&P 500 Annual Dividend Futures',\r\n    value: 2.15,\r\n    change: 0.05,\r\n    isPositive: true,\r\n    symbol: '^SP500DIV',\r\n    unit: '%',\r\n    description: 'S&P 500 연간 배당률 선물'\r\n  },\r\n  {\r\n    title: 'World Citi Economic Surprise Index',\r\n    value: 12.5,\r\n    change: -2.3,\r\n    isPositive: false,\r\n    symbol: 'CITI_SURPRISE',\r\n    unit: '',\r\n    description: '글로벌 경제 서프라이즈 지수'\r\n  },\r\n  {\r\n    title: '5-Year 5-Year Forward Inflation Expectation Rate',\r\n    value: 2.33,\r\n    change: -0.01,\r\n    isPositive: false,\r\n    symbol: 'T5YIFR',\r\n    unit: '%',\r\n    description: '5년 후 5년 인플레이션 기대율'\r\n  }\r\n];\r\n\r\n// S&P 500 Annual Dividend Futures 가져오기 (Yahoo Finance)\r\nexport const fetchSP500DividendFutures = async () => {\r\n  try {\r\n    console.log('🔄 Fetching S&P 500 Annual Dividend Futures from Yahoo Finance...');\r\n    \r\n    const symbol = '^SP500DIV';\r\n    const url = `${BASE_URL}/${symbol}?interval=1d&range=1d`;\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const data = await fetchWithProxy(url);\r\n    \r\n    if (!data) {\r\n      throw new Error('Failed to fetch data');\r\n    }\r\n    \r\n    // JSON 파싱 시도\r\n    let jsonData;\r\n    try {\r\n      jsonData = JSON.parse(data);\r\n    } catch (error) {\r\n      console.log('❌ Failed to parse JSON, using dummy data');\r\n      throw new Error('Invalid JSON response');\r\n    }\r\n    \r\n    // Yahoo Finance API 응답 구조에서 데이터 추출\r\n    if (jsonData.chart && jsonData.chart.result && jsonData.chart.result[0]) {\r\n      const result = jsonData.chart.result[0];\r\n      const meta = result.meta;\r\n      \r\n      if (meta) {\r\n        const currentPrice = meta.regularMarketPrice;\r\n        const previousClose = meta.previousClose;\r\n        const change = currentPrice - previousClose;\r\n        \r\n        console.log(`✅ Successfully fetched S&P 500 Dividend Futures: ${currentPrice}% (${change >= 0 ? '+' : ''}${change.toFixed(2)})`);\r\n        return {\r\n          title: 'S&P 500 Annual Dividend Futures',\r\n          value: currentPrice,\r\n          change: Math.round(change * 100) / 100,\r\n          isPositive: change >= 0,\r\n          symbol: symbol,\r\n          unit: '%',\r\n          description: 'S&P 500 연간 배당률 선물',\r\n          isRealData: true,\r\n          dataSource: 'Yahoo Finance'\r\n        };\r\n      }\r\n    }\r\n    \r\n    throw new Error('No valid data found for S&P 500 Dividend Futures');\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching S&P 500 Dividend Futures:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'S&P 500 Annual Dividend Futures');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for S&P 500 Dividend Futures');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// World Citi Economic Surprise Index 가져오기 (MacroMicro)\r\nexport const fetchCitiEconomicSurpriseIndex = async () => {\r\n  try {\r\n    console.log('🔄 Fetching World Citi Economic Surprise Index from MacroMicro...');\r\n    \r\n    const url = 'https://en.macromicro.me/charts/45866/global-citi-surprise-index';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const data = await fetchWithProxy(url);\r\n    \r\n    if (!data) {\r\n      throw new Error('Failed to fetch data');\r\n    }\r\n    \r\n    // MacroMicro 페이지에서 데이터 추출 시도\r\n    console.log('📄 HTML Preview:', data.substring(0, 2000));\r\n    \r\n    // \"Latest Stats\" 텍스트 찾기\r\n    const latestStatsIndex = data.indexOf('Latest Stats');\r\n    if (latestStatsIndex === -1) {\r\n      console.log('❌ \"Latest Stats\" text not found');\r\n      throw new Error('Latest Stats section not found');\r\n    }\r\n    \r\n    console.log('✅ Found \"Latest Stats\" section');\r\n    \r\n    // \"Latest Stats\" 이후의 HTML에서 \"Citigroup Economic Surprise Index: Global\" 찾기\r\n    const afterLatestStats = data.substring(latestStatsIndex);\r\n    const citiIndexIndex = afterLatestStats.indexOf('Citigroup Economic Surprise Index: Global');\r\n    if (citiIndexIndex === -1) {\r\n      console.log('❌ \"Citigroup Economic Surprise Index: Global\" text not found');\r\n      throw new Error('Citigroup Economic Surprise Index: Global not found');\r\n    }\r\n    \r\n    console.log('✅ Found \"Citigroup Economic Surprise Index: Global\" text');\r\n    \r\n    // \"Citigroup Economic Surprise Index: Global\" 이후의 HTML에서 날짜와 값 찾기\r\n    const afterCitiIndex = afterLatestStats.substring(citiIndexIndex);\r\n    \r\n    // YYYY-MM-DD 패턴 찾기\r\n    const datePattern = /\\d{4}-\\d{2}-\\d{2}/;\r\n    const dateMatch = afterCitiIndex.match(datePattern);\r\n    \r\n    if (!dateMatch) {\r\n      console.log('❌ Date pattern not found');\r\n      throw new Error('Date pattern not found');\r\n    }\r\n    \r\n    const dateFound = dateMatch[0];\r\n    console.log(`✅ Found date: ${dateFound}`);\r\n    \r\n    // 날짜 이후의 HTML에서 숫자 값 찾기 (더 정확한 패턴)\r\n    const dateIndex = afterCitiIndex.indexOf(dateFound);\r\n    const afterDate = afterCitiIndex.substring(dateIndex + dateFound.length);\r\n    \r\n    // 숫자 패턴 찾기 (소수점 포함, 더 정확한 매칭)\r\n    const numberPattern = /[-+]?\\d+\\.\\d+/;\r\n    const numberMatch = afterDate.match(numberPattern);\r\n    \r\n    if (!numberMatch) {\r\n      console.log('❌ Number value not found after date');\r\n      throw new Error('Number value not found after date');\r\n    }\r\n    \r\n    const currentValue = parseFloat(numberMatch[0]);\r\n    console.log(`✅ Successfully extracted Citi Economic Surprise Index: ${currentValue}`);\r\n    \r\n    // 이전 값도 찾아보기 (Prev: 패턴)\r\n    const prevPattern = /Prev:\\s*([-+]?\\d+\\.\\d+)/;\r\n    const prevMatch = afterDate.match(prevPattern);\r\n    let change = 0.00;\r\n    \r\n    if (prevMatch) {\r\n      const prevValue = parseFloat(prevMatch[1]);\r\n      change = currentValue - prevValue;\r\n      console.log(`✅ Found previous value: ${prevValue}, change: ${change}`);\r\n    }\r\n    \r\n    return {\r\n      title: 'World Citi Economic Surprise Index',\r\n      value: currentValue,\r\n      change: Math.round(change * 100) / 100,\r\n      isPositive: currentValue >= 0,\r\n      symbol: 'CITI_SURPRISE',\r\n      unit: '',\r\n      description: '글로벌 경제 서프라이즈 지수',\r\n      isRealData: true,\r\n      dataSource: 'MacroMicro'\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching Citi Economic Surprise Index:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === 'World Citi Economic Surprise Index');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for Citi Economic Surprise Index');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// 5-Year 5-Year Forward Inflation Expectation Rate 가져오기 (FRED)\r\nexport const fetchInflationExpectationRate = async () => {\r\n  try {\r\n    console.log('🔄 Fetching 5-Year 5-Year Forward Inflation Expectation Rate from FRED...');\r\n    \r\n    const url = 'https://fred.stlouisfed.org/series/T5YIFR';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const data = await fetchWithProxy(url);\r\n    \r\n    if (!data) {\r\n      throw new Error('Failed to fetch data');\r\n    }\r\n    \r\n    // FRED 페이지에서 데이터 추출 시도\r\n    console.log('📄 HTML Preview:', data.substring(0, 1000));\r\n    \r\n    // FRED 페이지에서 최신 값 추출 (2025-08-12: 2.33 형태)\r\n    const latestValueMatch = data.match(/2025-\\d{2}-\\d{2}:\\s*(\\d+\\.\\d+)/);\r\n    if (latestValueMatch) {\r\n      const currentValue = parseFloat(latestValueMatch[1]);\r\n      console.log(`✅ Successfully extracted inflation expectation rate: ${currentValue}%`);\r\n      \r\n      return {\r\n        title: '5-Year 5-Year Forward Inflation Expectation Rate',\r\n        value: currentValue,\r\n        change: 0.00, // FRED에서는 변화량을 직접 제공하지 않으므로 0으로 설정\r\n        isPositive: true,\r\n        symbol: 'T5YIFR',\r\n        unit: '%',\r\n        description: '5년 후 5년 인플레이션 기대율',\r\n        isRealData: true,\r\n        dataSource: 'FRED (Federal Reserve Economic Data)'\r\n      };\r\n    }\r\n    \r\n    // 임시로 더미 데이터 반환\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === '5-Year 5-Year Forward Inflation Expectation Rate');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for Inflation Expectation Rate (parsing not implemented)');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Parsing not implemented)'\r\n      };\r\n    }\r\n    \r\n    throw new Error('No valid data found for Inflation Expectation Rate');\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching Inflation Expectation Rate:', error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_MACRO_DATA.find(item => item.title === '5-Year 5-Year Forward Inflation Expectation Rate');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for Inflation Expectation Rate');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// 모든 Macro 데이터 가져오기\r\nexport const fetchAllMacroData = async () => {\r\n  try {\r\n    console.log('🔄 Fetching all Macro Economics data...');\r\n    \r\n    const promises = [\r\n      fetchSP500DividendFutures(),\r\n      fetchCitiEconomicSurpriseIndex(),\r\n      fetchInflationExpectationRate()\r\n    ];\r\n    \r\n    // 모든 요청 완료 대기\r\n    const results = await Promise.all(promises);\r\n    \r\n    console.log(`✅ Successfully loaded ${results.length} Macro Economics indicators`);\r\n    \r\n    // 실제 데이터가 있는지 확인\r\n    const realDataCount = results.filter(item => item.isRealData).length;\r\n    if (realDataCount === 0) {\r\n      console.log('⚠️ No real data available, showing dummy data');\r\n    } else {\r\n      console.log(`✅ ${realDataCount} real Macro indicators loaded`);\r\n    }\r\n    \r\n    return results;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching all Macro data:', error);\r\n    console.log('📊 Falling back to dummy data...');\r\n    \r\n    // 전체 실패 시 더미 데이터 반환\r\n    return DUMMY_MACRO_DATA.map(item => ({\r\n      ...item,\r\n      isRealData: false,\r\n      dataSource: 'Dummy Data (Error)'\r\n    }));\r\n  }\r\n};\r\n\r\n// Macro 데이터 가져오기 (실시간 시뮬레이션)\r\nexport const fetchMacroData = async () => {\r\n  try {\r\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\r\n    return DUMMY_MACRO_DATA.map(item => ({\r\n      ...item,\r\n      isRealData: false,\r\n      dataSource: 'Dummy Data (Simulation)'\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error fetching macro data:', error);\r\n    return DUMMY_MACRO_DATA;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}