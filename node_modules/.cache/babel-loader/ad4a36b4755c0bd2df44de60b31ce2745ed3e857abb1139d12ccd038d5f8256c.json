{"ast":null,"code":"// Trading Economics 웹사이트에서 최신 데이터를 가져오는 Fixed Income 서비스\nconst BASE_URL = 'https://tradingeconomics.com';\n\n// 프록시 서버들을 사용한 웹 스크래핑\nconst PROXY_SERVICES = ['https://api.allorigins.win/raw?url=', 'https://cors-anywhere.herokuapp.com/', 'https://corsproxy.io/?', 'https://thingproxy.freeboard.io/fetch/'];\n\n// 프록시를 사용한 웹 스크래핑\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\n  if (proxyIndex >= PROXY_SERVICES.length) {\n    throw new Error('All proxy attempts failed');\n  }\n  try {\n    const proxyUrl = PROXY_SERVICES[proxyIndex] + url;\n    const response = await fetch(proxyUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.text();\n  } catch (error) {\n    console.log(`Proxy ${proxyIndex} failed, trying next...`);\n    return fetchWithProxy(url, proxyIndex + 1);\n  }\n};\n\n// HTML에서 금리 데이터 추출 (Trading Economics 첫 문장에서 추출)\nconst extractInterestRateFromHTML = (html, country) => {\n  try {\n    // Trading Economics 페이지의 첫 문장에서 금리 추출\n    // 예: \"South Korea 10Y Government Bond has a 3.85% yield.\"\n\n    // 첫 번째 문장을 찾기 위한 패턴들\n    const patterns = [/(\\d+\\.\\d+)%/g,\n    // 일반적인 퍼센트 패턴\n    /yield.*?(\\d+\\.\\d+)%/i,\n    // yield 다음에 오는 퍼센트\n    /(\\d+\\.\\d+)%.*?yield/i,\n    // 퍼센트 다음에 yield\n    /bond.*?(\\d+\\.\\d+)%/i,\n    // bond 다음에 오는 퍼센트\n    /(\\d+\\.\\d+)%.*?bond/i // 퍼센트 다음에 bond\n    ];\n\n    // HTML에서 첫 번째 문장 추출 (p 태그나 첫 번째 텍스트 블록)\n    const firstSentenceMatch = html.match(/<p[^>]*>([^<]+)<\\/p>/i) || html.match(/<div[^>]*>([^<]+)<\\/div>/i) || html.match(/<span[^>]*>([^<]+)<\\/span>/i);\n    const textToSearch = firstSentenceMatch ? firstSentenceMatch[1] : html;\n\n    // 각 패턴으로 검색\n    for (const pattern of patterns) {\n      const matches = textToSearch.match(pattern);\n      if (matches && matches.length > 0) {\n        // 가장 큰 값 반환 (보통 메인 금리)\n        const rates = matches.map(match => {\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\n        });\n        const maxRate = Math.max(...rates);\n        if (maxRate > 0) {\n          console.log(`Found rate for ${country}: ${maxRate}%`);\n          return maxRate;\n        }\n      }\n    }\n    console.log(`No rate found for ${country}`);\n    return null;\n  } catch (error) {\n    console.error('Error extracting data from HTML:', error);\n    return null;\n  }\n};\n\n// 실제 웹 스크래핑으로 금리 데이터 가져오기\nexport const fetchInterestRateFromWeb = async country => {\n  try {\n    const urls = {\n      '미국': 'https://tradingeconomics.com/united-states/interest-rate',\n      '한국': 'https://tradingeconomics.com/south-korea/interest-rate',\n      '일본': 'https://tradingeconomics.com/japan/interest-rate',\n      '유로': 'https://tradingeconomics.com/euro-area/interest-rate',\n      '영국': 'https://tradingeconomics.com/united-kingdom/interest-rate',\n      '한국국채': 'https://tradingeconomics.com/south-korea/government-bond-yield'\n    };\n    const url = urls[country];\n    if (!url) {\n      throw new Error(`No URL found for country: ${country}`);\n    }\n    console.log(`Fetching data for ${country} from: ${url}`);\n    const html = await fetchWithProxy(url);\n    const rate = extractInterestRateFromHTML(html, country);\n    return rate;\n  } catch (error) {\n    console.error(`Error fetching ${country} interest rate:`, error);\n    return null;\n  }\n};\n\n// 한국 국채 수익률 특별 함수\nexport const fetchKoreaBondYield = async () => {\n  try {\n    const url = 'https://tradingeconomics.com/south-korea/government-bond-yield';\n    console.log('Fetching Korea bond yield from:', url);\n    const html = await fetchWithProxy(url);\n    const rate = extractInterestRateFromHTML(html, '한국국채');\n    if (rate) {\n      console.log(`Korea bond yield: ${rate}%`);\n      return rate;\n    } else {\n      console.log('Failed to extract Korea bond yield');\n      return null;\n    }\n  } catch (error) {\n    console.error('Error fetching Korea bond yield:', error);\n    return null;\n  }\n};\n\n// 2024년 12월 기준 최신 더미 데이터 (실제 시장 상황 반영)\nconst DUMMY_FIXED_INCOME_DATA = [\n// Standard Interest Rates (기준 금리) - 2024년 12월 기준\n{\n  title: '미국 기준 금리',\n  value: 4.375,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'FEDFUNDS'\n}, {\n  title: '유로 기준 금리',\n  value: 4.50,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'ECBREFI'\n}, {\n  title: '일본 기준 금리',\n  value: -0.10,\n  change: 0.00,\n  isPositive: false,\n  symbol: 'BOJDF'\n}, {\n  title: '한국 기준 금리',\n  value: 2.50,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'KORREPO'\n}, {\n  title: '스위스 기준 금리',\n  value: 1.75,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'SNBREFI'\n}, {\n  title: '영국 기준 금리',\n  value: 5.25,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'BOEREFI'\n}, {\n  title: '호주 기준 금리',\n  value: 4.35,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'RBAREFI'\n}, {\n  title: '브라질 기준 금리',\n  value: 12.25,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'BRAREFI'\n},\n// US Bond Yields - 2024년 12월 기준 최신 수익률\n{\n  title: 'US 3M',\n  value: 5.45,\n  change: 0.02,\n  isPositive: true,\n  symbol: 'US3M'\n}, {\n  title: 'US 2Y',\n  value: 4.78,\n  change: 0.05,\n  isPositive: true,\n  symbol: 'US2Y'\n}, {\n  title: 'US 10Y',\n  value: 4.25,\n  change: 0.08,\n  isPositive: true,\n  symbol: 'US10Y'\n}, {\n  title: 'US 30Y',\n  value: 4.45,\n  change: 0.12,\n  isPositive: true,\n  symbol: 'US30Y'\n},\n// Korea Bond Yields - 2024년 12월 기준 최신 수익률\n{\n  title: 'Korea 2Y',\n  value: 3.45,\n  change: 0.03,\n  isPositive: true,\n  symbol: 'KR2Y'\n}, {\n  title: 'Korea 3Y',\n  value: 3.52,\n  change: 0.04,\n  isPositive: true,\n  symbol: 'KR3Y'\n}, {\n  title: 'Korea 5Y',\n  value: 3.68,\n  change: 0.06,\n  isPositive: true,\n  symbol: 'KR5Y'\n}, {\n  title: 'Korea 10Y',\n  value: 3.85,\n  change: 0.08,\n  isPositive: true,\n  symbol: 'KR10Y'\n}, {\n  title: 'Korea 30Y',\n  value: 4.12,\n  change: 0.10,\n  isPositive: true,\n  symbol: 'KR30Y'\n},\n// Japan Bond Yields - 2024년 12월 기준 최신 수익률\n{\n  title: 'Japan 2Y',\n  value: 0.12,\n  change: 0.01,\n  isPositive: true,\n  symbol: 'JP2Y'\n}, {\n  title: 'Japan 3Y',\n  value: 0.15,\n  change: 0.02,\n  isPositive: true,\n  symbol: 'JP3Y'\n}, {\n  title: 'Japan 5Y',\n  value: 0.25,\n  change: 0.03,\n  isPositive: true,\n  symbol: 'JP5Y'\n}, {\n  title: 'Japan 10Y',\n  value: 0.45,\n  change: 0.05,\n  isPositive: true,\n  symbol: 'JP10Y'\n}, {\n  title: 'Japan 30Y',\n  value: 1.25,\n  change: 0.08,\n  isPositive: true,\n  symbol: 'JP30Y'\n},\n// Germany Bond Yields - 2024년 12월 기준 최신 수익률\n{\n  title: 'Germany 2Y',\n  value: 3.12,\n  change: 0.04,\n  isPositive: true,\n  symbol: 'DE2Y'\n}, {\n  title: 'Germany 3Y',\n  value: 3.25,\n  change: 0.05,\n  isPositive: true,\n  symbol: 'DE3Y'\n}, {\n  title: 'Germany 5Y',\n  value: 3.45,\n  change: 0.06,\n  isPositive: true,\n  symbol: 'DE5Y'\n}, {\n  title: 'Germany 10Y',\n  value: 2.85,\n  change: 0.08,\n  isPositive: true,\n  symbol: 'DE10Y'\n}, {\n  title: 'Germany 30Y',\n  value: 3.15,\n  change: 0.10,\n  isPositive: true,\n  symbol: 'DE30Y'\n}];\n\n// 실시간 데이터 시뮬레이션 (더미 데이터에 약간의 변동 추가)\nconst generateRealTimeData = () => {\n  return DUMMY_FIXED_INCOME_DATA.map(item => {\n    // 약간의 랜덤 변동 추가 (±0.05% 범위)\n    const variation = (Math.random() - 0.5) * 0.1;\n    const newValue = item.value + variation;\n    const newChange = variation;\n    return {\n      ...item,\n      value: Math.round(newValue * 100) / 100,\n      change: Math.round(newChange * 100) / 100,\n      isPositive: newChange >= 0\n    };\n  });\n};\n\n// 기준 금리 데이터 가져오기 (실시간 시뮬레이션)\nexport const fetchInterestRates = async () => {\n  try {\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\n    const realTimeData = generateRealTimeData();\n    return realTimeData.filter(item => item.title.includes('기준 금리'));\n  } catch (error) {\n    console.error('Error fetching interest rates:', error);\n    return DUMMY_FIXED_INCOME_DATA.filter(item => item.title.includes('기준 금리'));\n  }\n};\n\n// 채권 수익률 데이터 가져오기 (실시간 시뮬레이션)\nexport const fetchBondYields = async () => {\n  try {\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\n    const realTimeData = generateRealTimeData();\n    return realTimeData.filter(item => !item.title.includes('기준 금리'));\n  } catch (error) {\n    console.error('Error fetching bond yields:', error);\n    return DUMMY_FIXED_INCOME_DATA.filter(item => !item.title.includes('기준 금리'));\n  }\n};\n\n// 모든 Fixed Income 데이터 가져오기 (실시간 시뮬레이션)\nexport const fetchAllFixedIncomeData = async () => {\n  try {\n    // 실시간 시뮬레이션으로 데이터 생성\n    const realTimeData = generateRealTimeData();\n    return realTimeData;\n  } catch (error) {\n    console.error('Error fetching all fixed income data:', error);\n    return DUMMY_FIXED_INCOME_DATA;\n  }\n};\n\n// Trading Economics URL 매핑 (실제 웹사이트 링크)\nexport const TRADING_ECONOMICS_URLS = {\n  // 기준 금리 - 실제 Trading Economics 페이지\n  '미국 기준 금리': 'https://tradingeconomics.com/united-states/interest-rate',\n  '유로 기준 금리': 'https://tradingeconomics.com/euro-area/interest-rate',\n  '일본 기준 금리': 'https://tradingeconomics.com/japan/interest-rate',\n  '한국 기준 금리': 'https://tradingeconomics.com/south-korea/interest-rate',\n  '스위스 기준 금리': 'https://tradingeconomics.com/switzerland/interest-rate',\n  '영국 기준 금리': 'https://tradingeconomics.com/united-kingdom/interest-rate',\n  '호주 기준 금리': 'https://tradingeconomics.com/australia/interest-rate',\n  '브라질 기준 금리': 'https://tradingeconomics.com/brazil/interest-rate',\n  // US Bond Yields - 실제 Trading Economics 페이지\n  'US 3M': 'https://tradingeconomics.com/united-states/government-bond-yield',\n  'US 2Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\n  'US 10Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\n  'US 30Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\n  // Korea Bond Yields - 실제 Trading Economics 페이지\n  'Korea 2Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  'Korea 3Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  'Korea 5Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  'Korea 10Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  'Korea 30Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  // Japan Bond Yields - 실제 Trading Economics 페이지\n  'Japan 2Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  'Japan 3Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  'Japan 5Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  'Japan 10Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  'Japan 30Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  // Germany Bond Yields - 실제 Trading Economics 페이지\n  'Germany 2Y': 'https://tradingeconomics.com/germany/government-bond-yield',\n  'Germany 3Y': 'https://tradingeconomics.com/germany/government-bond-yield',\n  'Germany 5Y': 'https://tradingeconomics.com/germany/government-bond-yield',\n  'Germany 10Y': 'https://tradingeconomics.com/germany/government-bond-yield',\n  'Germany 30Y': 'https://tradingeconomics.com/germany/government-bond-yield'\n};","map":{"version":3,"names":["BASE_URL","PROXY_SERVICES","fetchWithProxy","url","proxyIndex","length","Error","proxyUrl","response","fetch","method","headers","ok","status","text","error","console","log","extractInterestRateFromHTML","html","country","patterns","firstSentenceMatch","match","textToSearch","pattern","matches","rates","map","rateMatch","parseFloat","maxRate","Math","max","fetchInterestRateFromWeb","urls","rate","fetchKoreaBondYield","DUMMY_FIXED_INCOME_DATA","title","value","change","isPositive","symbol","generateRealTimeData","item","variation","random","newValue","newChange","round","fetchInterestRates","realTimeData","filter","includes","fetchBondYields","fetchAllFixedIncomeData","TRADING_ECONOMICS_URLS"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/fixedIncomeApi.js"],"sourcesContent":["// Trading Economics 웹사이트에서 최신 데이터를 가져오는 Fixed Income 서비스\r\nconst BASE_URL = 'https://tradingeconomics.com';\r\n\r\n// 프록시 서버들을 사용한 웹 스크래핑\r\nconst PROXY_SERVICES = [\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  'https://corsproxy.io/?',\r\n  'https://thingproxy.freeboard.io/fetch/'\r\n];\r\n\r\n// 프록시를 사용한 웹 스크래핑\r\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\r\n  if (proxyIndex >= PROXY_SERVICES.length) {\r\n    throw new Error('All proxy attempts failed');\r\n  }\r\n\r\n  try {\r\n    const proxyUrl = PROXY_SERVICES[proxyIndex] + url;\r\n    const response = await fetch(proxyUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return await response.text();\r\n  } catch (error) {\r\n    console.log(`Proxy ${proxyIndex} failed, trying next...`);\r\n    return fetchWithProxy(url, proxyIndex + 1);\r\n  }\r\n};\r\n\r\n// HTML에서 금리 데이터 추출 (Trading Economics 첫 문장에서 추출)\r\nconst extractInterestRateFromHTML = (html, country) => {\r\n  try {\r\n    // Trading Economics 페이지의 첫 문장에서 금리 추출\r\n    // 예: \"South Korea 10Y Government Bond has a 3.85% yield.\"\r\n    \r\n    // 첫 번째 문장을 찾기 위한 패턴들\r\n    const patterns = [\r\n      /(\\d+\\.\\d+)%/g,  // 일반적인 퍼센트 패턴\r\n      /yield.*?(\\d+\\.\\d+)%/i,  // yield 다음에 오는 퍼센트\r\n      /(\\d+\\.\\d+)%.*?yield/i,  // 퍼센트 다음에 yield\r\n      /bond.*?(\\d+\\.\\d+)%/i,   // bond 다음에 오는 퍼센트\r\n      /(\\d+\\.\\d+)%.*?bond/i    // 퍼센트 다음에 bond\r\n    ];\r\n    \r\n    // HTML에서 첫 번째 문장 추출 (p 태그나 첫 번째 텍스트 블록)\r\n    const firstSentenceMatch = html.match(/<p[^>]*>([^<]+)<\\/p>/i) || \r\n                              html.match(/<div[^>]*>([^<]+)<\\/div>/i) ||\r\n                              html.match(/<span[^>]*>([^<]+)<\\/span>/i);\r\n    \r\n    const textToSearch = firstSentenceMatch ? firstSentenceMatch[1] : html;\r\n    \r\n    // 각 패턴으로 검색\r\n    for (const pattern of patterns) {\r\n      const matches = textToSearch.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        // 가장 큰 값 반환 (보통 메인 금리)\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        const maxRate = Math.max(...rates);\r\n        if (maxRate > 0) {\r\n          console.log(`Found rate for ${country}: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`No rate found for ${country}`);\r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error extracting data from HTML:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 실제 웹 스크래핑으로 금리 데이터 가져오기\r\nexport const fetchInterestRateFromWeb = async (country) => {\r\n  try {\r\n    const urls = {\r\n      '미국': 'https://tradingeconomics.com/united-states/interest-rate',\r\n      '한국': 'https://tradingeconomics.com/south-korea/interest-rate',\r\n      '일본': 'https://tradingeconomics.com/japan/interest-rate',\r\n      '유로': 'https://tradingeconomics.com/euro-area/interest-rate',\r\n      '영국': 'https://tradingeconomics.com/united-kingdom/interest-rate',\r\n      '한국국채': 'https://tradingeconomics.com/south-korea/government-bond-yield'\r\n    };\r\n\r\n    const url = urls[country];\r\n    if (!url) {\r\n      throw new Error(`No URL found for country: ${country}`);\r\n    }\r\n\r\n    console.log(`Fetching data for ${country} from: ${url}`);\r\n    const html = await fetchWithProxy(url);\r\n    const rate = extractInterestRateFromHTML(html, country);\r\n    \r\n    return rate;\r\n  } catch (error) {\r\n    console.error(`Error fetching ${country} interest rate:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 한국 국채 수익률 특별 함수\r\nexport const fetchKoreaBondYield = async () => {\r\n  try {\r\n    const url = 'https://tradingeconomics.com/south-korea/government-bond-yield';\r\n    console.log('Fetching Korea bond yield from:', url);\r\n    \r\n    const html = await fetchWithProxy(url);\r\n    const rate = extractInterestRateFromHTML(html, '한국국채');\r\n    \r\n    if (rate) {\r\n      console.log(`Korea bond yield: ${rate}%`);\r\n      return rate;\r\n    } else {\r\n      console.log('Failed to extract Korea bond yield');\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching Korea bond yield:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 2024년 12월 기준 최신 더미 데이터 (실제 시장 상황 반영)\r\nconst DUMMY_FIXED_INCOME_DATA = [\r\n  // Standard Interest Rates (기준 금리) - 2024년 12월 기준\r\n  { title: '미국 기준 금리', value: 4.375, change: 0.00, isPositive: true, symbol: 'FEDFUNDS' },\r\n  { title: '유로 기준 금리', value: 4.50, change: 0.00, isPositive: true, symbol: 'ECBREFI' },\r\n  { title: '일본 기준 금리', value: -0.10, change: 0.00, isPositive: false, symbol: 'BOJDF' },\r\n  { title: '한국 기준 금리', value: 2.50, change: 0.00, isPositive: true, symbol: 'KORREPO' },\r\n  { title: '스위스 기준 금리', value: 1.75, change: 0.00, isPositive: true, symbol: 'SNBREFI' },\r\n  { title: '영국 기준 금리', value: 5.25, change: 0.00, isPositive: true, symbol: 'BOEREFI' },\r\n  { title: '호주 기준 금리', value: 4.35, change: 0.00, isPositive: true, symbol: 'RBAREFI' },\r\n  { title: '브라질 기준 금리', value: 12.25, change: 0.00, isPositive: true, symbol: 'BRAREFI' },\r\n  \r\n  // US Bond Yields - 2024년 12월 기준 최신 수익률\r\n  { title: 'US 3M', value: 5.45, change: 0.02, isPositive: true, symbol: 'US3M' },\r\n  { title: 'US 2Y', value: 4.78, change: 0.05, isPositive: true, symbol: 'US2Y' },\r\n  { title: 'US 10Y', value: 4.25, change: 0.08, isPositive: true, symbol: 'US10Y' },\r\n  { title: 'US 30Y', value: 4.45, change: 0.12, isPositive: true, symbol: 'US30Y' },\r\n  \r\n  // Korea Bond Yields - 2024년 12월 기준 최신 수익률\r\n  { title: 'Korea 2Y', value: 3.45, change: 0.03, isPositive: true, symbol: 'KR2Y' },\r\n  { title: 'Korea 3Y', value: 3.52, change: 0.04, isPositive: true, symbol: 'KR3Y' },\r\n  { title: 'Korea 5Y', value: 3.68, change: 0.06, isPositive: true, symbol: 'KR5Y' },\r\n  { title: 'Korea 10Y', value: 3.85, change: 0.08, isPositive: true, symbol: 'KR10Y' },\r\n  { title: 'Korea 30Y', value: 4.12, change: 0.10, isPositive: true, symbol: 'KR30Y' },\r\n  \r\n  // Japan Bond Yields - 2024년 12월 기준 최신 수익률\r\n  { title: 'Japan 2Y', value: 0.12, change: 0.01, isPositive: true, symbol: 'JP2Y' },\r\n  { title: 'Japan 3Y', value: 0.15, change: 0.02, isPositive: true, symbol: 'JP3Y' },\r\n  { title: 'Japan 5Y', value: 0.25, change: 0.03, isPositive: true, symbol: 'JP5Y' },\r\n  { title: 'Japan 10Y', value: 0.45, change: 0.05, isPositive: true, symbol: 'JP10Y' },\r\n  { title: 'Japan 30Y', value: 1.25, change: 0.08, isPositive: true, symbol: 'JP30Y' },\r\n  \r\n  // Germany Bond Yields - 2024년 12월 기준 최신 수익률\r\n  { title: 'Germany 2Y', value: 3.12, change: 0.04, isPositive: true, symbol: 'DE2Y' },\r\n  { title: 'Germany 3Y', value: 3.25, change: 0.05, isPositive: true, symbol: 'DE3Y' },\r\n  { title: 'Germany 5Y', value: 3.45, change: 0.06, isPositive: true, symbol: 'DE5Y' },\r\n  { title: 'Germany 10Y', value: 2.85, change: 0.08, isPositive: true, symbol: 'DE10Y' },\r\n  { title: 'Germany 30Y', value: 3.15, change: 0.10, isPositive: true, symbol: 'DE30Y' }\r\n];\r\n\r\n// 실시간 데이터 시뮬레이션 (더미 데이터에 약간의 변동 추가)\r\nconst generateRealTimeData = () => {\r\n  return DUMMY_FIXED_INCOME_DATA.map(item => {\r\n    // 약간의 랜덤 변동 추가 (±0.05% 범위)\r\n    const variation = (Math.random() - 0.5) * 0.1;\r\n    const newValue = item.value + variation;\r\n    const newChange = variation;\r\n    \r\n    return {\r\n      ...item,\r\n      value: Math.round(newValue * 100) / 100,\r\n      change: Math.round(newChange * 100) / 100,\r\n      isPositive: newChange >= 0\r\n    };\r\n  });\r\n};\r\n\r\n// 기준 금리 데이터 가져오기 (실시간 시뮬레이션)\r\nexport const fetchInterestRates = async () => {\r\n  try {\r\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\r\n    const realTimeData = generateRealTimeData();\r\n    return realTimeData.filter(item => item.title.includes('기준 금리'));\r\n  } catch (error) {\r\n    console.error('Error fetching interest rates:', error);\r\n    return DUMMY_FIXED_INCOME_DATA.filter(item => item.title.includes('기준 금리'));\r\n  }\r\n};\r\n\r\n// 채권 수익률 데이터 가져오기 (실시간 시뮬레이션)\r\nexport const fetchBondYields = async () => {\r\n  try {\r\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\r\n    const realTimeData = generateRealTimeData();\r\n    return realTimeData.filter(item => !item.title.includes('기준 금리'));\r\n  } catch (error) {\r\n    console.error('Error fetching bond yields:', error);\r\n    return DUMMY_FIXED_INCOME_DATA.filter(item => !item.title.includes('기준 금리'));\r\n  }\r\n};\r\n\r\n// 모든 Fixed Income 데이터 가져오기 (실시간 시뮬레이션)\r\nexport const fetchAllFixedIncomeData = async () => {\r\n  try {\r\n    // 실시간 시뮬레이션으로 데이터 생성\r\n    const realTimeData = generateRealTimeData();\r\n    return realTimeData;\r\n  } catch (error) {\r\n    console.error('Error fetching all fixed income data:', error);\r\n    return DUMMY_FIXED_INCOME_DATA;\r\n  }\r\n};\r\n\r\n// Trading Economics URL 매핑 (실제 웹사이트 링크)\r\nexport const TRADING_ECONOMICS_URLS = {\r\n  // 기준 금리 - 실제 Trading Economics 페이지\r\n  '미국 기준 금리': 'https://tradingeconomics.com/united-states/interest-rate',\r\n  '유로 기준 금리': 'https://tradingeconomics.com/euro-area/interest-rate',\r\n  '일본 기준 금리': 'https://tradingeconomics.com/japan/interest-rate',\r\n  '한국 기준 금리': 'https://tradingeconomics.com/south-korea/interest-rate',\r\n  '스위스 기준 금리': 'https://tradingeconomics.com/switzerland/interest-rate',\r\n  '영국 기준 금리': 'https://tradingeconomics.com/united-kingdom/interest-rate',\r\n  '호주 기준 금리': 'https://tradingeconomics.com/australia/interest-rate',\r\n  '브라질 기준 금리': 'https://tradingeconomics.com/brazil/interest-rate',\r\n  \r\n  // US Bond Yields - 실제 Trading Economics 페이지\r\n  'US 3M': 'https://tradingeconomics.com/united-states/government-bond-yield',\r\n  'US 2Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\r\n  'US 10Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\r\n  'US 30Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\r\n  \r\n  // Korea Bond Yields - 실제 Trading Economics 페이지\r\n  'Korea 2Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 3Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 5Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 10Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 30Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  \r\n  // Japan Bond Yields - 실제 Trading Economics 페이지\r\n  'Japan 2Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 3Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 5Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 10Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 30Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  \r\n  // Germany Bond Yields - 실제 Trading Economics 페이지\r\n  'Germany 2Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 3Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 5Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 10Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 30Y': 'https://tradingeconomics.com/germany/government-bond-yield'\r\n}; "],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,8BAA8B;;AAE/C;AACA,MAAMC,cAAc,GAAG,CACrB,qCAAqC,EACrC,sCAAsC,EACtC,wBAAwB,EACxB,wCAAwC,CACzC;;AAED;AACA,MAAMC,cAAc,GAAG,MAAAA,CAAOC,GAAG,EAAEC,UAAU,GAAG,CAAC,KAAK;EACpD,IAAIA,UAAU,IAAIH,cAAc,CAACI,MAAM,EAAE;IACvC,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;EAC9C;EAEA,IAAI;IACF,MAAMC,QAAQ,GAAGN,cAAc,CAACG,UAAU,CAAC,GAAGD,GAAG;IACjD,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACF,QAAQ,EAAE;MACrCG,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,QAAQ,EAAE,iEAAiE;QAC3E,YAAY,EAAE;MAChB;IACF,CAAC,CAAC;IAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIN,KAAK,CAAC,uBAAuBE,QAAQ,CAACK,MAAM,EAAE,CAAC;IAC3D;IAEA,OAAO,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,SAASb,UAAU,yBAAyB,CAAC;IACzD,OAAOF,cAAc,CAACC,GAAG,EAAEC,UAAU,GAAG,CAAC,CAAC;EAC5C;AACF,CAAC;;AAED;AACA,MAAMc,2BAA2B,GAAGA,CAACC,IAAI,EAAEC,OAAO,KAAK;EACrD,IAAI;IACF;IACA;;IAEA;IACA,MAAMC,QAAQ,GAAG,CACf,cAAc;IAAG;IACjB,sBAAsB;IAAG;IACzB,sBAAsB;IAAG;IACzB,qBAAqB;IAAI;IACzB,qBAAqB,CAAI;IAAA,CAC1B;;IAED;IACA,MAAMC,kBAAkB,GAAGH,IAAI,CAACI,KAAK,CAAC,uBAAuB,CAAC,IACpCJ,IAAI,CAACI,KAAK,CAAC,2BAA2B,CAAC,IACvCJ,IAAI,CAACI,KAAK,CAAC,6BAA6B,CAAC;IAEnE,MAAMC,YAAY,GAAGF,kBAAkB,GAAGA,kBAAkB,CAAC,CAAC,CAAC,GAAGH,IAAI;;IAEtE;IACA,KAAK,MAAMM,OAAO,IAAIJ,QAAQ,EAAE;MAC9B,MAAMK,OAAO,GAAGF,YAAY,CAACD,KAAK,CAACE,OAAO,CAAC;MAC3C,IAAIC,OAAO,IAAIA,OAAO,CAACrB,MAAM,GAAG,CAAC,EAAE;QACjC;QACA,MAAMsB,KAAK,GAAGD,OAAO,CAACE,GAAG,CAACL,KAAK,IAAI;UACjC,MAAMM,SAAS,GAAGN,KAAK,CAACA,KAAK,CAAC,aAAa,CAAC;UAC5C,OAAOM,SAAS,GAAGC,UAAU,CAACD,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;QACjD,CAAC,CAAC;QAEF,MAAME,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGN,KAAK,CAAC;QAClC,IAAII,OAAO,GAAG,CAAC,EAAE;UACff,OAAO,CAACC,GAAG,CAAC,kBAAkBG,OAAO,KAAKW,OAAO,GAAG,CAAC;UACrD,OAAOA,OAAO;QAChB;MACF;IACF;IAEAf,OAAO,CAACC,GAAG,CAAC,qBAAqBG,OAAO,EAAE,CAAC;IAC3C,OAAO,IAAI;EACb,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMmB,wBAAwB,GAAG,MAAOd,OAAO,IAAK;EACzD,IAAI;IACF,MAAMe,IAAI,GAAG;MACX,IAAI,EAAE,0DAA0D;MAChE,IAAI,EAAE,wDAAwD;MAC9D,IAAI,EAAE,kDAAkD;MACxD,IAAI,EAAE,sDAAsD;MAC5D,IAAI,EAAE,2DAA2D;MACjE,MAAM,EAAE;IACV,CAAC;IAED,MAAMhC,GAAG,GAAGgC,IAAI,CAACf,OAAO,CAAC;IACzB,IAAI,CAACjB,GAAG,EAAE;MACR,MAAM,IAAIG,KAAK,CAAC,6BAA6Bc,OAAO,EAAE,CAAC;IACzD;IAEAJ,OAAO,CAACC,GAAG,CAAC,qBAAqBG,OAAO,UAAUjB,GAAG,EAAE,CAAC;IACxD,MAAMgB,IAAI,GAAG,MAAMjB,cAAc,CAACC,GAAG,CAAC;IACtC,MAAMiC,IAAI,GAAGlB,2BAA2B,CAACC,IAAI,EAAEC,OAAO,CAAC;IAEvD,OAAOgB,IAAI;EACb,CAAC,CAAC,OAAOrB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kBAAkBK,OAAO,iBAAiB,EAAEL,KAAK,CAAC;IAChE,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMsB,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7C,IAAI;IACF,MAAMlC,GAAG,GAAG,gEAAgE;IAC5Ea,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEd,GAAG,CAAC;IAEnD,MAAMgB,IAAI,GAAG,MAAMjB,cAAc,CAACC,GAAG,CAAC;IACtC,MAAMiC,IAAI,GAAGlB,2BAA2B,CAACC,IAAI,EAAE,MAAM,CAAC;IAEtD,IAAIiB,IAAI,EAAE;MACRpB,OAAO,CAACC,GAAG,CAAC,qBAAqBmB,IAAI,GAAG,CAAC;MACzC,OAAOA,IAAI;IACb,CAAC,MAAM;MACLpB,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjD,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,MAAMuB,uBAAuB,GAAG;AAC9B;AACA;EAAEC,KAAK,EAAE,UAAU;EAAEC,KAAK,EAAE,KAAK;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAW,CAAC,EACvF;EAAEJ,KAAK,EAAE,UAAU;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAU,CAAC,EACrF;EAAEJ,KAAK,EAAE,UAAU;EAAEC,KAAK,EAAE,CAAC,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,KAAK;EAAEC,MAAM,EAAE;AAAQ,CAAC,EACrF;EAAEJ,KAAK,EAAE,UAAU;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAU,CAAC,EACrF;EAAEJ,KAAK,EAAE,WAAW;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAU,CAAC,EACtF;EAAEJ,KAAK,EAAE,UAAU;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAU,CAAC,EACrF;EAAEJ,KAAK,EAAE,UAAU;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAU,CAAC,EACrF;EAAEJ,KAAK,EAAE,WAAW;EAAEC,KAAK,EAAE,KAAK;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAU,CAAC;AAEvF;AACA;EAAEJ,KAAK,EAAE,OAAO;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAO,CAAC,EAC/E;EAAEJ,KAAK,EAAE,OAAO;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAO,CAAC,EAC/E;EAAEJ,KAAK,EAAE,QAAQ;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAQ,CAAC,EACjF;EAAEJ,KAAK,EAAE,QAAQ;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAQ,CAAC;AAEjF;AACA;EAAEJ,KAAK,EAAE,UAAU;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAO,CAAC,EAClF;EAAEJ,KAAK,EAAE,UAAU;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAO,CAAC,EAClF;EAAEJ,KAAK,EAAE,UAAU;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAO,CAAC,EAClF;EAAEJ,KAAK,EAAE,WAAW;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAQ,CAAC,EACpF;EAAEJ,KAAK,EAAE,WAAW;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAQ,CAAC;AAEpF;AACA;EAAEJ,KAAK,EAAE,UAAU;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAO,CAAC,EAClF;EAAEJ,KAAK,EAAE,UAAU;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAO,CAAC,EAClF;EAAEJ,KAAK,EAAE,UAAU;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAO,CAAC,EAClF;EAAEJ,KAAK,EAAE,WAAW;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAQ,CAAC,EACpF;EAAEJ,KAAK,EAAE,WAAW;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAQ,CAAC;AAEpF;AACA;EAAEJ,KAAK,EAAE,YAAY;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAO,CAAC,EACpF;EAAEJ,KAAK,EAAE,YAAY;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAO,CAAC,EACpF;EAAEJ,KAAK,EAAE,YAAY;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAO,CAAC,EACpF;EAAEJ,KAAK,EAAE,aAAa;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAQ,CAAC,EACtF;EAAEJ,KAAK,EAAE,aAAa;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAQ,CAAC,CACvF;;AAED;AACA,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EACjC,OAAON,uBAAuB,CAACV,GAAG,CAACiB,IAAI,IAAI;IACzC;IACA,MAAMC,SAAS,GAAG,CAACd,IAAI,CAACe,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG;IAC7C,MAAMC,QAAQ,GAAGH,IAAI,CAACL,KAAK,GAAGM,SAAS;IACvC,MAAMG,SAAS,GAAGH,SAAS;IAE3B,OAAO;MACL,GAAGD,IAAI;MACPL,KAAK,EAAER,IAAI,CAACkB,KAAK,CAACF,QAAQ,GAAG,GAAG,CAAC,GAAG,GAAG;MACvCP,MAAM,EAAET,IAAI,CAACkB,KAAK,CAACD,SAAS,GAAG,GAAG,CAAC,GAAG,GAAG;MACzCP,UAAU,EAAEO,SAAS,IAAI;IAC3B,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACF;IACA,MAAMC,YAAY,GAAGR,oBAAoB,CAAC,CAAC;IAC3C,OAAOQ,YAAY,CAACC,MAAM,CAACR,IAAI,IAAIA,IAAI,CAACN,KAAK,CAACe,QAAQ,CAAC,OAAO,CAAC,CAAC;EAClE,CAAC,CAAC,OAAOvC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,OAAOuB,uBAAuB,CAACe,MAAM,CAACR,IAAI,IAAIA,IAAI,CAACN,KAAK,CAACe,QAAQ,CAAC,OAAO,CAAC,CAAC;EAC7E;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACF;IACA,MAAMH,YAAY,GAAGR,oBAAoB,CAAC,CAAC;IAC3C,OAAOQ,YAAY,CAACC,MAAM,CAACR,IAAI,IAAI,CAACA,IAAI,CAACN,KAAK,CAACe,QAAQ,CAAC,OAAO,CAAC,CAAC;EACnE,CAAC,CAAC,OAAOvC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAOuB,uBAAuB,CAACe,MAAM,CAACR,IAAI,IAAI,CAACA,IAAI,CAACN,KAAK,CAACe,QAAQ,CAAC,OAAO,CAAC,CAAC;EAC9E;AACF,CAAC;;AAED;AACA,OAAO,MAAME,uBAAuB,GAAG,MAAAA,CAAA,KAAY;EACjD,IAAI;IACF;IACA,MAAMJ,YAAY,GAAGR,oBAAoB,CAAC,CAAC;IAC3C,OAAOQ,YAAY;EACrB,CAAC,CAAC,OAAOrC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC7D,OAAOuB,uBAAuB;EAChC;AACF,CAAC;;AAED;AACA,OAAO,MAAMmB,sBAAsB,GAAG;EACpC;EACA,UAAU,EAAE,0DAA0D;EACtE,UAAU,EAAE,sDAAsD;EAClE,UAAU,EAAE,kDAAkD;EAC9D,UAAU,EAAE,wDAAwD;EACpE,WAAW,EAAE,wDAAwD;EACrE,UAAU,EAAE,2DAA2D;EACvE,UAAU,EAAE,sDAAsD;EAClE,WAAW,EAAE,mDAAmD;EAEhE;EACA,OAAO,EAAE,kEAAkE;EAC3E,OAAO,EAAE,kEAAkE;EAC3E,QAAQ,EAAE,kEAAkE;EAC5E,QAAQ,EAAE,kEAAkE;EAE5E;EACA,UAAU,EAAE,gEAAgE;EAC5E,UAAU,EAAE,gEAAgE;EAC5E,UAAU,EAAE,gEAAgE;EAC5E,WAAW,EAAE,gEAAgE;EAC7E,WAAW,EAAE,gEAAgE;EAE7E;EACA,UAAU,EAAE,0DAA0D;EACtE,UAAU,EAAE,0DAA0D;EACtE,UAAU,EAAE,0DAA0D;EACtE,WAAW,EAAE,0DAA0D;EACvE,WAAW,EAAE,0DAA0D;EAEvE;EACA,YAAY,EAAE,4DAA4D;EAC1E,YAAY,EAAE,4DAA4D;EAC1E,YAAY,EAAE,4DAA4D;EAC1E,aAAa,EAAE,4DAA4D;EAC3E,aAAa,EAAE;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}