{"ast":null,"code":"// Yahoo Finance API를 사용한 FX 데이터 서비스\n\n// 주요 환율 심볼 매핑\nconst FX_SYMBOLS = {\n  'USD/KRW': 'KRW=X',\n  // 달러/원\n  'EUR/KRW': 'EURKRW=X',\n  // 유로/원\n  'JPY/KRW': 'JPYKRW=X',\n  // 엔/원\n  'CNY/KRW': 'CNYKRW=X',\n  // 위안/원\n  'GBP/KRW': 'GBPKRW=X',\n  // 파운드/원\n  'EUR/USD': 'EURUSD=X',\n  // 유로/달러\n  'USD/JPY': 'USDJPY=X',\n  // 달러/엔\n  'GBP/USD': 'GBPUSD=X',\n  // 파운드/달러\n  'USD/CNY': 'USDCNY=X',\n  // 달러/위안\n  'EUR/JPY': 'EURJPY=X',\n  // 유로/엔\n  'AUD/USD': 'AUDUSD=X',\n  // 호주달러/달러\n  'USD/CAD': 'USDCAD=X',\n  // 달러/캐나다달러\n  'USD/CHF': 'USDCHF=X',\n  // 달러/스위스프랑\n  'NZD/USD': 'NZDUSD=X',\n  // 뉴질랜드달러/달러\n  'USD/SGD': 'USDSGD=X' // 달러/싱가포르달러\n};\n\n// 현실적인 더미 FX 데이터 (2024년 12월 기준)\nconst DUMMY_FX_DATA = [{\n  title: 'USD/KRW',\n  value: 1345.67,\n  change: 0.15,\n  isPositive: true\n}, {\n  title: 'EUR/KRW',\n  value: 1459.23,\n  change: -0.21,\n  isPositive: false\n}, {\n  title: 'JPY/KRW',\n  value: 9.12,\n  change: 0.45,\n  isPositive: true\n}, {\n  title: 'CNY/KRW',\n  value: 186.34,\n  change: -0.12,\n  isPositive: false\n}, {\n  title: 'GBP/KRW',\n  value: 1702.45,\n  change: 0.32,\n  isPositive: true\n}, {\n  title: 'EUR/USD',\n  value: 1.0856,\n  change: -0.21,\n  isPositive: false\n}, {\n  title: 'USD/JPY',\n  value: 148.45,\n  change: 0.45,\n  isPositive: true\n}, {\n  title: 'GBP/USD',\n  value: 1.2654,\n  change: 0.32,\n  isPositive: true\n}, {\n  title: 'USD/CNY',\n  value: 7.2345,\n  change: -0.12,\n  isPositive: false\n}, {\n  title: 'EUR/JPY',\n  value: 161.23,\n  change: 0.24,\n  isPositive: true\n}, {\n  title: 'AUD/USD',\n  value: 0.6756,\n  change: 0.18,\n  isPositive: true\n}, {\n  title: 'USD/CAD',\n  value: 1.3456,\n  change: -0.08,\n  isPositive: false\n}, {\n  title: 'USD/CHF',\n  value: 0.8923,\n  change: 0.12,\n  isPositive: true\n}, {\n  title: 'NZD/USD',\n  value: 0.6234,\n  change: 0.25,\n  isPositive: true\n}, {\n  title: 'USD/SGD',\n  value: 1.3456,\n  change: -0.05,\n  isPositive: false\n}];\n\n// CORS 프록시 URL들 (주식 API와 동일한 방식)\nconst CORS_PROXIES = ['https://cors-anywhere.herokuapp.com/', 'https://api.allorigins.win/raw?url=', 'https://corsproxy.io/?', '' // 직접 호출도 시도\n];\n\n// 프록시를 사용한 API 호출 (주식 API와 동일한 방식)\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\n  if (proxyIndex >= CORS_PROXIES.length) {\n    throw new Error('All proxy attempts failed');\n  }\n  try {\n    const proxyUrl = CORS_PROXIES[proxyIndex] + url;\n    console.log(`🔗 Trying proxy ${proxyIndex + 1}/${CORS_PROXIES.length}: ${proxyUrl.substring(0, 50)}...`);\n    const response = await fetch(proxyUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n        'Accept-Language': 'en-US,en;q=0.9',\n        'Accept-Encoding': 'gzip, deflate, br',\n        'Connection': 'keep-alive',\n        'Upgrade-Insecure-Requests': '1'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!data || !data.chart || !data.chart.result || data.chart.result.length === 0) {\n      throw new Error('No valid data received');\n    }\n    console.log(`✅ Proxy ${proxyIndex + 1} successful!`);\n    return data;\n  } catch (error) {\n    console.log(`❌ Proxy ${proxyIndex + 1} failed: ${error.message}`);\n    return fetchWithProxy(url, proxyIndex + 1);\n  }\n};\n\n// Yahoo Finance API에서 환율 데이터 가져오기 (주식 API와 동일한 방식)\nconst fetchFXDataFromYahoo = async symbol => {\n  try {\n    console.log(`🔗 Fetching ${symbol} from Yahoo Finance...`);\n    const url = `https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?interval=1d&range=1d`;\n    const data = await fetchWithProxy(url);\n    const result = data.chart.result[0];\n    const meta = result.meta;\n    const regularMarketPrice = meta.regularMarketPrice;\n    const previousClose = meta.previousClose;\n    if (regularMarketPrice && previousClose) {\n      const change = regularMarketPrice - previousClose;\n      const changePercent = change / previousClose * 100;\n      console.log(`✅ ${symbol}: ${regularMarketPrice} (${changePercent > 0 ? '+' : ''}${changePercent.toFixed(2)}%)`);\n      return {\n        price: regularMarketPrice,\n        change: change,\n        changePercent: changePercent,\n        previousClose: previousClose,\n        isPositive: change >= 0\n      };\n    }\n    throw new Error('No valid price data');\n  } catch (error) {\n    console.error(`❌ Error fetching ${symbol}:`, error);\n    return null;\n  }\n};\n\n// 모든 환율 데이터 가져오기 (주식 API와 동일한 방식)\nexport const fetchAllFXData = async () => {\n  try {\n    console.log('🔄 Fetching FX data from Yahoo Finance...');\n    const promises = [];\n\n    // 모든 환율 심볼에 대해 병렬로 데이터 가져오기\n    for (const [name, symbol] of Object.entries(FX_SYMBOLS)) {\n      promises.push(fetchFXDataFromYahoo(symbol).then(data => {\n        if (data) {\n          console.log(`✅ ${name}: ${data.price} (${data.isPositive ? '+' : ''}${data.changePercent.toFixed(2)}%)`);\n          return {\n            title: name,\n            value: data.price,\n            change: data.changePercent,\n            isPositive: data.isPositive,\n            symbol: symbol,\n            isRealData: true,\n            dataSource: 'Yahoo Finance'\n          };\n        } else {\n          console.log(`❌ Failed to fetch ${name}`);\n          return null;\n        }\n      }).catch(error => {\n        console.log(`❌ Error fetching ${name}:`, error.message);\n        return null;\n      }));\n    }\n\n    // 모든 요청 완료 대기\n    const results = await Promise.all(promises);\n\n    // 성공한 데이터만 필터링\n    const successfulData = results.filter(data => data !== null);\n    console.log(`✅ Successfully fetched ${successfulData.length}/${Object.keys(FX_SYMBOLS).length} FX rates`);\n\n    // 실제 데이터가 있으면 반환, 없으면 더미 데이터 사용\n    if (successfulData.length > 0) {\n      return successfulData;\n    } else {\n      console.log('❌ No real data available, using dummy data...');\n      return DUMMY_FX_DATA.map(item => ({\n        ...item,\n        isRealData: false,\n        dataSource: 'Dummy Data',\n        symbol: FX_SYMBOLS[item.title] || ''\n      }));\n    }\n  } catch (error) {\n    console.error('❌ Error fetching FX data:', error);\n    console.log('📊 Falling back to dummy data...');\n\n    // 에러 발생 시 더미 데이터 반환\n    return DUMMY_FX_DATA.map(item => ({\n      ...item,\n      isRealData: false,\n      dataSource: 'Dummy Data (Error)',\n      symbol: FX_SYMBOLS[item.title] || ''\n    }));\n  }\n};\n\n// 특정 환율 데이터 가져오기\nexport const fetchFXRate = async symbol => {\n  const yahooSymbol = FX_SYMBOLS[symbol];\n  if (!yahooSymbol) {\n    throw new Error(`Unknown symbol: ${symbol}`);\n  }\n  return await fetchFXDataFromYahoo(yahooSymbol);\n};\n\n// Yahoo Finance URL 매핑\nexport const YAHOO_FINANCE_URLS = {\n  'USD/KRW': 'https://finance.yahoo.com/quote/KRW=X',\n  'EUR/KRW': 'https://finance.yahoo.com/quote/EURKRW=X',\n  'JPY/KRW': 'https://finance.yahoo.com/quote/JPYKRW=X',\n  'CNY/KRW': 'https://finance.yahoo.com/quote/CNYKRW=X',\n  'GBP/KRW': 'https://finance.yahoo.com/quote/GBPKRW=X',\n  'EUR/USD': 'https://finance.yahoo.com/quote/EURUSD=X',\n  'USD/JPY': 'https://finance.yahoo.com/quote/USDJPY=X',\n  'GBP/USD': 'https://finance.yahoo.com/quote/GBPUSD=X',\n  'USD/CNY': 'https://finance.yahoo.com/quote/USDCNY=X',\n  'EUR/JPY': 'https://finance.yahoo.com/quote/EURJPY=X',\n  'AUD/USD': 'https://finance.yahoo.com/quote/AUDUSD=X',\n  'USD/CAD': 'https://finance.yahoo.com/quote/USDCAD=X',\n  'USD/CHF': 'https://finance.yahoo.com/quote/USDCHF=X',\n  'NZD/USD': 'https://finance.yahoo.com/quote/NZDUSD=X',\n  'USD/SGD': 'https://finance.yahoo.com/quote/USDSGD=X'\n};\n\n// FX vs 주식 API 비교 테스트\nexport const compareFXvsStockAPI = async () => {\n  try {\n    console.log('🔍 Comparing FX vs Stock API...');\n\n    // FX 심볼 테스트\n    const fxSymbol = 'KRW=X';\n    const fxUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${fxSymbol}?interval=1d&range=1d`;\n\n    // 주식 심볼 테스트\n    const stockSymbol = '^GSPC';\n    const stockUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${stockSymbol}?interval=1d&range=1d`;\n    console.log(`🔗 FX URL: ${fxUrl}`);\n    console.log(`🔗 Stock URL: ${stockUrl}`);\n\n    // FX API 테스트\n    try {\n      console.log('🧪 Testing FX API...');\n      const fxResponse = await fetch(fxUrl, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n        }\n      });\n      console.log(`📊 FX response status: ${fxResponse.status}`);\n      console.log(`📊 FX response headers:`, Object.fromEntries(fxResponse.headers.entries()));\n      if (fxResponse.ok) {\n        const fxData = await fxResponse.json();\n        console.log(`📊 FX data keys:`, Object.keys(fxData));\n        if (fxData && fxData.chart && fxData.chart.result && fxData.chart.result[0]) {\n          const fxMeta = fxData.chart.result[0].meta;\n          console.log(`📊 FX meta data:`, fxMeta);\n          console.log(`✅ FX API works! USD/KRW: ${fxMeta.regularMarketPrice}`);\n        }\n      }\n    } catch (fxError) {\n      console.log(`❌ FX API failed:`, fxError.message);\n    }\n\n    // 주식 API 테스트\n    try {\n      console.log('🧪 Testing Stock API...');\n      const stockResponse = await fetch(stockUrl, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n        }\n      });\n      console.log(`📊 Stock response status: ${stockResponse.status}`);\n      console.log(`📊 Stock response headers:`, Object.fromEntries(stockResponse.headers.entries()));\n      if (stockResponse.ok) {\n        const stockData = await stockResponse.json();\n        console.log(`📊 Stock data keys:`, Object.keys(stockData));\n        if (stockData && stockData.chart && stockData.chart.result && stockData.chart.result[0]) {\n          const stockMeta = stockData.chart.result[0].meta;\n          console.log(`📊 Stock meta data:`, stockMeta);\n          console.log(`✅ Stock API works! S&P 500: ${stockMeta.regularMarketPrice}`);\n        }\n      }\n    } catch (stockError) {\n      console.log(`❌ Stock API failed:`, stockError.message);\n    }\n  } catch (error) {\n    console.error(`❌ Comparison test failed:`, error);\n  }\n};\n\n// Yahoo Finance API 테스트 함수\nexport const testYahooFinanceAPI = async () => {\n  try {\n    console.log('🧪 Testing Yahoo Finance API...');\n\n    // 간단한 테스트: USD/KRW 환율 가져오기\n    const testSymbol = 'KRW=X';\n    const testUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${testSymbol}?interval=1d&range=1d`;\n    console.log(`🔗 Testing URL: ${testUrl}`);\n    const response = await fetch(testUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      }\n    });\n    console.log(`📊 Response status: ${response.status}`);\n    console.log(`📊 Response headers:`, Object.fromEntries(response.headers.entries()));\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(`📊 Response data keys:`, Object.keys(data));\n    if (data && data.chart && data.chart.result && data.chart.result[0]) {\n      const result = data.chart.result[0];\n      const meta = result.meta;\n      console.log(`📊 Meta data:`, meta);\n      if (meta.regularMarketPrice) {\n        console.log(`✅ Yahoo Finance API test successful! USD/KRW: ${meta.regularMarketPrice}`);\n        return true;\n      }\n    }\n    console.log(`❌ No valid data in response`);\n    return false;\n  } catch (error) {\n    console.error(`❌ Yahoo Finance API test failed:`, error);\n    return false;\n  }\n};","map":{"version":3,"names":["FX_SYMBOLS","DUMMY_FX_DATA","title","value","change","isPositive","CORS_PROXIES","fetchWithProxy","url","proxyIndex","length","Error","proxyUrl","console","log","substring","response","fetch","method","headers","ok","status","data","json","chart","result","error","message","fetchFXDataFromYahoo","symbol","meta","regularMarketPrice","previousClose","changePercent","toFixed","price","fetchAllFXData","promises","name","Object","entries","push","then","isRealData","dataSource","catch","results","Promise","all","successfulData","filter","keys","map","item","fetchFXRate","yahooSymbol","YAHOO_FINANCE_URLS","compareFXvsStockAPI","fxSymbol","fxUrl","stockSymbol","stockUrl","fxResponse","fromEntries","fxData","fxMeta","fxError","stockResponse","stockData","stockMeta","stockError","testYahooFinanceAPI","testSymbol","testUrl"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/fxApi.js"],"sourcesContent":["// Yahoo Finance API를 사용한 FX 데이터 서비스\r\n\r\n// 주요 환율 심볼 매핑\r\nconst FX_SYMBOLS = {\r\n  'USD/KRW': 'KRW=X', // 달러/원\r\n  'EUR/KRW': 'EURKRW=X', // 유로/원\r\n  'JPY/KRW': 'JPYKRW=X', // 엔/원\r\n  'CNY/KRW': 'CNYKRW=X', // 위안/원\r\n  'GBP/KRW': 'GBPKRW=X', // 파운드/원\r\n  'EUR/USD': 'EURUSD=X', // 유로/달러\r\n  'USD/JPY': 'USDJPY=X', // 달러/엔\r\n  'GBP/USD': 'GBPUSD=X', // 파운드/달러\r\n  'USD/CNY': 'USDCNY=X', // 달러/위안\r\n  'EUR/JPY': 'EURJPY=X', // 유로/엔\r\n  'AUD/USD': 'AUDUSD=X', // 호주달러/달러\r\n  'USD/CAD': 'USDCAD=X', // 달러/캐나다달러\r\n  'USD/CHF': 'USDCHF=X', // 달러/스위스프랑\r\n  'NZD/USD': 'NZDUSD=X', // 뉴질랜드달러/달러\r\n  'USD/SGD': 'USDSGD=X' // 달러/싱가포르달러\r\n};\r\n\r\n// 현실적인 더미 FX 데이터 (2024년 12월 기준)\r\nconst DUMMY_FX_DATA = [\r\n  { title: 'USD/KRW', value: 1345.67, change: 0.15, isPositive: true },\r\n  { title: 'EUR/KRW', value: 1459.23, change: -0.21, isPositive: false },\r\n  { title: 'JPY/KRW', value: 9.12, change: 0.45, isPositive: true },\r\n  { title: 'CNY/KRW', value: 186.34, change: -0.12, isPositive: false },\r\n  { title: 'GBP/KRW', value: 1702.45, change: 0.32, isPositive: true },\r\n  { title: 'EUR/USD', value: 1.0856, change: -0.21, isPositive: false },\r\n  { title: 'USD/JPY', value: 148.45, change: 0.45, isPositive: true },\r\n  { title: 'GBP/USD', value: 1.2654, change: 0.32, isPositive: true },\r\n  { title: 'USD/CNY', value: 7.2345, change: -0.12, isPositive: false },\r\n  { title: 'EUR/JPY', value: 161.23, change: 0.24, isPositive: true },\r\n  { title: 'AUD/USD', value: 0.6756, change: 0.18, isPositive: true },\r\n  { title: 'USD/CAD', value: 1.3456, change: -0.08, isPositive: false },\r\n  { title: 'USD/CHF', value: 0.8923, change: 0.12, isPositive: true },\r\n  { title: 'NZD/USD', value: 0.6234, change: 0.25, isPositive: true },\r\n  { title: 'USD/SGD', value: 1.3456, change: -0.05, isPositive: false }\r\n];\r\n\r\n// CORS 프록시 URL들 (주식 API와 동일한 방식)\r\nconst CORS_PROXIES = [\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://corsproxy.io/?',\r\n  '' // 직접 호출도 시도\r\n];\r\n\r\n// 프록시를 사용한 API 호출 (주식 API와 동일한 방식)\r\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\r\n  if (proxyIndex >= CORS_PROXIES.length) {\r\n    throw new Error('All proxy attempts failed');\r\n  }\r\n\r\n  try {\r\n    const proxyUrl = CORS_PROXIES[proxyIndex] + url;\r\n    console.log(`🔗 Trying proxy ${proxyIndex + 1}/${CORS_PROXIES.length}: ${proxyUrl.substring(0, 50)}...`);\r\n    \r\n    const response = await fetch(proxyUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n        'Accept-Language': 'en-US,en;q=0.9',\r\n        'Accept-Encoding': 'gzip, deflate, br',\r\n        'Connection': 'keep-alive',\r\n        'Upgrade-Insecure-Requests': '1'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    if (!data || !data.chart || !data.chart.result || data.chart.result.length === 0) {\r\n      throw new Error('No valid data received');\r\n    }\r\n    \r\n    console.log(`✅ Proxy ${proxyIndex + 1} successful!`);\r\n    return data;\r\n  } catch (error) {\r\n    console.log(`❌ Proxy ${proxyIndex + 1} failed: ${error.message}`);\r\n    return fetchWithProxy(url, proxyIndex + 1);\r\n  }\r\n};\r\n\r\n// Yahoo Finance API에서 환율 데이터 가져오기 (주식 API와 동일한 방식)\r\nconst fetchFXDataFromYahoo = async (symbol) => {\r\n  try {\r\n    console.log(`🔗 Fetching ${symbol} from Yahoo Finance...`);\r\n    \r\n    const url = `https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?interval=1d&range=1d`;\r\n    const data = await fetchWithProxy(url);\r\n    \r\n    const result = data.chart.result[0];\r\n    const meta = result.meta;\r\n    const regularMarketPrice = meta.regularMarketPrice;\r\n    const previousClose = meta.previousClose;\r\n    \r\n    if (regularMarketPrice && previousClose) {\r\n      const change = regularMarketPrice - previousClose;\r\n      const changePercent = (change / previousClose) * 100;\r\n      \r\n      console.log(`✅ ${symbol}: ${regularMarketPrice} (${changePercent > 0 ? '+' : ''}${changePercent.toFixed(2)}%)`);\r\n      \r\n      return {\r\n        price: regularMarketPrice,\r\n        change: change,\r\n        changePercent: changePercent,\r\n        previousClose: previousClose,\r\n        isPositive: change >= 0\r\n      };\r\n    }\r\n    \r\n    throw new Error('No valid price data');\r\n  } catch (error) {\r\n    console.error(`❌ Error fetching ${symbol}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 모든 환율 데이터 가져오기 (주식 API와 동일한 방식)\r\nexport const fetchAllFXData = async () => {\r\n  try {\r\n    console.log('🔄 Fetching FX data from Yahoo Finance...');\r\n    \r\n    const promises = [];\r\n    \r\n    // 모든 환율 심볼에 대해 병렬로 데이터 가져오기\r\n    for (const [name, symbol] of Object.entries(FX_SYMBOLS)) {\r\n      promises.push(\r\n        fetchFXDataFromYahoo(symbol)\r\n          .then(data => {\r\n            if (data) {\r\n              console.log(`✅ ${name}: ${data.price} (${data.isPositive ? '+' : ''}${data.changePercent.toFixed(2)}%)`);\r\n              return {\r\n                title: name,\r\n                value: data.price,\r\n                change: data.changePercent,\r\n                isPositive: data.isPositive,\r\n                symbol: symbol,\r\n                isRealData: true,\r\n                dataSource: 'Yahoo Finance'\r\n              };\r\n            } else {\r\n              console.log(`❌ Failed to fetch ${name}`);\r\n              return null;\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.log(`❌ Error fetching ${name}:`, error.message);\r\n            return null;\r\n          })\r\n      );\r\n    }\r\n    \r\n    // 모든 요청 완료 대기\r\n    const results = await Promise.all(promises);\r\n    \r\n    // 성공한 데이터만 필터링\r\n    const successfulData = results.filter(data => data !== null);\r\n    \r\n    console.log(`✅ Successfully fetched ${successfulData.length}/${Object.keys(FX_SYMBOLS).length} FX rates`);\r\n    \r\n    // 실제 데이터가 있으면 반환, 없으면 더미 데이터 사용\r\n    if (successfulData.length > 0) {\r\n      return successfulData;\r\n    } else {\r\n      console.log('❌ No real data available, using dummy data...');\r\n      return DUMMY_FX_DATA.map(item => ({\r\n        ...item,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data',\r\n        symbol: FX_SYMBOLS[item.title] || ''\r\n      }));\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching FX data:', error);\r\n    console.log('📊 Falling back to dummy data...');\r\n    \r\n    // 에러 발생 시 더미 데이터 반환\r\n    return DUMMY_FX_DATA.map(item => ({\r\n      ...item,\r\n      isRealData: false,\r\n      dataSource: 'Dummy Data (Error)',\r\n      symbol: FX_SYMBOLS[item.title] || ''\r\n    }));\r\n  }\r\n};\r\n\r\n// 특정 환율 데이터 가져오기\r\nexport const fetchFXRate = async (symbol) => {\r\n  const yahooSymbol = FX_SYMBOLS[symbol];\r\n  if (!yahooSymbol) {\r\n    throw new Error(`Unknown symbol: ${symbol}`);\r\n  }\r\n  \r\n  return await fetchFXDataFromYahoo(yahooSymbol);\r\n};\r\n\r\n// Yahoo Finance URL 매핑\r\nexport const YAHOO_FINANCE_URLS = {\r\n  'USD/KRW': 'https://finance.yahoo.com/quote/KRW=X',\r\n  'EUR/KRW': 'https://finance.yahoo.com/quote/EURKRW=X',\r\n  'JPY/KRW': 'https://finance.yahoo.com/quote/JPYKRW=X',\r\n  'CNY/KRW': 'https://finance.yahoo.com/quote/CNYKRW=X',\r\n  'GBP/KRW': 'https://finance.yahoo.com/quote/GBPKRW=X',\r\n  'EUR/USD': 'https://finance.yahoo.com/quote/EURUSD=X',\r\n  'USD/JPY': 'https://finance.yahoo.com/quote/USDJPY=X',\r\n  'GBP/USD': 'https://finance.yahoo.com/quote/GBPUSD=X',\r\n  'USD/CNY': 'https://finance.yahoo.com/quote/USDCNY=X',\r\n  'EUR/JPY': 'https://finance.yahoo.com/quote/EURJPY=X',\r\n  'AUD/USD': 'https://finance.yahoo.com/quote/AUDUSD=X',\r\n  'USD/CAD': 'https://finance.yahoo.com/quote/USDCAD=X',\r\n  'USD/CHF': 'https://finance.yahoo.com/quote/USDCHF=X',\r\n  'NZD/USD': 'https://finance.yahoo.com/quote/NZDUSD=X',\r\n  'USD/SGD': 'https://finance.yahoo.com/quote/USDSGD=X'\r\n};\r\n\r\n// FX vs 주식 API 비교 테스트\r\nexport const compareFXvsStockAPI = async () => {\r\n  try {\r\n    console.log('🔍 Comparing FX vs Stock API...');\r\n    \r\n    // FX 심볼 테스트\r\n    const fxSymbol = 'KRW=X';\r\n    const fxUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${fxSymbol}?interval=1d&range=1d`;\r\n    \r\n    // 주식 심볼 테스트\r\n    const stockSymbol = '^GSPC';\r\n    const stockUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${stockSymbol}?interval=1d&range=1d`;\r\n    \r\n    console.log(`🔗 FX URL: ${fxUrl}`);\r\n    console.log(`🔗 Stock URL: ${stockUrl}`);\r\n    \r\n    // FX API 테스트\r\n    try {\r\n      console.log('🧪 Testing FX API...');\r\n      const fxResponse = await fetch(fxUrl, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n        }\r\n      });\r\n      \r\n      console.log(`📊 FX response status: ${fxResponse.status}`);\r\n      console.log(`📊 FX response headers:`, Object.fromEntries(fxResponse.headers.entries()));\r\n      \r\n      if (fxResponse.ok) {\r\n        const fxData = await fxResponse.json();\r\n        console.log(`📊 FX data keys:`, Object.keys(fxData));\r\n        \r\n        if (fxData && fxData.chart && fxData.chart.result && fxData.chart.result[0]) {\r\n          const fxMeta = fxData.chart.result[0].meta;\r\n          console.log(`📊 FX meta data:`, fxMeta);\r\n          console.log(`✅ FX API works! USD/KRW: ${fxMeta.regularMarketPrice}`);\r\n        }\r\n      }\r\n    } catch (fxError) {\r\n      console.log(`❌ FX API failed:`, fxError.message);\r\n    }\r\n    \r\n    // 주식 API 테스트\r\n    try {\r\n      console.log('🧪 Testing Stock API...');\r\n      const stockResponse = await fetch(stockUrl, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n        }\r\n      });\r\n      \r\n      console.log(`📊 Stock response status: ${stockResponse.status}`);\r\n      console.log(`📊 Stock response headers:`, Object.fromEntries(stockResponse.headers.entries()));\r\n      \r\n      if (stockResponse.ok) {\r\n        const stockData = await stockResponse.json();\r\n        console.log(`📊 Stock data keys:`, Object.keys(stockData));\r\n        \r\n        if (stockData && stockData.chart && stockData.chart.result && stockData.chart.result[0]) {\r\n          const stockMeta = stockData.chart.result[0].meta;\r\n          console.log(`📊 Stock meta data:`, stockMeta);\r\n          console.log(`✅ Stock API works! S&P 500: ${stockMeta.regularMarketPrice}`);\r\n        }\r\n      }\r\n    } catch (stockError) {\r\n      console.log(`❌ Stock API failed:`, stockError.message);\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error(`❌ Comparison test failed:`, error);\r\n  }\r\n};\r\n\r\n// Yahoo Finance API 테스트 함수\r\nexport const testYahooFinanceAPI = async () => {\r\n  try {\r\n    console.log('🧪 Testing Yahoo Finance API...');\r\n    \r\n    // 간단한 테스트: USD/KRW 환율 가져오기\r\n    const testSymbol = 'KRW=X';\r\n    const testUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${testSymbol}?interval=1d&range=1d`;\r\n    \r\n    console.log(`🔗 Testing URL: ${testUrl}`);\r\n    \r\n    const response = await fetch(testUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n      }\r\n    });\r\n    \r\n    console.log(`📊 Response status: ${response.status}`);\r\n    console.log(`📊 Response headers:`, Object.fromEntries(response.headers.entries()));\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log(`📊 Response data keys:`, Object.keys(data));\r\n    \r\n    if (data && data.chart && data.chart.result && data.chart.result[0]) {\r\n      const result = data.chart.result[0];\r\n      const meta = result.meta;\r\n      console.log(`📊 Meta data:`, meta);\r\n      \r\n      if (meta.regularMarketPrice) {\r\n        console.log(`✅ Yahoo Finance API test successful! USD/KRW: ${meta.regularMarketPrice}`);\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    console.log(`❌ No valid data in response`);\r\n    return false;\r\n    \r\n  } catch (error) {\r\n    console.error(`❌ Yahoo Finance API test failed:`, error);\r\n    return false;\r\n  }\r\n}; "],"mappings":"AAAA;;AAEA;AACA,MAAMA,UAAU,GAAG;EACjB,SAAS,EAAE,OAAO;EAAE;EACpB,SAAS,EAAE,UAAU;EAAE;EACvB,SAAS,EAAE,UAAU;EAAE;EACvB,SAAS,EAAE,UAAU;EAAE;EACvB,SAAS,EAAE,UAAU;EAAE;EACvB,SAAS,EAAE,UAAU;EAAE;EACvB,SAAS,EAAE,UAAU;EAAE;EACvB,SAAS,EAAE,UAAU;EAAE;EACvB,SAAS,EAAE,UAAU;EAAE;EACvB,SAAS,EAAE,UAAU;EAAE;EACvB,SAAS,EAAE,UAAU;EAAE;EACvB,SAAS,EAAE,UAAU;EAAE;EACvB,SAAS,EAAE,UAAU;EAAE;EACvB,SAAS,EAAE,UAAU;EAAE;EACvB,SAAS,EAAE,UAAU,CAAC;AACxB,CAAC;;AAED;AACA,MAAMC,aAAa,GAAG,CACpB;EAAEC,KAAK,EAAE,SAAS;EAAEC,KAAK,EAAE,OAAO;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE;AAAK,CAAC,EACpE;EAAEH,KAAK,EAAE,SAAS;EAAEC,KAAK,EAAE,OAAO;EAAEC,MAAM,EAAE,CAAC,IAAI;EAAEC,UAAU,EAAE;AAAM,CAAC,EACtE;EAAEH,KAAK,EAAE,SAAS;EAAEC,KAAK,EAAE,IAAI;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE;AAAK,CAAC,EACjE;EAAEH,KAAK,EAAE,SAAS;EAAEC,KAAK,EAAE,MAAM;EAAEC,MAAM,EAAE,CAAC,IAAI;EAAEC,UAAU,EAAE;AAAM,CAAC,EACrE;EAAEH,KAAK,EAAE,SAAS;EAAEC,KAAK,EAAE,OAAO;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE;AAAK,CAAC,EACpE;EAAEH,KAAK,EAAE,SAAS;EAAEC,KAAK,EAAE,MAAM;EAAEC,MAAM,EAAE,CAAC,IAAI;EAAEC,UAAU,EAAE;AAAM,CAAC,EACrE;EAAEH,KAAK,EAAE,SAAS;EAAEC,KAAK,EAAE,MAAM;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE;AAAK,CAAC,EACnE;EAAEH,KAAK,EAAE,SAAS;EAAEC,KAAK,EAAE,MAAM;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE;AAAK,CAAC,EACnE;EAAEH,KAAK,EAAE,SAAS;EAAEC,KAAK,EAAE,MAAM;EAAEC,MAAM,EAAE,CAAC,IAAI;EAAEC,UAAU,EAAE;AAAM,CAAC,EACrE;EAAEH,KAAK,EAAE,SAAS;EAAEC,KAAK,EAAE,MAAM;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE;AAAK,CAAC,EACnE;EAAEH,KAAK,EAAE,SAAS;EAAEC,KAAK,EAAE,MAAM;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE;AAAK,CAAC,EACnE;EAAEH,KAAK,EAAE,SAAS;EAAEC,KAAK,EAAE,MAAM;EAAEC,MAAM,EAAE,CAAC,IAAI;EAAEC,UAAU,EAAE;AAAM,CAAC,EACrE;EAAEH,KAAK,EAAE,SAAS;EAAEC,KAAK,EAAE,MAAM;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE;AAAK,CAAC,EACnE;EAAEH,KAAK,EAAE,SAAS;EAAEC,KAAK,EAAE,MAAM;EAAEC,MAAM,EAAE,IAAI;EAAEC,UAAU,EAAE;AAAK,CAAC,EACnE;EAAEH,KAAK,EAAE,SAAS;EAAEC,KAAK,EAAE,MAAM;EAAEC,MAAM,EAAE,CAAC,IAAI;EAAEC,UAAU,EAAE;AAAM,CAAC,CACtE;;AAED;AACA,MAAMC,YAAY,GAAG,CACnB,sCAAsC,EACtC,qCAAqC,EACrC,wBAAwB,EACxB,EAAE,CAAC;AAAA,CACJ;;AAED;AACA,MAAMC,cAAc,GAAG,MAAAA,CAAOC,GAAG,EAAEC,UAAU,GAAG,CAAC,KAAK;EACpD,IAAIA,UAAU,IAAIH,YAAY,CAACI,MAAM,EAAE;IACrC,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;EAC9C;EAEA,IAAI;IACF,MAAMC,QAAQ,GAAGN,YAAY,CAACG,UAAU,CAAC,GAAGD,GAAG;IAC/CK,OAAO,CAACC,GAAG,CAAC,mBAAmBL,UAAU,GAAG,CAAC,IAAIH,YAAY,CAACI,MAAM,KAAKE,QAAQ,CAACG,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC;IAExG,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,QAAQ,EAAE;MACrCM,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,QAAQ,EAAE,kBAAkB;QAC5B,YAAY,EAAE,qHAAqH;QACnI,iBAAiB,EAAE,gBAAgB;QACnC,iBAAiB,EAAE,mBAAmB;QACtC,YAAY,EAAE,YAAY;QAC1B,2BAA2B,EAAE;MAC/B;IACF,CAAC,CAAC;IAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIT,KAAK,CAAC,uBAAuBK,QAAQ,CAACK,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAElC,IAAI,CAACD,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,IAAI,CAACF,IAAI,CAACE,KAAK,CAACC,MAAM,IAAIH,IAAI,CAACE,KAAK,CAACC,MAAM,CAACf,MAAM,KAAK,CAAC,EAAE;MAChF,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEAE,OAAO,CAACC,GAAG,CAAC,WAAWL,UAAU,GAAG,CAAC,cAAc,CAAC;IACpD,OAAOa,IAAI;EACb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdb,OAAO,CAACC,GAAG,CAAC,WAAWL,UAAU,GAAG,CAAC,YAAYiB,KAAK,CAACC,OAAO,EAAE,CAAC;IACjE,OAAOpB,cAAc,CAACC,GAAG,EAAEC,UAAU,GAAG,CAAC,CAAC;EAC5C;AACF,CAAC;;AAED;AACA,MAAMmB,oBAAoB,GAAG,MAAOC,MAAM,IAAK;EAC7C,IAAI;IACFhB,OAAO,CAACC,GAAG,CAAC,eAAee,MAAM,wBAAwB,CAAC;IAE1D,MAAMrB,GAAG,GAAG,qDAAqDqB,MAAM,uBAAuB;IAC9F,MAAMP,IAAI,GAAG,MAAMf,cAAc,CAACC,GAAG,CAAC;IAEtC,MAAMiB,MAAM,GAAGH,IAAI,CAACE,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC;IACnC,MAAMK,IAAI,GAAGL,MAAM,CAACK,IAAI;IACxB,MAAMC,kBAAkB,GAAGD,IAAI,CAACC,kBAAkB;IAClD,MAAMC,aAAa,GAAGF,IAAI,CAACE,aAAa;IAExC,IAAID,kBAAkB,IAAIC,aAAa,EAAE;MACvC,MAAM5B,MAAM,GAAG2B,kBAAkB,GAAGC,aAAa;MACjD,MAAMC,aAAa,GAAI7B,MAAM,GAAG4B,aAAa,GAAI,GAAG;MAEpDnB,OAAO,CAACC,GAAG,CAAC,KAAKe,MAAM,KAAKE,kBAAkB,KAAKE,aAAa,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,GAAGA,aAAa,CAACC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;MAE/G,OAAO;QACLC,KAAK,EAAEJ,kBAAkB;QACzB3B,MAAM,EAAEA,MAAM;QACd6B,aAAa,EAAEA,aAAa;QAC5BD,aAAa,EAAEA,aAAa;QAC5B3B,UAAU,EAAED,MAAM,IAAI;MACxB,CAAC;IACH;IAEA,MAAM,IAAIO,KAAK,CAAC,qBAAqB,CAAC;EACxC,CAAC,CAAC,OAAOe,KAAK,EAAE;IACdb,OAAO,CAACa,KAAK,CAAC,oBAAoBG,MAAM,GAAG,EAAEH,KAAK,CAAC;IACnD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMU,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACFvB,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;IAExD,MAAMuB,QAAQ,GAAG,EAAE;;IAEnB;IACA,KAAK,MAAM,CAACC,IAAI,EAAET,MAAM,CAAC,IAAIU,MAAM,CAACC,OAAO,CAACxC,UAAU,CAAC,EAAE;MACvDqC,QAAQ,CAACI,IAAI,CACXb,oBAAoB,CAACC,MAAM,CAAC,CACzBa,IAAI,CAACpB,IAAI,IAAI;QACZ,IAAIA,IAAI,EAAE;UACRT,OAAO,CAACC,GAAG,CAAC,KAAKwB,IAAI,KAAKhB,IAAI,CAACa,KAAK,KAAKb,IAAI,CAACjB,UAAU,GAAG,GAAG,GAAG,EAAE,GAAGiB,IAAI,CAACW,aAAa,CAACC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;UACxG,OAAO;YACLhC,KAAK,EAAEoC,IAAI;YACXnC,KAAK,EAAEmB,IAAI,CAACa,KAAK;YACjB/B,MAAM,EAAEkB,IAAI,CAACW,aAAa;YAC1B5B,UAAU,EAAEiB,IAAI,CAACjB,UAAU;YAC3BwB,MAAM,EAAEA,MAAM;YACdc,UAAU,EAAE,IAAI;YAChBC,UAAU,EAAE;UACd,CAAC;QACH,CAAC,MAAM;UACL/B,OAAO,CAACC,GAAG,CAAC,qBAAqBwB,IAAI,EAAE,CAAC;UACxC,OAAO,IAAI;QACb;MACF,CAAC,CAAC,CACDO,KAAK,CAACnB,KAAK,IAAI;QACdb,OAAO,CAACC,GAAG,CAAC,oBAAoBwB,IAAI,GAAG,EAAEZ,KAAK,CAACC,OAAO,CAAC;QACvD,OAAO,IAAI;MACb,CAAC,CACL,CAAC;IACH;;IAEA;IACA,MAAMmB,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACX,QAAQ,CAAC;;IAE3C;IACA,MAAMY,cAAc,GAAGH,OAAO,CAACI,MAAM,CAAC5B,IAAI,IAAIA,IAAI,KAAK,IAAI,CAAC;IAE5DT,OAAO,CAACC,GAAG,CAAC,0BAA0BmC,cAAc,CAACvC,MAAM,IAAI6B,MAAM,CAACY,IAAI,CAACnD,UAAU,CAAC,CAACU,MAAM,WAAW,CAAC;;IAEzG;IACA,IAAIuC,cAAc,CAACvC,MAAM,GAAG,CAAC,EAAE;MAC7B,OAAOuC,cAAc;IACvB,CAAC,MAAM;MACLpC,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;MAC5D,OAAOb,aAAa,CAACmD,GAAG,CAACC,IAAI,KAAK;QAChC,GAAGA,IAAI;QACPV,UAAU,EAAE,KAAK;QACjBC,UAAU,EAAE,YAAY;QACxBf,MAAM,EAAE7B,UAAU,CAACqD,IAAI,CAACnD,KAAK,CAAC,IAAI;MACpC,CAAC,CAAC,CAAC;IACL;EAEF,CAAC,CAAC,OAAOwB,KAAK,EAAE;IACdb,OAAO,CAACa,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjDb,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;;IAE/C;IACA,OAAOb,aAAa,CAACmD,GAAG,CAACC,IAAI,KAAK;MAChC,GAAGA,IAAI;MACPV,UAAU,EAAE,KAAK;MACjBC,UAAU,EAAE,oBAAoB;MAChCf,MAAM,EAAE7B,UAAU,CAACqD,IAAI,CAACnD,KAAK,CAAC,IAAI;IACpC,CAAC,CAAC,CAAC;EACL;AACF,CAAC;;AAED;AACA,OAAO,MAAMoD,WAAW,GAAG,MAAOzB,MAAM,IAAK;EAC3C,MAAM0B,WAAW,GAAGvD,UAAU,CAAC6B,MAAM,CAAC;EACtC,IAAI,CAAC0B,WAAW,EAAE;IAChB,MAAM,IAAI5C,KAAK,CAAC,mBAAmBkB,MAAM,EAAE,CAAC;EAC9C;EAEA,OAAO,MAAMD,oBAAoB,CAAC2B,WAAW,CAAC;AAChD,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG;EAChC,SAAS,EAAE,uCAAuC;EAClD,SAAS,EAAE,0CAA0C;EACrD,SAAS,EAAE,0CAA0C;EACrD,SAAS,EAAE,0CAA0C;EACrD,SAAS,EAAE,0CAA0C;EACrD,SAAS,EAAE,0CAA0C;EACrD,SAAS,EAAE,0CAA0C;EACrD,SAAS,EAAE,0CAA0C;EACrD,SAAS,EAAE,0CAA0C;EACrD,SAAS,EAAE,0CAA0C;EACrD,SAAS,EAAE,0CAA0C;EACrD,SAAS,EAAE,0CAA0C;EACrD,SAAS,EAAE,0CAA0C;EACrD,SAAS,EAAE,0CAA0C;EACrD,SAAS,EAAE;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7C,IAAI;IACF5C,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;;IAE9C;IACA,MAAM4C,QAAQ,GAAG,OAAO;IACxB,MAAMC,KAAK,GAAG,qDAAqDD,QAAQ,uBAAuB;;IAElG;IACA,MAAME,WAAW,GAAG,OAAO;IAC3B,MAAMC,QAAQ,GAAG,qDAAqDD,WAAW,uBAAuB;IAExG/C,OAAO,CAACC,GAAG,CAAC,cAAc6C,KAAK,EAAE,CAAC;IAClC9C,OAAO,CAACC,GAAG,CAAC,iBAAiB+C,QAAQ,EAAE,CAAC;;IAExC;IACA,IAAI;MACFhD,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACnC,MAAMgD,UAAU,GAAG,MAAM7C,KAAK,CAAC0C,KAAK,EAAE;QACpCzC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,QAAQ,EAAE,kBAAkB;UAC5B,YAAY,EAAE;QAChB;MACF,CAAC,CAAC;MAEFN,OAAO,CAACC,GAAG,CAAC,0BAA0BgD,UAAU,CAACzC,MAAM,EAAE,CAAC;MAC1DR,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEyB,MAAM,CAACwB,WAAW,CAACD,UAAU,CAAC3C,OAAO,CAACqB,OAAO,CAAC,CAAC,CAAC,CAAC;MAExF,IAAIsB,UAAU,CAAC1C,EAAE,EAAE;QACjB,MAAM4C,MAAM,GAAG,MAAMF,UAAU,CAACvC,IAAI,CAAC,CAAC;QACtCV,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEyB,MAAM,CAACY,IAAI,CAACa,MAAM,CAAC,CAAC;QAEpD,IAAIA,MAAM,IAAIA,MAAM,CAACxC,KAAK,IAAIwC,MAAM,CAACxC,KAAK,CAACC,MAAM,IAAIuC,MAAM,CAACxC,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE;UAC3E,MAAMwC,MAAM,GAAGD,MAAM,CAACxC,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACK,IAAI;UAC1CjB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEmD,MAAM,CAAC;UACvCpD,OAAO,CAACC,GAAG,CAAC,4BAA4BmD,MAAM,CAAClC,kBAAkB,EAAE,CAAC;QACtE;MACF;IACF,CAAC,CAAC,OAAOmC,OAAO,EAAE;MAChBrD,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEoD,OAAO,CAACvC,OAAO,CAAC;IAClD;;IAEA;IACA,IAAI;MACFd,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtC,MAAMqD,aAAa,GAAG,MAAMlD,KAAK,CAAC4C,QAAQ,EAAE;QAC1C3C,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,QAAQ,EAAE,kBAAkB;UAC5B,YAAY,EAAE;QAChB;MACF,CAAC,CAAC;MAEFN,OAAO,CAACC,GAAG,CAAC,6BAA6BqD,aAAa,CAAC9C,MAAM,EAAE,CAAC;MAChER,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEyB,MAAM,CAACwB,WAAW,CAACI,aAAa,CAAChD,OAAO,CAACqB,OAAO,CAAC,CAAC,CAAC,CAAC;MAE9F,IAAI2B,aAAa,CAAC/C,EAAE,EAAE;QACpB,MAAMgD,SAAS,GAAG,MAAMD,aAAa,CAAC5C,IAAI,CAAC,CAAC;QAC5CV,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEyB,MAAM,CAACY,IAAI,CAACiB,SAAS,CAAC,CAAC;QAE1D,IAAIA,SAAS,IAAIA,SAAS,CAAC5C,KAAK,IAAI4C,SAAS,CAAC5C,KAAK,CAACC,MAAM,IAAI2C,SAAS,CAAC5C,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE;UACvF,MAAM4C,SAAS,GAAGD,SAAS,CAAC5C,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACK,IAAI;UAChDjB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEuD,SAAS,CAAC;UAC7CxD,OAAO,CAACC,GAAG,CAAC,+BAA+BuD,SAAS,CAACtC,kBAAkB,EAAE,CAAC;QAC5E;MACF;IACF,CAAC,CAAC,OAAOuC,UAAU,EAAE;MACnBzD,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEwD,UAAU,CAAC3C,OAAO,CAAC;IACxD;EAEF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdb,OAAO,CAACa,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;EACnD;AACF,CAAC;;AAED;AACA,OAAO,MAAM6C,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7C,IAAI;IACF1D,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;;IAE9C;IACA,MAAM0D,UAAU,GAAG,OAAO;IAC1B,MAAMC,OAAO,GAAG,qDAAqDD,UAAU,uBAAuB;IAEtG3D,OAAO,CAACC,GAAG,CAAC,mBAAmB2D,OAAO,EAAE,CAAC;IAEzC,MAAMzD,QAAQ,GAAG,MAAMC,KAAK,CAACwD,OAAO,EAAE;MACpCvD,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,QAAQ,EAAE,kBAAkB;QAC5B,YAAY,EAAE;MAChB;IACF,CAAC,CAAC;IAEFN,OAAO,CAACC,GAAG,CAAC,uBAAuBE,QAAQ,CAACK,MAAM,EAAE,CAAC;IACrDR,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEyB,MAAM,CAACwB,WAAW,CAAC/C,QAAQ,CAACG,OAAO,CAACqB,OAAO,CAAC,CAAC,CAAC,CAAC;IAEnF,IAAI,CAACxB,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIT,KAAK,CAAC,uBAAuBK,QAAQ,CAACK,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClCV,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEyB,MAAM,CAACY,IAAI,CAAC7B,IAAI,CAAC,CAAC;IAExD,IAAIA,IAAI,IAAIA,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACE,KAAK,CAACC,MAAM,IAAIH,IAAI,CAACE,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE;MACnE,MAAMA,MAAM,GAAGH,IAAI,CAACE,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC;MACnC,MAAMK,IAAI,GAAGL,MAAM,CAACK,IAAI;MACxBjB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEgB,IAAI,CAAC;MAElC,IAAIA,IAAI,CAACC,kBAAkB,EAAE;QAC3BlB,OAAO,CAACC,GAAG,CAAC,iDAAiDgB,IAAI,CAACC,kBAAkB,EAAE,CAAC;QACvF,OAAO,IAAI;MACb;IACF;IAEAlB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1C,OAAO,KAAK;EAEd,CAAC,CAAC,OAAOY,KAAK,EAAE;IACdb,OAAO,CAACa,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}