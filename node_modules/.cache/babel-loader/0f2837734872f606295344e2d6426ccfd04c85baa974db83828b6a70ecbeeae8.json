{"ast":null,"code":"import _objectSpread from\"C:/Users/\\uD64D\\uC131\\uAD00/Desktop/FBoard/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Yahoo Finance API를 사용한 주식 데이터 서비스\nconst BASE_URL='https://query1.finance.yahoo.com/v8/finance/chart';const ALPHA_VANTAGE_URL='https://www.alphavantage.co/query';// 더미 데이터 (API 문제시 사용)\nconst DUMMY_STOCK_DATA=[{symbol:'^GSPC',price:4567.89,// 현재 가격 (2024년 말 대비 하락)\nchange:56.78,changePercent:1.23,previousClose:4511.11,open:4520.00,high:4580.00,low:4510.00,volume:2345678901,currency:'USD',threeMonthReturn:8.45,ytdReturn:-22.33// 5,881.63 → 4,567.89 = -22.33%\n},{symbol:'^IXIC',price:14234.56,change:-64.32,changePercent:-0.45,previousClose:14298.88,open:14300.00,high:14350.00,low:14200.00,volume:3456789012,currency:'USD',threeMonthReturn:15.67,ytdReturn:-18.76// 2024년 말 대비 하락\n},{symbol:'^DJI',price:35678.90,change:278.45,changePercent:0.78,previousClose:35400.45,open:35450.00,high:35800.00,low:35400.00,volume:4567890123,currency:'USD',threeMonthReturn:6.78,ytdReturn:-15.43// 2024년 말 대비 하락\n},{symbol:'^VIX',price:18.45,change:-0.40,changePercent:-2.1,previousClose:18.85,open:19.00,high:19.20,low:18.30,volume:5678901234,currency:'USD',threeMonthReturn:-12.34,ytdReturn:45.67// VIX는 시장 불안시 상승하므로 양수\n},{symbol:'^KS11',price:2567.89,change:23.45,changePercent:0.92,previousClose:2544.44,open:2550.00,high:2580.00,low:2540.00,volume:6789012345,currency:'KRW',threeMonthReturn:5.43,ytdReturn:-12.34// 2024년 말 대비 하락\n},{symbol:'^KQ11',price:856.78,change:-2.92,changePercent:-0.34,previousClose:859.70,open:860.00,high:865.00,low:855.00,volume:7890123456,currency:'KRW',threeMonthReturn:3.21,ytdReturn:-18.76// 2024년 말 대비 하락\n},{symbol:'^STOXX50E',price:5338.58,change:-9.12,changePercent:-0.17,previousClose:5347.70,open:5350.00,high:5360.00,low:5330.00,volume:1234567890,currency:'EUR',threeMonthReturn:4.56,ytdReturn:-8.90},{symbol:'MXWO.SW',price:1578.49,change:-1.26,changePercent:-0.08,previousClose:1579.75,open:1580.00,high:1585.00,low:1575.00,volume:987654321,currency:'USD',threeMonthReturn:6.78,ytdReturn:-12.45},{symbol:'MXEF',price:892.34,change:5.67,changePercent:0.64,previousClose:886.67,open:887.00,high:895.00,low:885.00,volume:876543210,currency:'USD',threeMonthReturn:2.34,ytdReturn:-15.67},{symbol:'^N225',price:41820.48,change:760.85,changePercent:1.85,previousClose:41059.63,open:41100.00,high:42000.00,low:41000.00,volume:765432109,currency:'JPY',threeMonthReturn:12.34,ytdReturn:8.76},{symbol:'^HSI',price:24906.81,change:47.19,changePercent:0.19,previousClose:24859.62,open:24850.00,high:25000.00,low:24800.00,volume:654321098,currency:'HKD',threeMonthReturn:-3.45,ytdReturn:-18.90},{symbol:'^HSCE',price:8765.43,change:-23.45,changePercent:-0.27,previousClose:8788.88,open:8790.00,high:8800.00,low:8750.00,volume:543210987,currency:'HKD',threeMonthReturn:-5.67,ytdReturn:-22.34},{symbol:'000300.SS',price:3647.55,change:12.45,changePercent:0.34,previousClose:3635.10,open:3630.00,high:3650.00,low:3620.00,volume:432109876,currency:'CNY',threeMonthReturn:-2.34,ytdReturn:-25.67},{symbol:'^BSESN',price:80325.71,change:470.59,changePercent:0.59,previousClose:79855.12,open:79900.00,high:80500.00,low:79800.00,volume:321098765,currency:'INR',threeMonthReturn:8.90,ytdReturn:12.34},{symbol:'^MXX',price:58070.17,change:-192.83,changePercent:-0.33,previousClose:58263.00,open:58300.00,high:58500.00,low:58000.00,volume:210987654,currency:'MXN',threeMonthReturn:3.21,ytdReturn:-8.76}];// 더미 차트 데이터 생성\nconst generateDummyChartData=function(symbol){var _DUMMY_STOCK_DATA$fin;let range=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'1mo';const days=range==='1d'?1:range==='5d'?5:range==='1mo'?30:90;const data=[];// 2024년 12월 31일 기준 가격 설정\nconst basePrices={'^GSPC':5881.63,// S&P 500: 2024년 말 종가\n'^IXIC':17500.00,// NASDAQ: 2024년 말 종가\n'^DJI':42200.00,// DOW JONES: 2024년 말 종가\n'^VIX':12.67,// VIX: 2024년 말 종가\n'^KS11':2930.00,// KOSPI: 2024년 말 종가\n'^KQ11':1050.00,// KOSDAQ: 2024년 말 종가\n'^STOXX50E':5860.00,// Eurostoxx50: 2024년 말 종가\n'MXWO.SW':1800.00,// MSCI World: 2024년 말 종가\n'MXEF':1050.00,// MSCI Emerging Markets: 2024년 말 종가\n'^N225':38400.00,// Nikkei 225: 2024년 말 종가\n'^HSI':30700.00,// Hang Seng Index: 2024년 말 종가\n'^HSCE':11200.00,// Hang Seng China Enterprises: 2024년 말 종가\n'000300.SS':4900.00,// CSI 300: 2024년 말 종가\n'^BSESN':71500.00,// SENSEX: 2024년 말 종가\n'^MXX':63600.00// MEXBOL: 2024년 말 종가\n};const basePrice=basePrices[symbol]||100;const currentPrice=((_DUMMY_STOCK_DATA$fin=DUMMY_STOCK_DATA.find(stock=>stock.symbol===symbol))===null||_DUMMY_STOCK_DATA$fin===void 0?void 0:_DUMMY_STOCK_DATA$fin.price)||basePrice;for(let i=days-1;i>=0;i--){const date=new Date();date.setDate(date.getDate()-i);// 시간에 따른 가격 변화 (2024년 말에서 현재까지 하락 추세)\nconst timeProgress=i/(days-1);// 0 = 현재, 1 = 과거\nconst trendFactor=1+timeProgress*0.3;// 과거로 갈수록 높은 가격\n// 랜덤한 가격 변동 생성 (더 현실적인 범위)\nconst variation=(Math.random()-0.5)*0.015;// ±0.75% 변동\nconst price=basePrice*trendFactor*(1+variation);// OHLC 데이터 생성\nconst open=price*(1+(Math.random()-0.5)*0.008);const high=Math.max(open,price)*(1+Math.random()*0.005);const low=Math.min(open,price)*(1-Math.random()*0.005);const close=price;data.push({date:date.toLocaleDateString('ko-KR'),timestamp:Math.floor(date.getTime()/1000),open:Math.round(open*100)/100,high:Math.round(high*100)/100,low:Math.round(low*100)/100,close:Math.round(close*100)/100,volume:Math.floor(Math.random()*1000000)+100000});}return data;};// CORS 프록시 URL들 (여러 개 시도)\nconst CORS_PROXIES=['https://cors-anywhere.herokuapp.com/','https://api.allorigins.win/raw?url=','https://corsproxy.io/?',''// 직접 호출도 시도\n];// 프록시를 사용한 API 호출\nconst fetchWithProxy=async function(url){let proxyIndex=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;if(proxyIndex>=CORS_PROXIES.length){throw new Error('All proxy attempts failed');}try{const proxyUrl=CORS_PROXIES[proxyIndex]+url;const response=await fetch(proxyUrl,{method:'GET',headers:{'Accept':'application/json','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return response;}catch(error){console.log(\"Proxy \".concat(proxyIndex,\" failed, trying next...\"));return fetchWithProxy(url,proxyIndex+1);}};// 수익률 계산 함수\nconst calculateReturns=(currentPrice,historicalPrice)=>{if(!historicalPrice||historicalPrice<=0)return 0;return(currentPrice-historicalPrice)/historicalPrice*100;};// Alpha Vantage API를 사용한 주식 데이터 가져오기 (대체 방법)\nexport const fetchStockDataAlphaVantage=async symbol=>{try{// 무료 API 키 (실제 사용시에는 본인의 API 키를 사용해야 함)\nconst API_KEY='demo';// 실제 사용시 본인의 API 키로 교체\nconst url=\"\".concat(ALPHA_VANTAGE_URL,\"?function=GLOBAL_QUOTE&symbol=\").concat(symbol,\"&apikey=\").concat(API_KEY);const response=await fetch(url);const data=await response.json();if(data['Error Message']){throw new Error(data['Error Message']);}const quote=data['Global Quote'];if(!quote){throw new Error('No quote data available');}return{symbol:symbol,price:parseFloat(quote['05. price'])||0,change:parseFloat(quote['09. change'])||0,changePercent:parseFloat(quote['10. change percent'].replace('%',''))||0,previousClose:parseFloat(quote['08. previous close'])||0,open:parseFloat(quote['02. open'])||0,high:parseFloat(quote['03. high'])||0,low:parseFloat(quote['04. low'])||0,volume:parseInt(quote['06. volume'])||0,currency:'USD'};}catch(error){console.error('Error fetching Alpha Vantage data:',error);throw error;}};// 주식 심볼별 차트 데이터 가져오기\nexport const fetchStockChartData=async function(symbol){let range=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'1mo';let interval=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'1d';try{const url=\"\".concat(BASE_URL,\"/\").concat(symbol,\"?interval=\").concat(interval,\"&range=\").concat(range);const response=await fetchWithProxy(url);const data=await response.json();if(!data.chart||!data.chart.result||data.chart.result.length===0){throw new Error('No chart data available');}const result=data.chart.result[0];const timestamps=result.timestamp;const quotes=result.indicators.quote[0];// 데이터 정리 및 변환\nconst chartData=timestamps.map((timestamp,index)=>{const date=new Date(timestamp*1000);return{date:date.toLocaleDateString('ko-KR'),timestamp:timestamp,open:quotes.open[index]||0,high:quotes.high[index]||0,low:quotes.low[index]||0,close:quotes.close[index]||0,volume:quotes.volume[index]||0};}).filter(item=>item.close>0);// 유효한 데이터만 필터링\nreturn chartData;}catch(error){console.error('Error fetching stock data:',error);// API 실패시 더미 데이터 사용\nconsole.log('Using dummy data as fallback...');return generateDummyChartData(symbol,range);}};// 주식 실시간 가격 정보 가져오기 (수익률 포함)\nexport const fetchStockQuote=async symbol=>{try{const url=\"\".concat(BASE_URL,\"/\").concat(symbol,\"?interval=1m&range=1d\");const response=await fetchWithProxy(url);const data=await response.json();if(!data.chart||!data.chart.result||data.chart.result.length===0){throw new Error('No quote data available');}const result=data.chart.result[0];const meta=result.meta;const quotes=result.indicators.quote[0];// 가장 최근 데이터\nconst latestIndex=quotes.close.length-1;const currentPrice=meta.regularMarketPrice||quotes.close[latestIndex]||0;return{symbol:symbol,price:currentPrice,change:meta.regularMarketPrice-meta.previousClose||0,changePercent:(meta.regularMarketPrice-meta.previousClose)/meta.previousClose*100||0,previousClose:meta.previousClose||0,open:quotes.open[latestIndex]||0,high:quotes.high[latestIndex]||0,low:quotes.low[latestIndex]||0,volume:quotes.volume[latestIndex]||0,marketCap:meta.marketCap||0,currency:meta.currency||'USD'};}catch(error){console.error('Error fetching stock quote:',error);// Yahoo Finance API 실패시 Alpha Vantage 시도\ntry{console.log('Trying Alpha Vantage as fallback...');return await fetchStockDataAlphaVantage(symbol);}catch(fallbackError){console.error('Fallback API also failed:',fallbackError);// 모든 API 실패시 더미 데이터 사용\nconsole.log('Using dummy data as final fallback...');const dummyData=DUMMY_STOCK_DATA.find(stock=>stock.symbol===symbol);if(dummyData){return dummyData;}throw error;}}};// 주식 수익률 데이터 가져오기 (3개월, YTD)\nexport const fetchStockReturns=async symbol=>{try{var _threeMonthData$chart,_threeMonthData$chart2,_ytdData$chart,_ytdData$chart$result;// 3개월 데이터\nconst threeMonthUrl=\"\".concat(BASE_URL,\"/\").concat(symbol,\"?interval=1d&range=3mo\");const threeMonthResponse=await fetchWithProxy(threeMonthUrl);const threeMonthData=await threeMonthResponse.json();// YTD 데이터 (작년 12월 31일부터)\nconst currentYear=new Date().getFullYear();const lastYearEnd=new Date(currentYear-1,11,31);// 작년 12월 31일\nconst ytdDays=Math.ceil((new Date()-lastYearEnd)/(1000*60*60*24));const ytdUrl=\"\".concat(BASE_URL,\"/\").concat(symbol,\"?interval=1d&range=\").concat(ytdDays,\"d\");const ytdResponse=await fetchWithProxy(ytdUrl);const ytdData=await ytdResponse.json();if(!((_threeMonthData$chart=threeMonthData.chart)!==null&&_threeMonthData$chart!==void 0&&(_threeMonthData$chart2=_threeMonthData$chart.result)!==null&&_threeMonthData$chart2!==void 0&&_threeMonthData$chart2[0])||!((_ytdData$chart=ytdData.chart)!==null&&_ytdData$chart!==void 0&&(_ytdData$chart$result=_ytdData$chart.result)!==null&&_ytdData$chart$result!==void 0&&_ytdData$chart$result[0])){throw new Error('No return data available');}const threeMonthResult=threeMonthData.chart.result[0];const ytdResult=ytdData.chart.result[0];const threeMonthQuotes=threeMonthResult.indicators.quote[0];const ytdQuotes=ytdResult.indicators.quote[0];// 3개월 전 가격 (90일 전)\nconst threeMonthPrice=threeMonthQuotes.close[0]||0;// YTD 시작 가격 (작년 12월 31일)\nconst ytdPrice=ytdQuotes.close[0]||0;// 현재 가격\nconst currentPrice=threeMonthQuotes.close[threeMonthQuotes.close.length-1]||0;return{threeMonthReturn:calculateReturns(currentPrice,threeMonthPrice),ytdReturn:calculateReturns(currentPrice,ytdPrice)};}catch(error){console.error('Error fetching stock returns:',error);// API 실패시 더미 데이터 사용\nconst dummyData=DUMMY_STOCK_DATA.find(stock=>stock.symbol===symbol);if(dummyData){return{threeMonthReturn:dummyData.threeMonthReturn,ytdReturn:dummyData.ytdReturn};}return{threeMonthReturn:0,ytdReturn:0};}};// 여러 주식 심볼의 실시간 데이터 가져오기 (수익률 포함)\nexport const fetchMultipleStockQuotes=async symbols=>{try{const promises=symbols.map(async symbol=>{try{const[quoteData,returnsData]=await Promise.all([fetchStockQuote(symbol),fetchStockReturns(symbol)]);return _objectSpread(_objectSpread({},quoteData),returnsData);}catch(error){console.error(\"Failed to fetch \".concat(symbol,\":\"),error);// API 실패시 더미 데이터 사용\nconst dummyData=DUMMY_STOCK_DATA.find(stock=>stock.symbol===symbol);if(dummyData){console.log(\"Using dummy data for \".concat(symbol));return dummyData;}return{symbol:symbol,error:true,message:error.message};}});const results=await Promise.all(promises);return results;}catch(error){console.error('Error fetching multiple stock quotes:',error);// 전체 실패시 더미 데이터 반환\nconsole.log('All APIs failed, using dummy data...');return DUMMY_STOCK_DATA;}};// Yahoo Finance API 테스트 함수\nexport const testYahooFinanceStockAPI=async()=>{try{console.log('🧪 Testing Yahoo Finance Stock API...');// 간단한 테스트: S&P 500 데이터 가져오기\nconst testSymbol='^GSPC';const testUrl=\"\".concat(BASE_URL,\"/\").concat(testSymbol,\"?interval=1d&range=1d\");console.log(\"\\uD83D\\uDD17 Testing URL: \".concat(testUrl));// 방법 1: 직접 호출\ntry{const response=await fetch(testUrl,{method:'GET',headers:{'Accept':'application/json','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}});console.log(\"\\uD83D\\uDCCA Direct response status: \".concat(response.status));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();console.log(\"\\uD83D\\uDCCA Direct response data keys:\",Object.keys(data));if(data&&data.chart&&data.chart.result&&data.chart.result[0]){const result=data.chart.result[0];const meta=result.meta;console.log(\"\\uD83D\\uDCCA Meta data:\",meta);if(meta.regularMarketPrice){console.log(\"\\u2705 Yahoo Finance Stock API test successful! S&P 500: \".concat(meta.regularMarketPrice));return{success:true,method:'Direct',price:meta.regularMarketPrice};}}}catch(directError){console.log(\"\\u274C Direct API call failed:\",directError.message);}// 방법 2: 프록시를 통한 호출\ntry{const proxyUrl=\"https://api.allorigins.win/raw?url=\".concat(encodeURIComponent(testUrl));const response=await fetch(proxyUrl);console.log(\"\\uD83D\\uDCCA Proxy response status: \".concat(response.status));if(!response.ok){throw new Error(\"Proxy HTTP error! status: \".concat(response.status));}const data=await response.json();console.log(\"\\uD83D\\uDCCA Proxy response data keys:\",Object.keys(data));if(data&&data.chart&&data.chart.result&&data.chart.result[0]){const result=data.chart.result[0];const meta=result.meta;console.log(\"\\uD83D\\uDCCA Proxy meta data:\",meta);if(meta.regularMarketPrice){console.log(\"\\u2705 Yahoo Finance Stock API test successful via proxy! S&P 500: \".concat(meta.regularMarketPrice));return{success:true,method:'Proxy',price:meta.regularMarketPrice};}}}catch(proxyError){console.log(\"\\u274C Proxy API call failed:\",proxyError.message);}console.log(\"\\u274C All methods failed for stock API test\");return{success:false,method:'None',price:null};}catch(error){console.error(\"\\u274C Yahoo Finance Stock API test failed:\",error);return{success:false,method:'Error',price:null};}};// 인기 주식 심볼들\nexport const POPULAR_STOCKS=['^GSPC',// S&P 500\n'^IXIC',// NASDAQ\n'^DJI',// DOW JONES\n'^VIX',// VIX\n'^KS11',// KOSPI\n'^KQ11',// KOSDAQ\n'^STOXX50E',// Eurostoxx50\n'MXWO.SW',// MSCI World\n'MXEF',// MSCI Emerging Markets\n'^N225',// Nikkei 225\n'^HSI',// Hang Seng Index\n'^HSCE',// Hang Seng China Enterprises\n'000300.SS',// CSI 300\n'^BSESN',// SENSEX\n'^MXX'// MEXBOL\n];","map":{"version":3,"names":["BASE_URL","ALPHA_VANTAGE_URL","DUMMY_STOCK_DATA","symbol","price","change","changePercent","previousClose","open","high","low","volume","currency","threeMonthReturn","ytdReturn","generateDummyChartData","_DUMMY_STOCK_DATA$fin","range","arguments","length","undefined","days","data","basePrices","basePrice","currentPrice","find","stock","i","date","Date","setDate","getDate","timeProgress","trendFactor","variation","Math","random","max","min","close","push","toLocaleDateString","timestamp","floor","getTime","round","CORS_PROXIES","fetchWithProxy","url","proxyIndex","Error","proxyUrl","response","fetch","method","headers","ok","concat","status","error","console","log","calculateReturns","historicalPrice","fetchStockDataAlphaVantage","API_KEY","json","quote","parseFloat","replace","parseInt","fetchStockChartData","interval","chart","result","timestamps","quotes","indicators","chartData","map","index","filter","item","fetchStockQuote","meta","latestIndex","regularMarketPrice","marketCap","fallbackError","dummyData","fetchStockReturns","_threeMonthData$chart","_threeMonthData$chart2","_ytdData$chart","_ytdData$chart$result","threeMonthUrl","threeMonthResponse","threeMonthData","currentYear","getFullYear","lastYearEnd","ytdDays","ceil","ytdUrl","ytdResponse","ytdData","threeMonthResult","ytdResult","threeMonthQuotes","ytdQuotes","threeMonthPrice","ytdPrice","fetchMultipleStockQuotes","symbols","promises","quoteData","returnsData","Promise","all","_objectSpread","message","results","testYahooFinanceStockAPI","testSymbol","testUrl","Object","keys","success","directError","encodeURIComponent","proxyError","POPULAR_STOCKS"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/stockApi.js"],"sourcesContent":["// Yahoo Finance API를 사용한 주식 데이터 서비스\r\nconst BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\r\nconst ALPHA_VANTAGE_URL = 'https://www.alphavantage.co/query';\r\n\r\n// 더미 데이터 (API 문제시 사용)\r\nconst DUMMY_STOCK_DATA = [\r\n  {\r\n    symbol: '^GSPC',\r\n    price: 4567.89, // 현재 가격 (2024년 말 대비 하락)\r\n    change: 56.78,\r\n    changePercent: 1.23,\r\n    previousClose: 4511.11,\r\n    open: 4520.00,\r\n    high: 4580.00,\r\n    low: 4510.00,\r\n    volume: 2345678901,\r\n    currency: 'USD',\r\n    threeMonthReturn: 8.45,\r\n    ytdReturn: -22.33 // 5,881.63 → 4,567.89 = -22.33%\r\n  },\r\n  {\r\n    symbol: '^IXIC',\r\n    price: 14234.56,\r\n    change: -64.32,\r\n    changePercent: -0.45,\r\n    previousClose: 14298.88,\r\n    open: 14300.00,\r\n    high: 14350.00,\r\n    low: 14200.00,\r\n    volume: 3456789012,\r\n    currency: 'USD',\r\n    threeMonthReturn: 15.67,\r\n    ytdReturn: -18.76 // 2024년 말 대비 하락\r\n  },\r\n  {\r\n    symbol: '^DJI',\r\n    price: 35678.90,\r\n    change: 278.45,\r\n    changePercent: 0.78,\r\n    previousClose: 35400.45,\r\n    open: 35450.00,\r\n    high: 35800.00,\r\n    low: 35400.00,\r\n    volume: 4567890123,\r\n    currency: 'USD',\r\n    threeMonthReturn: 6.78,\r\n    ytdReturn: -15.43 // 2024년 말 대비 하락\r\n  },\r\n  {\r\n    symbol: '^VIX',\r\n    price: 18.45,\r\n    change: -0.40,\r\n    changePercent: -2.1,\r\n    previousClose: 18.85,\r\n    open: 19.00,\r\n    high: 19.20,\r\n    low: 18.30,\r\n    volume: 5678901234,\r\n    currency: 'USD',\r\n    threeMonthReturn: -12.34,\r\n    ytdReturn: 45.67 // VIX는 시장 불안시 상승하므로 양수\r\n  },\r\n  {\r\n    symbol: '^KS11',\r\n    price: 2567.89,\r\n    change: 23.45,\r\n    changePercent: 0.92,\r\n    previousClose: 2544.44,\r\n    open: 2550.00,\r\n    high: 2580.00,\r\n    low: 2540.00,\r\n    volume: 6789012345,\r\n    currency: 'KRW',\r\n    threeMonthReturn: 5.43,\r\n    ytdReturn: -12.34 // 2024년 말 대비 하락\r\n  },\r\n  {\r\n    symbol: '^KQ11',\r\n    price: 856.78,\r\n    change: -2.92,\r\n    changePercent: -0.34,\r\n    previousClose: 859.70,\r\n    open: 860.00,\r\n    high: 865.00,\r\n    low: 855.00,\r\n    volume: 7890123456,\r\n    currency: 'KRW',\r\n    threeMonthReturn: 3.21,\r\n    ytdReturn: -18.76 // 2024년 말 대비 하락\r\n  },\r\n  {\r\n    symbol: '^STOXX50E',\r\n    price: 5338.58,\r\n    change: -9.12,\r\n    changePercent: -0.17,\r\n    previousClose: 5347.70,\r\n    open: 5350.00,\r\n    high: 5360.00,\r\n    low: 5330.00,\r\n    volume: 1234567890,\r\n    currency: 'EUR',\r\n    threeMonthReturn: 4.56,\r\n    ytdReturn: -8.90\r\n  },\r\n  {\r\n    symbol: 'MXWO.SW',\r\n    price: 1578.49,\r\n    change: -1.26,\r\n    changePercent: -0.08,\r\n    previousClose: 1579.75,\r\n    open: 1580.00,\r\n    high: 1585.00,\r\n    low: 1575.00,\r\n    volume: 987654321,\r\n    currency: 'USD',\r\n    threeMonthReturn: 6.78,\r\n    ytdReturn: -12.45\r\n  },\r\n  {\r\n    symbol: 'MXEF',\r\n    price: 892.34,\r\n    change: 5.67,\r\n    changePercent: 0.64,\r\n    previousClose: 886.67,\r\n    open: 887.00,\r\n    high: 895.00,\r\n    low: 885.00,\r\n    volume: 876543210,\r\n    currency: 'USD',\r\n    threeMonthReturn: 2.34,\r\n    ytdReturn: -15.67\r\n  },\r\n  {\r\n    symbol: '^N225',\r\n    price: 41820.48,\r\n    change: 760.85,\r\n    changePercent: 1.85,\r\n    previousClose: 41059.63,\r\n    open: 41100.00,\r\n    high: 42000.00,\r\n    low: 41000.00,\r\n    volume: 765432109,\r\n    currency: 'JPY',\r\n    threeMonthReturn: 12.34,\r\n    ytdReturn: 8.76\r\n  },\r\n  {\r\n    symbol: '^HSI',\r\n    price: 24906.81,\r\n    change: 47.19,\r\n    changePercent: 0.19,\r\n    previousClose: 24859.62,\r\n    open: 24850.00,\r\n    high: 25000.00,\r\n    low: 24800.00,\r\n    volume: 654321098,\r\n    currency: 'HKD',\r\n    threeMonthReturn: -3.45,\r\n    ytdReturn: -18.90\r\n  },\r\n  {\r\n    symbol: '^HSCE',\r\n    price: 8765.43,\r\n    change: -23.45,\r\n    changePercent: -0.27,\r\n    previousClose: 8788.88,\r\n    open: 8790.00,\r\n    high: 8800.00,\r\n    low: 8750.00,\r\n    volume: 543210987,\r\n    currency: 'HKD',\r\n    threeMonthReturn: -5.67,\r\n    ytdReturn: -22.34\r\n  },\r\n  {\r\n    symbol: '000300.SS',\r\n    price: 3647.55,\r\n    change: 12.45,\r\n    changePercent: 0.34,\r\n    previousClose: 3635.10,\r\n    open: 3630.00,\r\n    high: 3650.00,\r\n    low: 3620.00,\r\n    volume: 432109876,\r\n    currency: 'CNY',\r\n    threeMonthReturn: -2.34,\r\n    ytdReturn: -25.67\r\n  },\r\n  {\r\n    symbol: '^BSESN',\r\n    price: 80325.71,\r\n    change: 470.59,\r\n    changePercent: 0.59,\r\n    previousClose: 79855.12,\r\n    open: 79900.00,\r\n    high: 80500.00,\r\n    low: 79800.00,\r\n    volume: 321098765,\r\n    currency: 'INR',\r\n    threeMonthReturn: 8.90,\r\n    ytdReturn: 12.34\r\n  },\r\n  {\r\n    symbol: '^MXX',\r\n    price: 58070.17,\r\n    change: -192.83,\r\n    changePercent: -0.33,\r\n    previousClose: 58263.00,\r\n    open: 58300.00,\r\n    high: 58500.00,\r\n    low: 58000.00,\r\n    volume: 210987654,\r\n    currency: 'MXN',\r\n    threeMonthReturn: 3.21,\r\n    ytdReturn: -8.76\r\n  }\r\n];\r\n\r\n// 더미 차트 데이터 생성\r\nconst generateDummyChartData = (symbol, range = '1mo') => {\r\n  const days = range === '1d' ? 1 : range === '5d' ? 5 : range === '1mo' ? 30 : 90;\r\n  const data = [];\r\n  \r\n  // 2024년 12월 31일 기준 가격 설정\r\n  const basePrices = {\r\n    '^GSPC': 5881.63,    // S&P 500: 2024년 말 종가\r\n    '^IXIC': 17500.00,   // NASDAQ: 2024년 말 종가\r\n    '^DJI': 42200.00,    // DOW JONES: 2024년 말 종가\r\n    '^VIX': 12.67,       // VIX: 2024년 말 종가\r\n    '^KS11': 2930.00,    // KOSPI: 2024년 말 종가\r\n    '^KQ11': 1050.00,    // KOSDAQ: 2024년 말 종가\r\n    '^STOXX50E': 5860.00, // Eurostoxx50: 2024년 말 종가\r\n    'MXWO.SW': 1800.00,  // MSCI World: 2024년 말 종가\r\n    'MXEF': 1050.00,     // MSCI Emerging Markets: 2024년 말 종가\r\n    '^N225': 38400.00,   // Nikkei 225: 2024년 말 종가\r\n    '^HSI': 30700.00,    // Hang Seng Index: 2024년 말 종가\r\n    '^HSCE': 11200.00,   // Hang Seng China Enterprises: 2024년 말 종가\r\n    '000300.SS': 4900.00, // CSI 300: 2024년 말 종가\r\n    '^BSESN': 71500.00,  // SENSEX: 2024년 말 종가\r\n    '^MXX': 63600.00     // MEXBOL: 2024년 말 종가\r\n  };\r\n  \r\n  const basePrice = basePrices[symbol] || 100;\r\n  const currentPrice = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol)?.price || basePrice;\r\n  \r\n  for (let i = days - 1; i >= 0; i--) {\r\n    const date = new Date();\r\n    date.setDate(date.getDate() - i);\r\n    \r\n    // 시간에 따른 가격 변화 (2024년 말에서 현재까지 하락 추세)\r\n    const timeProgress = i / (days - 1); // 0 = 현재, 1 = 과거\r\n    const trendFactor = 1 + (timeProgress * 0.3); // 과거로 갈수록 높은 가격\r\n    \r\n    // 랜덤한 가격 변동 생성 (더 현실적인 범위)\r\n    const variation = (Math.random() - 0.5) * 0.015; // ±0.75% 변동\r\n    const price = basePrice * trendFactor * (1 + variation);\r\n    \r\n    // OHLC 데이터 생성\r\n    const open = price * (1 + (Math.random() - 0.5) * 0.008);\r\n    const high = Math.max(open, price) * (1 + Math.random() * 0.005);\r\n    const low = Math.min(open, price) * (1 - Math.random() * 0.005);\r\n    const close = price;\r\n    \r\n    data.push({\r\n      date: date.toLocaleDateString('ko-KR'),\r\n      timestamp: Math.floor(date.getTime() / 1000),\r\n      open: Math.round(open * 100) / 100,\r\n      high: Math.round(high * 100) / 100,\r\n      low: Math.round(low * 100) / 100,\r\n      close: Math.round(close * 100) / 100,\r\n      volume: Math.floor(Math.random() * 1000000) + 100000\r\n    });\r\n  }\r\n  \r\n  return data;\r\n};\r\n\r\n// CORS 프록시 URL들 (여러 개 시도)\r\nconst CORS_PROXIES = [\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://corsproxy.io/?',\r\n  '' // 직접 호출도 시도\r\n];\r\n\r\n// 프록시를 사용한 API 호출\r\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\r\n  if (proxyIndex >= CORS_PROXIES.length) {\r\n    throw new Error('All proxy attempts failed');\r\n  }\r\n\r\n  try {\r\n    const proxyUrl = CORS_PROXIES[proxyIndex] + url;\r\n    const response = await fetch(proxyUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.log(`Proxy ${proxyIndex} failed, trying next...`);\r\n    return fetchWithProxy(url, proxyIndex + 1);\r\n  }\r\n};\r\n\r\n// 수익률 계산 함수\r\nconst calculateReturns = (currentPrice, historicalPrice) => {\r\n  if (!historicalPrice || historicalPrice <= 0) return 0;\r\n  return ((currentPrice - historicalPrice) / historicalPrice) * 100;\r\n};\r\n\r\n// Alpha Vantage API를 사용한 주식 데이터 가져오기 (대체 방법)\r\nexport const fetchStockDataAlphaVantage = async (symbol) => {\r\n  try {\r\n    // 무료 API 키 (실제 사용시에는 본인의 API 키를 사용해야 함)\r\n    const API_KEY = 'demo'; // 실제 사용시 본인의 API 키로 교체\r\n    const url = `${ALPHA_VANTAGE_URL}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${API_KEY}`;\r\n    \r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    \r\n    if (data['Error Message']) {\r\n      throw new Error(data['Error Message']);\r\n    }\r\n    \r\n    const quote = data['Global Quote'];\r\n    if (!quote) {\r\n      throw new Error('No quote data available');\r\n    }\r\n    \r\n    return {\r\n      symbol: symbol,\r\n      price: parseFloat(quote['05. price']) || 0,\r\n      change: parseFloat(quote['09. change']) || 0,\r\n      changePercent: parseFloat(quote['10. change percent'].replace('%', '')) || 0,\r\n      previousClose: parseFloat(quote['08. previous close']) || 0,\r\n      open: parseFloat(quote['02. open']) || 0,\r\n      high: parseFloat(quote['03. high']) || 0,\r\n      low: parseFloat(quote['04. low']) || 0,\r\n      volume: parseInt(quote['06. volume']) || 0,\r\n      currency: 'USD'\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching Alpha Vantage data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 주식 심볼별 차트 데이터 가져오기\r\nexport const fetchStockChartData = async (symbol, range = '1mo', interval = '1d') => {\r\n  try {\r\n    const url = `${BASE_URL}/${symbol}?interval=${interval}&range=${range}`;\r\n    const response = await fetchWithProxy(url);\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\r\n      throw new Error('No chart data available');\r\n    }\r\n    \r\n    const result = data.chart.result[0];\r\n    const timestamps = result.timestamp;\r\n    const quotes = result.indicators.quote[0];\r\n    \r\n    // 데이터 정리 및 변환\r\n    const chartData = timestamps.map((timestamp, index) => {\r\n      const date = new Date(timestamp * 1000);\r\n      return {\r\n        date: date.toLocaleDateString('ko-KR'),\r\n        timestamp: timestamp,\r\n        open: quotes.open[index] || 0,\r\n        high: quotes.high[index] || 0,\r\n        low: quotes.low[index] || 0,\r\n        close: quotes.close[index] || 0,\r\n        volume: quotes.volume[index] || 0\r\n      };\r\n    }).filter(item => item.close > 0); // 유효한 데이터만 필터링\r\n    \r\n    return chartData;\r\n  } catch (error) {\r\n    console.error('Error fetching stock data:', error);\r\n    // API 실패시 더미 데이터 사용\r\n    console.log('Using dummy data as fallback...');\r\n    return generateDummyChartData(symbol, range);\r\n  }\r\n};\r\n\r\n// 주식 실시간 가격 정보 가져오기 (수익률 포함)\r\nexport const fetchStockQuote = async (symbol) => {\r\n  try {\r\n    const url = `${BASE_URL}/${symbol}?interval=1m&range=1d`;\r\n    const response = await fetchWithProxy(url);\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\r\n      throw new Error('No quote data available');\r\n    }\r\n    \r\n    const result = data.chart.result[0];\r\n    const meta = result.meta;\r\n    const quotes = result.indicators.quote[0];\r\n    \r\n    // 가장 최근 데이터\r\n    const latestIndex = quotes.close.length - 1;\r\n    const currentPrice = meta.regularMarketPrice || quotes.close[latestIndex] || 0;\r\n    \r\n    return {\r\n      symbol: symbol,\r\n      price: currentPrice,\r\n      change: meta.regularMarketPrice - meta.previousClose || 0,\r\n      changePercent: ((meta.regularMarketPrice - meta.previousClose) / meta.previousClose * 100) || 0,\r\n      previousClose: meta.previousClose || 0,\r\n      open: quotes.open[latestIndex] || 0,\r\n      high: quotes.high[latestIndex] || 0,\r\n      low: quotes.low[latestIndex] || 0,\r\n      volume: quotes.volume[latestIndex] || 0,\r\n      marketCap: meta.marketCap || 0,\r\n      currency: meta.currency || 'USD'\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching stock quote:', error);\r\n    // Yahoo Finance API 실패시 Alpha Vantage 시도\r\n    try {\r\n      console.log('Trying Alpha Vantage as fallback...');\r\n      return await fetchStockDataAlphaVantage(symbol);\r\n    } catch (fallbackError) {\r\n      console.error('Fallback API also failed:', fallbackError);\r\n      // 모든 API 실패시 더미 데이터 사용\r\n      console.log('Using dummy data as final fallback...');\r\n      const dummyData = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol);\r\n      if (dummyData) {\r\n        return dummyData;\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// 주식 수익률 데이터 가져오기 (3개월, YTD)\r\nexport const fetchStockReturns = async (symbol) => {\r\n  try {\r\n    // 3개월 데이터\r\n    const threeMonthUrl = `${BASE_URL}/${symbol}?interval=1d&range=3mo`;\r\n    const threeMonthResponse = await fetchWithProxy(threeMonthUrl);\r\n    const threeMonthData = await threeMonthResponse.json();\r\n    \r\n    // YTD 데이터 (작년 12월 31일부터)\r\n    const currentYear = new Date().getFullYear();\r\n    const lastYearEnd = new Date(currentYear - 1, 11, 31); // 작년 12월 31일\r\n    const ytdDays = Math.ceil((new Date() - lastYearEnd) / (1000 * 60 * 60 * 24));\r\n    const ytdUrl = `${BASE_URL}/${symbol}?interval=1d&range=${ytdDays}d`;\r\n    const ytdResponse = await fetchWithProxy(ytdUrl);\r\n    const ytdData = await ytdResponse.json();\r\n    \r\n    if (!threeMonthData.chart?.result?.[0] || !ytdData.chart?.result?.[0]) {\r\n      throw new Error('No return data available');\r\n    }\r\n    \r\n    const threeMonthResult = threeMonthData.chart.result[0];\r\n    const ytdResult = ytdData.chart.result[0];\r\n    \r\n    const threeMonthQuotes = threeMonthResult.indicators.quote[0];\r\n    const ytdQuotes = ytdResult.indicators.quote[0];\r\n    \r\n    // 3개월 전 가격 (90일 전)\r\n    const threeMonthPrice = threeMonthQuotes.close[0] || 0;\r\n    \r\n    // YTD 시작 가격 (작년 12월 31일)\r\n    const ytdPrice = ytdQuotes.close[0] || 0;\r\n    \r\n    // 현재 가격\r\n    const currentPrice = threeMonthQuotes.close[threeMonthQuotes.close.length - 1] || 0;\r\n    \r\n    return {\r\n      threeMonthReturn: calculateReturns(currentPrice, threeMonthPrice),\r\n      ytdReturn: calculateReturns(currentPrice, ytdPrice)\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching stock returns:', error);\r\n    // API 실패시 더미 데이터 사용\r\n    const dummyData = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol);\r\n    if (dummyData) {\r\n      return {\r\n        threeMonthReturn: dummyData.threeMonthReturn,\r\n        ytdReturn: dummyData.ytdReturn\r\n      };\r\n    }\r\n    return { threeMonthReturn: 0, ytdReturn: 0 };\r\n  }\r\n};\r\n\r\n// 여러 주식 심볼의 실시간 데이터 가져오기 (수익률 포함)\r\nexport const fetchMultipleStockQuotes = async (symbols) => {\r\n  try {\r\n    const promises = symbols.map(async (symbol) => {\r\n      try {\r\n        const [quoteData, returnsData] = await Promise.all([\r\n          fetchStockQuote(symbol),\r\n          fetchStockReturns(symbol)\r\n        ]);\r\n        \r\n        return {\r\n          ...quoteData,\r\n          ...returnsData\r\n        };\r\n      } catch (error) {\r\n        console.error(`Failed to fetch ${symbol}:`, error);\r\n        // API 실패시 더미 데이터 사용\r\n        const dummyData = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol);\r\n        if (dummyData) {\r\n          console.log(`Using dummy data for ${symbol}`);\r\n          return dummyData;\r\n        }\r\n        return {\r\n          symbol: symbol,\r\n          error: true,\r\n          message: error.message\r\n        };\r\n      }\r\n    });\r\n    \r\n    const results = await Promise.all(promises);\r\n    return results;\r\n  } catch (error) {\r\n    console.error('Error fetching multiple stock quotes:', error);\r\n    // 전체 실패시 더미 데이터 반환\r\n    console.log('All APIs failed, using dummy data...');\r\n    return DUMMY_STOCK_DATA;\r\n  }\r\n};\r\n\r\n// Yahoo Finance API 테스트 함수\r\nexport const testYahooFinanceStockAPI = async () => {\r\n  try {\r\n    console.log('🧪 Testing Yahoo Finance Stock API...');\r\n    \r\n    // 간단한 테스트: S&P 500 데이터 가져오기\r\n    const testSymbol = '^GSPC';\r\n    const testUrl = `${BASE_URL}/${testSymbol}?interval=1d&range=1d`;\r\n    \r\n    console.log(`🔗 Testing URL: ${testUrl}`);\r\n    \r\n    // 방법 1: 직접 호출\r\n    try {\r\n      const response = await fetch(testUrl, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n        }\r\n      });\r\n      \r\n      console.log(`📊 Direct response status: ${response.status}`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log(`📊 Direct response data keys:`, Object.keys(data));\r\n      \r\n      if (data && data.chart && data.chart.result && data.chart.result[0]) {\r\n        const result = data.chart.result[0];\r\n        const meta = result.meta;\r\n        console.log(`📊 Meta data:`, meta);\r\n        \r\n        if (meta.regularMarketPrice) {\r\n          console.log(`✅ Yahoo Finance Stock API test successful! S&P 500: ${meta.regularMarketPrice}`);\r\n          return { success: true, method: 'Direct', price: meta.regularMarketPrice };\r\n        }\r\n      }\r\n    } catch (directError) {\r\n      console.log(`❌ Direct API call failed:`, directError.message);\r\n    }\r\n    \r\n    // 방법 2: 프록시를 통한 호출\r\n    try {\r\n      const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(testUrl)}`;\r\n      \r\n      const response = await fetch(proxyUrl);\r\n      console.log(`📊 Proxy response status: ${response.status}`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Proxy HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log(`📊 Proxy response data keys:`, Object.keys(data));\r\n      \r\n      if (data && data.chart && data.chart.result && data.chart.result[0]) {\r\n        const result = data.chart.result[0];\r\n        const meta = result.meta;\r\n        console.log(`📊 Proxy meta data:`, meta);\r\n        \r\n        if (meta.regularMarketPrice) {\r\n          console.log(`✅ Yahoo Finance Stock API test successful via proxy! S&P 500: ${meta.regularMarketPrice}`);\r\n          return { success: true, method: 'Proxy', price: meta.regularMarketPrice };\r\n        }\r\n      }\r\n    } catch (proxyError) {\r\n      console.log(`❌ Proxy API call failed:`, proxyError.message);\r\n    }\r\n    \r\n    console.log(`❌ All methods failed for stock API test`);\r\n    return { success: false, method: 'None', price: null };\r\n    \r\n  } catch (error) {\r\n    console.error(`❌ Yahoo Finance Stock API test failed:`, error);\r\n    return { success: false, method: 'Error', price: null };\r\n  }\r\n};\r\n\r\n// 인기 주식 심볼들\r\nexport const POPULAR_STOCKS = [\r\n  '^GSPC',    // S&P 500\r\n  '^IXIC',    // NASDAQ\r\n  '^DJI',     // DOW JONES\r\n  '^VIX',     // VIX\r\n  '^KS11',    // KOSPI\r\n  '^KQ11',    // KOSDAQ\r\n  '^STOXX50E', // Eurostoxx50\r\n  'MXWO.SW',  // MSCI World\r\n  'MXEF',     // MSCI Emerging Markets\r\n  '^N225',    // Nikkei 225\r\n  '^HSI',     // Hang Seng Index\r\n  '^HSCE',    // Hang Seng China Enterprises\r\n  '000300.SS', // CSI 300\r\n  '^BSESN',   // SENSEX\r\n  '^MXX'      // MEXBOL\r\n]; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}