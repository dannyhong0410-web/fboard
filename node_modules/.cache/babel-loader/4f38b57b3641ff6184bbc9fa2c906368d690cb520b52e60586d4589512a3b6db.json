{"ast":null,"code":"// Trading Economics 웹사이트에서 최신 데이터를 가져오는 Fixed Income 서비스\nconst BASE_URL = 'https://tradingeconomics.com';\n\n// 프록시 서버들을 사용한 웹 스크래핑\nconst PROXY_SERVICES = ['https://api.allorigins.win/raw?url=', 'https://corsproxy.io/?', 'https://thingproxy.freeboard.io/fetch/', 'https://cors.bridged.cc/', 'https://api.codetabs.com/v1/proxy?quest=', 'https://cors.eu.org/', 'https://cors-anywhere.herokuapp.com/', 'https://corsproxy.io/?', 'https://api.allorigins.win/raw?url=', 'https://thingproxy.freeboard.io/fetch/', '' // 직접 호출도 시도\n];\n\n// 공개 API를 통한 실제 데이터 가져오기\nconst fetchFromPublicAPI = async () => {\n  try {\n    console.log('🌐 Trying public API for real data...');\n\n    // 방법 1: Alpha Vantage API (무료 티어)\n    try {\n      const alphaVantageUrl = 'https://www.alphavantage.co/query?function=TREASURY_YIELD&interval=daily&maturity=10year&apikey=demo';\n      const response = await fetch(alphaVantageUrl);\n      const data = await response.json();\n      if (data && data.data && data.data.length > 0) {\n        const latestYield = parseFloat(data.data[0].value);\n        console.log('✅ Alpha Vantage API successful! US 10Y yield:', latestYield + '%');\n        return {\n          us10y: latestYield,\n          source: 'Alpha Vantage'\n        };\n      }\n    } catch (error) {\n      console.log('❌ Alpha Vantage API failed:', error.message);\n    }\n\n    // 방법 2: Yahoo Finance API (간접적)\n    try {\n      const yahooUrl = 'https://query1.finance.yahoo.com/v8/finance/chart/%5ETNX?interval=1d&range=1d';\n      const response = await fetch(yahooUrl);\n      const data = await response.json();\n      if (data && data.chart && data.chart.result && data.chart.result[0]) {\n        const result = data.chart.result[0];\n        const meta = result.meta;\n        const regularMarketPrice = meta.regularMarketPrice;\n        if (regularMarketPrice) {\n          console.log('✅ Yahoo Finance API successful! US 10Y yield:', regularMarketPrice + '%');\n          return {\n            us10y: regularMarketPrice,\n            source: 'Yahoo Finance'\n          };\n        }\n      }\n    } catch (error) {\n      console.log('❌ Yahoo Finance API failed:', error.message);\n    }\n\n    // 방법 3: 간단한 JSON API\n    try {\n      const simpleUrl = 'https://api.jsonbin.io/v3/b/65c8f8c8266cfc3fde8b8c8c';\n      const response = await fetch(simpleUrl);\n      const data = await response.json();\n      if (data && data.record && data.record.us10y) {\n        const us10y = data.record.us10y;\n        console.log('✅ Simple API successful! US 10Y yield:', us10y + '%');\n        return {\n          us10y: us10y,\n          source: 'Simple API'\n        };\n      }\n    } catch (error) {\n      console.log('❌ Simple API failed:', error.message);\n    }\n    throw new Error('All public APIs failed');\n  } catch (error) {\n    console.log('❌ All public APIs failed:', error.message);\n    return null;\n  }\n};\n\n// 프록시를 사용한 웹 스크래핑\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\n  if (proxyIndex >= PROXY_SERVICES.length) {\n    throw new Error('All proxy attempts failed');\n  }\n  try {\n    const proxyUrl = PROXY_SERVICES[proxyIndex] + url;\n    console.log(`🔗 Trying proxy ${proxyIndex + 1}/${PROXY_SERVICES.length}: ${proxyUrl.substring(0, 50)}...`);\n    const response = await fetch(proxyUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n        'Accept-Language': 'en-US,en;q=0.9',\n        'Accept-Encoding': 'gzip, deflate, br',\n        'Connection': 'keep-alive',\n        'Upgrade-Insecure-Requests': '1'\n      },\n      timeout: 10000 // 10초 타임아웃\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const html = await response.text();\n    if (html.length < 1000) {\n      throw new Error('Response too short, likely an error page');\n    }\n    console.log(`✅ Proxy ${proxyIndex + 1} successful! HTML length: ${html.length} characters`);\n    return html;\n  } catch (error) {\n    console.log(`❌ Proxy ${proxyIndex + 1} failed: ${error.message}`);\n    return fetchWithProxy(url, proxyIndex + 1);\n  }\n};\n\n// HTML에서 금리 데이터 추출 (Trading Economics Calendar 테이블에서 추출)\nconst extractInterestRateFromHTML = (html, country) => {\n  try {\n    // Trading Economics Calendar 테이블에서 가장 최신의 실제 데이터 TEForcast 값 추출\n\n    // 테이블 패턴 찾기 (Calendar, GMT가 포함된 테이블)\n    const tablePattern = /<table[^>]*>.*?Calendar.*?GMT.*?<\\/table>/is;\n    const tableMatch = html.match(tablePattern);\n    if (!tableMatch) {\n      console.log(`No calendar table found for ${country}`);\n      return null;\n    }\n    const tableHTML = tableMatch[0];\n\n    // 테이블 행들 추출\n    const rowPattern = /<tr[^>]*>.*?<\\/tr>/gis;\n    const rows = tableHTML.match(rowPattern);\n    if (!rows || rows.length < 2) {\n      console.log(`No rows found in calendar table for ${country}`);\n      return null;\n    }\n\n    // 현재 날짜 가져오기\n    const currentDate = new Date();\n    const currentDateString = currentDate.toISOString().split('T')[0]; // YYYY-MM-DD 형식\n\n    console.log(`Current date: ${currentDateString}`);\n\n    // 첫 번째 행은 헤더이므로 제외하고, 두 번째 행부터 검색\n    // 가장 최신의 실제 데이터(Actual 값이 있는 행)의 TEForcast 값 찾기\n    let latestRate = null;\n    let latestDate = null;\n    for (let i = 1; i < rows.length; i++) {\n      const row = rows[i];\n\n      // TD 태그들 추출\n      const tdPattern = /<td[^>]*>(.*?)<\\/td>/gis;\n      const tds = row.match(tdPattern);\n      if (tds && tds.length >= 7) {\n        // Calendar, GMT, Reference, Actual, Previous, Consensus, TEForecast\n        // 첫 번째 TD: 날짜\n        const dateTD = tds[0];\n        // 네 번째 TD: Actual 값\n        const actualTD = tds[3];\n        // 일곱 번째 TD: TEForcast 값\n        const teForcastTD = tds[6];\n\n        // 날짜 추출 (YYYY-MM-DD 형식)\n        const datePattern = /(\\d{4}-\\d{2}-\\d{2})/;\n        const dateMatch = dateTD.match(datePattern);\n        if (dateMatch) {\n          const date = dateMatch[1];\n\n          // 날짜가 현재 날짜보다 미래인지 확인\n          if (date > currentDateString) {\n            console.log(`Skipping future date: ${date}`);\n            continue; // 미래 날짜는 건너뛰기\n          }\n\n          // Actual 값이 있는지 확인 (빈 값이 아닌지)\n          const actualPattern = /(\\d+\\.\\d+)/;\n          const actualMatch = actualTD.match(actualPattern);\n          if (actualMatch) {\n            // Actual 값이 있으면 실제 데이터로 간주\n            const teForcastPattern = /(\\d+\\.\\d+)/;\n            const teForcastMatch = teForcastTD.match(teForcastPattern);\n            if (teForcastMatch) {\n              const rate = parseFloat(teForcastMatch[1]);\n\n              // 더 최신 날짜인지 확인\n              if (!latestDate || date > latestDate) {\n                latestDate = date;\n                latestRate = rate;\n                console.log(`Found actual data: ${rate}% for date: ${date}`);\n              }\n            }\n          } else {\n            console.log(`No actual data for date: ${date}, skipping`);\n          }\n        }\n      }\n    }\n    if (latestRate) {\n      console.log(`Found latest actual rate for ${country}: ${latestRate}% (Date: ${latestDate})`);\n      return latestRate;\n    }\n\n    // 실제 데이터를 찾지 못한 경우, 모든 TD에서 숫자 찾기 (미래 제외)\n    console.log(`No actual data found for ${country}, searching all TDs (excluding future dates)...`);\n    for (let i = 1; i < rows.length; i++) {\n      const row = rows[i];\n\n      // 날짜 추출 (YYYY-MM-DD 형식)\n      const datePattern = /(\\d{4}-\\d{2}-\\d{2})/;\n      const dateMatch = row.match(datePattern);\n      if (dateMatch) {\n        const date = dateMatch[1];\n\n        // 날짜가 현재 날짜보다 미래인지 확인\n        if (date > currentDateString) {\n          continue; // 미래 날짜는 건너뛰기\n        }\n\n        // 모든 숫자.숫자 패턴 찾기\n        const numberPattern = /(\\d+\\.\\d+)/g;\n        const numberMatches = row.match(numberPattern);\n        if (numberMatches && numberMatches.length > 0) {\n          // 가장 큰 값이 보통 메인 금리\n          const rates = numberMatches.map(match => parseFloat(match));\n          const maxRate = Math.max(...rates);\n\n          // 더 최신 날짜인지 확인\n          if (!latestDate || date > latestDate) {\n            latestDate = date;\n            latestRate = maxRate;\n          }\n        }\n      }\n    }\n    if (latestRate) {\n      console.log(`Found latest rate from all TDs for ${country}: ${latestRate}% (Date: ${latestDate})`);\n      return latestRate;\n    }\n\n    // 테이블에서 찾지 못한 경우, 기존 패턴으로 백업 시도\n    console.log(`No rate found in table for ${country}, trying backup patterns...`);\n\n    // 백업: 첫 번째 문장에서 금리 추출\n    const firstSentenceMatch = html.match(/<p[^>]*>([^<]+)<\\/p>/i) || html.match(/<div[^>]*>([^<]+)<\\/div>/i) || html.match(/<span[^>]*>([^<]+)<\\/span>/i);\n    const textToSearch = firstSentenceMatch ? firstSentenceMatch[1] : html;\n    const patterns = [/(\\d+\\.\\d+)%/g, /yield.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?yield/i, /bond.*?(\\d+\\.\\d+)%/i, /(\\d+\\.\\d+)%.*?bond/i];\n    for (const pattern of patterns) {\n      const matches = textToSearch.match(pattern);\n      if (matches && matches.length > 0) {\n        const rates = matches.map(match => {\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\n        });\n        const maxRate = Math.max(...rates);\n        if (maxRate > 0) {\n          console.log(`Found rate from backup pattern for ${country}: ${maxRate}%`);\n          return maxRate;\n        }\n      }\n    }\n    console.log(`No rate found for ${country}`);\n    return null;\n  } catch (error) {\n    console.error('Error extracting data from HTML:', error);\n    return null;\n  }\n};\n\n// 실제 웹 스크래핑으로 금리 데이터 가져오기\nexport const fetchInterestRateFromWeb = async country => {\n  try {\n    const urls = {\n      '미국': 'https://tradingeconomics.com/united-states/interest-rate',\n      '한국': 'https://tradingeconomics.com/south-korea/interest-rate',\n      '일본': 'https://tradingeconomics.com/japan/interest-rate',\n      '유로': 'https://tradingeconomics.com/euro-area/interest-rate',\n      '영국': 'https://tradingeconomics.com/united-kingdom/interest-rate',\n      '한국국채': 'https://tradingeconomics.com/south-korea/government-bond-yield'\n    };\n    const url = urls[country];\n    if (!url) {\n      throw new Error(`No URL found for country: ${country}`);\n    }\n    console.log(`Fetching data for ${country} from: ${url}`);\n    const html = await fetchWithProxy(url);\n    const rate = extractInterestRateFromHTML(html, country);\n    return rate;\n  } catch (error) {\n    console.error(`Error fetching ${country} interest rate:`, error);\n    return null;\n  }\n};\n\n// 한국 국채 수익률 특별 함수\nexport const fetchKoreaBondYield = async () => {\n  try {\n    console.log('🇰🇷 Fetching Korea bond yield...');\n\n    // 방법 1: 공개 API 시도 (우선순위)\n    try {\n      console.log('🌐 Method 1: Trying public APIs...');\n      const publicData = await fetchFromPublicAPI();\n      if (publicData && publicData.us10y) {\n        // US 10Y 수익률을 기준으로 한국 국채 수익률 추정\n        // 한국 국채는 보통 US 국채보다 1-2% 높음\n        const koreaRate = publicData.us10y + 1.5;\n        console.log(`✅ Public API successful! Korea rate estimated: ${koreaRate}% (based on US 10Y: ${publicData.us10y}%)`);\n        return {\n          rate: koreaRate,\n          source: publicData.source,\n          isEstimated: true\n        };\n      }\n    } catch (apiError) {\n      console.log('❌ Public API failed:', apiError.message);\n    }\n\n    // 방법 2: Trading Economics 웹 스크래핑 (백업)\n    try {\n      const url = 'https://tradingeconomics.com/south-korea/government-bond-yield';\n      console.log('🌐 Method 2: Web scraping from Trading Economics');\n      const html = await fetchWithProxy(url);\n      const rate = extractInterestRateFromHTML(html, '한국국채');\n      if (rate) {\n        console.log(`✅ Web scraping successful! Korea bond yield: ${rate}%`);\n        return {\n          rate: rate,\n          source: 'Trading Economics',\n          isEstimated: false\n        };\n      }\n    } catch (scrapingError) {\n      console.log('❌ Web scraping failed:', scrapingError.message);\n    }\n\n    // 방법 3: 현실적인 더미 데이터 (최종 백업)\n    console.log('🌐 Method 3: Using realistic dummy data...');\n\n    // 2024년 12월 기준 실제 한국 10Y 국채 수익률 (약 3.2-3.5% 범위)\n    const realisticRate = 3.35 + (Math.random() - 0.5) * 0.1; // 3.30-3.40% 범위\n\n    console.log(`✅ Using realistic dummy data: ${realisticRate.toFixed(2)}%`);\n    return {\n      rate: realisticRate,\n      source: 'Dummy Data (Realistic)',\n      isEstimated: true\n    };\n  } catch (error) {\n    console.error('❌ Error fetching Korea bond yield:', error);\n\n    // 최종 백업: 고정된 현실적인 값\n    const fallbackRate = 3.35;\n    console.log(`✅ Using fallback rate: ${fallbackRate}%`);\n    return {\n      rate: fallbackRate,\n      source: 'Fallback',\n      isEstimated: true\n    };\n  }\n};\n\n// 2024년 12월 기준 최신 더미 데이터 (실제 시장 상황 반영)\nconst DUMMY_FIXED_INCOME_DATA = [\n// Standard Interest Rates (기준 금리) - 2024년 12월 기준\n{\n  title: '미국 기준 금리',\n  value: 4.375,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'FEDFUNDS'\n}, {\n  title: '유로 기준 금리',\n  value: 4.50,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'ECBREFI'\n}, {\n  title: '일본 기준 금리',\n  value: -0.10,\n  change: 0.00,\n  isPositive: false,\n  symbol: 'BOJDF'\n}, {\n  title: '한국 기준 금리',\n  value: 2.50,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'KORREPO'\n}, {\n  title: '스위스 기준 금리',\n  value: 1.75,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'SNBREFI'\n}, {\n  title: '영국 기준 금리',\n  value: 5.25,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'BOEREFI'\n}, {\n  title: '호주 기준 금리',\n  value: 4.35,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'RBAREFI'\n}, {\n  title: '브라질 기준 금리',\n  value: 12.25,\n  change: 0.00,\n  isPositive: true,\n  symbol: 'BRAREFI'\n},\n// US Bond Yields - 2024년 12월 기준 최신 수익률\n{\n  title: 'US 3M',\n  value: 5.45,\n  change: 0.02,\n  isPositive: true,\n  symbol: 'US3M'\n}, {\n  title: 'US 2Y',\n  value: 4.78,\n  change: 0.05,\n  isPositive: true,\n  symbol: 'US2Y'\n}, {\n  title: 'US 10Y',\n  value: 4.25,\n  change: 0.08,\n  isPositive: true,\n  symbol: 'US10Y'\n}, {\n  title: 'US 30Y',\n  value: 4.45,\n  change: 0.12,\n  isPositive: true,\n  symbol: 'US30Y'\n},\n// Korea Bond Yields - 2024년 12월 기준 최신 수익률\n{\n  title: 'Korea 2Y',\n  value: 3.45,\n  change: 0.03,\n  isPositive: true,\n  symbol: 'KR2Y'\n}, {\n  title: 'Korea 3Y',\n  value: 3.52,\n  change: 0.04,\n  isPositive: true,\n  symbol: 'KR3Y'\n}, {\n  title: 'Korea 5Y',\n  value: 3.68,\n  change: 0.06,\n  isPositive: true,\n  symbol: 'KR5Y'\n}, {\n  title: 'Korea 10Y',\n  value: 3.85,\n  change: 0.08,\n  isPositive: true,\n  symbol: 'KR10Y'\n}, {\n  title: 'Korea 30Y',\n  value: 4.12,\n  change: 0.10,\n  isPositive: true,\n  symbol: 'KR30Y'\n},\n// Japan Bond Yields - 2024년 12월 기준 최신 수익률\n{\n  title: 'Japan 2Y',\n  value: 0.12,\n  change: 0.01,\n  isPositive: true,\n  symbol: 'JP2Y'\n}, {\n  title: 'Japan 3Y',\n  value: 0.15,\n  change: 0.02,\n  isPositive: true,\n  symbol: 'JP3Y'\n}, {\n  title: 'Japan 5Y',\n  value: 0.25,\n  change: 0.03,\n  isPositive: true,\n  symbol: 'JP5Y'\n}, {\n  title: 'Japan 10Y',\n  value: 0.45,\n  change: 0.05,\n  isPositive: true,\n  symbol: 'JP10Y'\n}, {\n  title: 'Japan 30Y',\n  value: 1.25,\n  change: 0.08,\n  isPositive: true,\n  symbol: 'JP30Y'\n},\n// Germany Bond Yields - 2024년 12월 기준 최신 수익률\n{\n  title: 'Germany 2Y',\n  value: 3.12,\n  change: 0.04,\n  isPositive: true,\n  symbol: 'DE2Y'\n}, {\n  title: 'Germany 3Y',\n  value: 3.25,\n  change: 0.05,\n  isPositive: true,\n  symbol: 'DE3Y'\n}, {\n  title: 'Germany 5Y',\n  value: 3.45,\n  change: 0.06,\n  isPositive: true,\n  symbol: 'DE5Y'\n}, {\n  title: 'Germany 10Y',\n  value: 2.85,\n  change: 0.08,\n  isPositive: true,\n  symbol: 'DE10Y'\n}, {\n  title: 'Germany 30Y',\n  value: 3.15,\n  change: 0.10,\n  isPositive: true,\n  symbol: 'DE30Y'\n}];\n\n// 실시간 데이터 시뮬레이션 (더미 데이터에 약간의 변동 추가)\nconst generateRealTimeData = () => {\n  return DUMMY_FIXED_INCOME_DATA.map(item => {\n    // 약간의 랜덤 변동 추가 (±0.05% 범위)\n    const variation = (Math.random() - 0.5) * 0.1;\n    const newValue = item.value + variation;\n    const newChange = variation;\n    return {\n      ...item,\n      value: Math.round(newValue * 100) / 100,\n      change: Math.round(newChange * 100) / 100,\n      isPositive: newChange >= 0\n    };\n  });\n};\n\n// 기준 금리 데이터 가져오기 (실시간 시뮬레이션)\nexport const fetchInterestRates = async () => {\n  try {\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\n    const realTimeData = generateRealTimeData();\n    return realTimeData.filter(item => item.title.includes('기준 금리'));\n  } catch (error) {\n    console.error('Error fetching interest rates:', error);\n    return DUMMY_FIXED_INCOME_DATA.filter(item => item.title.includes('기준 금리'));\n  }\n};\n\n// Trading Economics에서 기준금리 데이터 가져오기\nexport const fetchInterestRatesFromTradingEconomics = async () => {\n  try {\n    console.log('🌐 Fetching interest rates from Trading Economics...');\n\n    // Trading Economics 국가별 기준금리 페이지 URL\n    const url = 'https://ko.tradingeconomics.com/country-list/interest-rate';\n    console.log(`🔗 Fetching from: ${url}`);\n    const html = await fetchWithProxy(url);\n    if (!html) {\n      console.log('❌ Failed to fetch HTML from Trading Economics');\n      return null;\n    }\n    console.log(`✅ HTML fetched successfully! Length: ${html.length} characters`);\n\n    // HTML에서 기준금리 데이터 추출\n    const interestRates = extractInterestRatesFromCountryList(html);\n    if (interestRates && interestRates.length > 0) {\n      console.log(`✅ Successfully extracted ${interestRates.length} interest rates`);\n      return interestRates;\n    } else {\n      console.log('❌ No interest rates found in HTML');\n      return null;\n    }\n  } catch (error) {\n    console.error('❌ Error fetching interest rates from Trading Economics:', error);\n    return null;\n  }\n};\n\n// Trading Economics 국가별 기준금리 페이지에서 데이터 추출\nconst extractInterestRatesFromCountryList = html => {\n  try {\n    console.log('🔍 Extracting interest rates from country list...');\n    const interestRates = [];\n\n    // 국가별 기준금리 테이블 패턴 찾기\n    // 일반적으로 <table> 태그 안에 국가명과 기준금리가 포함됨\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\n    const tables = html.match(tablePattern);\n    if (!tables || tables.length === 0) {\n      console.log('❌ No tables found in HTML');\n      return null;\n    }\n    console.log(`📊 Found ${tables.length} tables in HTML`);\n\n    // 각 테이블에서 데이터 추출\n    for (let tableIndex = 0; tableIndex < tables.length; tableIndex++) {\n      const table = tables[tableIndex];\n\n      // 테이블 행들 추출\n      const rowPattern = /<tr[^>]*>.*?<\\/tr>/gis;\n      const rows = table.match(rowPattern);\n      if (!rows || rows.length < 2) {\n        continue; // 헤더만 있거나 데이터가 없는 테이블은 건너뛰기\n      }\n      console.log(`📋 Processing table ${tableIndex + 1} with ${rows.length} rows`);\n\n      // 첫 번째 행은 헤더이므로 제외하고, 두 번째 행부터 검색\n      for (let i = 1; i < rows.length; i++) {\n        const row = rows[i];\n\n        // TD 태그들 추출\n        const tdPattern = /<td[^>]*>(.*?)<\\/td>/gis;\n        const tds = row.match(tdPattern);\n        if (tds && tds.length >= 2) {\n          // 첫 번째 TD: 국가명\n          const countryTD = tds[0];\n          // 두 번째 TD: 기준금리\n          const rateTD = tds[1];\n\n          // 국가명 추출\n          const countryPattern = />([^<]+)</;\n          const countryMatch = countryTD.match(countryPattern);\n\n          // 기준금리 추출\n          const ratePattern = />([^<]+)</;\n          const rateMatch = rateTD.match(ratePattern);\n          if (countryMatch && rateMatch) {\n            const country = countryMatch[1].trim();\n            const rateText = rateMatch[1].trim();\n\n            // 숫자만 추출 (퍼센트 기호 제거)\n            const numberPattern = /(\\d+\\.?\\d*)/;\n            const numberMatch = rateText.match(numberPattern);\n            if (numberMatch) {\n              const rate = parseFloat(numberMatch[1]);\n\n              // 주요 국가들만 필터링\n              const majorCountries = {\n                '미국': '미국 기준 금리',\n                'United States': '미국 기준 금리',\n                '유로': '유로 기준 금리',\n                'Euro Area': '유로 기준 금리',\n                '일본': '일본 기준 금리',\n                'Japan': '일본 기준 금리',\n                '한국': '한국 기준 금리',\n                'South Korea': '한국 기준 금리',\n                '스위스': '스위스 기준 금리',\n                'Switzerland': '스위스 기준 금리',\n                '영국': '영국 기준 금리',\n                'United Kingdom': '영국 기준 금리',\n                '호주': '호주 기준 금리',\n                'Australia': '호주 기준 금리',\n                '브라질': '브라질 기준 금리',\n                'Brazil': '브라질 기준 금리'\n              };\n              const mappedTitle = majorCountries[country];\n              if (mappedTitle) {\n                console.log(`✅ Found ${country}: ${rate}% -> ${mappedTitle}`);\n                interestRates.push({\n                  title: mappedTitle,\n                  value: rate,\n                  change: 0.00,\n                  // 변화율은 별도로 계산 필요\n                  isPositive: true,\n                  symbol: mappedTitle.replace(' 기준 금리', '').toUpperCase(),\n                  isRealData: true,\n                  dataSource: 'Trading Economics'\n                });\n              }\n            }\n          }\n        }\n      }\n    }\n    console.log(`📊 Extracted ${interestRates.length} interest rates from Trading Economics`);\n    return interestRates;\n  } catch (error) {\n    console.error('❌ Error extracting interest rates from country list:', error);\n    return null;\n  }\n};\n\n// 채권 수익률 데이터 가져오기 (실시간 시뮬레이션)\nexport const fetchBondYields = async () => {\n  try {\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\n    const realTimeData = generateRealTimeData();\n    return realTimeData.filter(item => !item.title.includes('기준 금리'));\n  } catch (error) {\n    console.error('Error fetching bond yields:', error);\n    return DUMMY_FIXED_INCOME_DATA.filter(item => !item.title.includes('기준 금리'));\n  }\n};\n\n// 모든 Fixed Income 데이터 가져오기 (실시간 시뮬레이션)\nexport const fetchAllFixedIncomeData = async () => {\n  try {\n    console.log('🔄 Starting Fixed Income data fetch...');\n\n    // 기본 더미 데이터 가져오기\n    const dummyData = generateRealTimeData();\n    console.log('📊 Dummy data loaded:', dummyData.length, 'items');\n\n    // Trading Economics에서 기준금리 데이터 가져오기 시도\n    try {\n      console.log('🌐 Attempting to fetch interest rates from Trading Economics...');\n      const realInterestRates = await fetchInterestRatesFromTradingEconomics();\n      if (realInterestRates && realInterestRates.length > 0) {\n        console.log(`✅ Successfully fetched ${realInterestRates.length} interest rates from Trading Economics`);\n\n        // 더미 데이터를 실제 데이터로 업데이트\n        const updatedData = dummyData.map(item => {\n          // 기준금리 항목인지 확인\n          if (item.title.includes('기준 금리')) {\n            // 실제 데이터에서 해당 항목 찾기\n            const realItem = realInterestRates.find(real => real.title === item.title);\n            if (realItem) {\n              console.log(`📈 Updated ${item.title}: ${item.value}% → ${realItem.value}%`);\n              return {\n                ...item,\n                value: realItem.value,\n                change: 0.00,\n                // 변화율은 별도로 계산 필요\n                isPositive: true,\n                isRealData: true,\n                dataSource: 'Trading Economics'\n              };\n            }\n          }\n          return item;\n        });\n        console.log('✅ Data updated with real interest rates');\n        return updatedData;\n      } else {\n        console.log('❌ Failed to fetch real interest rates, using dummy data');\n        return dummyData;\n      }\n    } catch (scrapingError) {\n      console.log('❌ Error fetching real interest rates:', scrapingError);\n      console.log('📊 Falling back to dummy data');\n      return dummyData;\n    }\n  } catch (error) {\n    console.error('❌ Error fetching all fixed income data:', error);\n    return DUMMY_FIXED_INCOME_DATA;\n  }\n};\n\n// Trading Economics URL 매핑 (실제 웹사이트 링크)\nexport const TRADING_ECONOMICS_URLS = {\n  // 기준 금리 - 실제 Trading Economics 페이지\n  '미국 기준 금리': 'https://tradingeconomics.com/united-states/interest-rate',\n  '유로 기준 금리': 'https://tradingeconomics.com/euro-area/interest-rate',\n  '일본 기준 금리': 'https://tradingeconomics.com/japan/interest-rate',\n  '한국 기준 금리': 'https://tradingeconomics.com/south-korea/interest-rate',\n  '스위스 기준 금리': 'https://tradingeconomics.com/switzerland/interest-rate',\n  '영국 기준 금리': 'https://tradingeconomics.com/united-kingdom/interest-rate',\n  '호주 기준 금리': 'https://tradingeconomics.com/australia/interest-rate',\n  '브라질 기준 금리': 'https://tradingeconomics.com/brazil/interest-rate',\n  // US Bond Yields - 실제 Trading Economics 페이지\n  'US 3M': 'https://tradingeconomics.com/united-states/government-bond-yield',\n  'US 2Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\n  'US 10Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\n  'US 30Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\n  // Korea Bond Yields - 실제 Trading Economics 페이지\n  'Korea 2Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  'Korea 3Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  'Korea 5Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  'Korea 10Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  'Korea 30Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\n  // Japan Bond Yields - 실제 Trading Economics 페이지\n  'Japan 2Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  'Japan 3Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  'Japan 5Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  'Japan 10Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  'Japan 30Y': 'https://tradingeconomics.com/japan/government-bond-yield',\n  // Germany Bond Yields - 실제 Trading Economics 페이지\n  'Germany 2Y': 'https://tradingeconomics.com/germany/government-bond-yield',\n  'Germany 3Y': 'https://tradingeconomics.com/germany/government-bond-yield',\n  'Germany 5Y': 'https://tradingeconomics.com/germany/government-bond-yield',\n  'Germany 10Y': 'https://tradingeconomics.com/germany/government-bond-yield',\n  'Germany 30Y': 'https://tradingeconomics.com/germany/government-bond-yield'\n};\n\n// 웹 스크래핑 테스트 함수\nexport const testWebScraping = async () => {\n  try {\n    console.log('🧪 Testing web scraping functionality...');\n\n    // 간단한 테스트 URL (Google)\n    const testUrl = 'https://www.google.com';\n    for (let i = 0; i < PROXY_SERVICES.length; i++) {\n      try {\n        const proxyUrl = PROXY_SERVICES[i] + testUrl;\n        console.log(`🔗 Testing proxy ${i + 1}: ${PROXY_SERVICES[i] ? PROXY_SERVICES[i].substring(0, 30) + '...' : 'Direct'}`);\n        const response = await fetch(proxyUrl, {\n          method: 'GET',\n          headers: {\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n          }\n        });\n        if (response.ok) {\n          const html = await response.text();\n          if (html.length > 100) {\n            console.log(`✅ Proxy ${i + 1} works! Response length: ${html.length}`);\n            return true;\n          }\n        }\n      } catch (error) {\n        console.log(`❌ Proxy ${i + 1} failed: ${error.message}`);\n      }\n    }\n    console.log('❌ All proxies failed');\n    return false;\n  } catch (error) {\n    console.error('❌ Test failed:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["BASE_URL","PROXY_SERVICES","fetchFromPublicAPI","console","log","alphaVantageUrl","response","fetch","data","json","length","latestYield","parseFloat","value","us10y","source","error","message","yahooUrl","chart","result","meta","regularMarketPrice","simpleUrl","record","Error","fetchWithProxy","url","proxyIndex","proxyUrl","substring","method","headers","timeout","ok","status","html","text","extractInterestRateFromHTML","country","tablePattern","tableMatch","match","tableHTML","rowPattern","rows","currentDate","Date","currentDateString","toISOString","split","latestRate","latestDate","i","row","tdPattern","tds","dateTD","actualTD","teForcastTD","datePattern","dateMatch","date","actualPattern","actualMatch","teForcastPattern","teForcastMatch","rate","numberPattern","numberMatches","rates","map","maxRate","Math","max","firstSentenceMatch","textToSearch","patterns","pattern","matches","rateMatch","fetchInterestRateFromWeb","urls","fetchKoreaBondYield","publicData","koreaRate","isEstimated","apiError","scrapingError","realisticRate","random","toFixed","fallbackRate","DUMMY_FIXED_INCOME_DATA","title","change","isPositive","symbol","generateRealTimeData","item","variation","newValue","newChange","round","fetchInterestRates","realTimeData","filter","includes","fetchInterestRatesFromTradingEconomics","interestRates","extractInterestRatesFromCountryList","tables","tableIndex","table","countryTD","rateTD","countryPattern","countryMatch","ratePattern","trim","rateText","numberMatch","majorCountries","mappedTitle","push","replace","toUpperCase","isRealData","dataSource","fetchBondYields","fetchAllFixedIncomeData","dummyData","realInterestRates","updatedData","realItem","find","real","TRADING_ECONOMICS_URLS","testWebScraping","testUrl"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/fixedIncomeApi.js"],"sourcesContent":["// Trading Economics 웹사이트에서 최신 데이터를 가져오는 Fixed Income 서비스\r\nconst BASE_URL = 'https://tradingeconomics.com';\r\n\r\n// 프록시 서버들을 사용한 웹 스크래핑\r\nconst PROXY_SERVICES = [\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://corsproxy.io/?',\r\n  'https://thingproxy.freeboard.io/fetch/',\r\n  'https://cors.bridged.cc/',\r\n  'https://api.codetabs.com/v1/proxy?quest=',\r\n  'https://cors.eu.org/',\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  'https://corsproxy.io/?',\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://thingproxy.freeboard.io/fetch/',\r\n  '' // 직접 호출도 시도\r\n];\r\n\r\n// 공개 API를 통한 실제 데이터 가져오기\r\nconst fetchFromPublicAPI = async () => {\r\n  try {\r\n    console.log('🌐 Trying public API for real data...');\r\n    \r\n    // 방법 1: Alpha Vantage API (무료 티어)\r\n    try {\r\n      const alphaVantageUrl = 'https://www.alphavantage.co/query?function=TREASURY_YIELD&interval=daily&maturity=10year&apikey=demo';\r\n      \r\n      const response = await fetch(alphaVantageUrl);\r\n      const data = await response.json();\r\n      \r\n      if (data && data.data && data.data.length > 0) {\r\n        const latestYield = parseFloat(data.data[0].value);\r\n        console.log('✅ Alpha Vantage API successful! US 10Y yield:', latestYield + '%');\r\n        return { us10y: latestYield, source: 'Alpha Vantage' };\r\n      }\r\n    } catch (error) {\r\n      console.log('❌ Alpha Vantage API failed:', error.message);\r\n    }\r\n    \r\n    // 방법 2: Yahoo Finance API (간접적)\r\n    try {\r\n      const yahooUrl = 'https://query1.finance.yahoo.com/v8/finance/chart/%5ETNX?interval=1d&range=1d';\r\n      \r\n      const response = await fetch(yahooUrl);\r\n      const data = await response.json();\r\n      \r\n      if (data && data.chart && data.chart.result && data.chart.result[0]) {\r\n        const result = data.chart.result[0];\r\n        const meta = result.meta;\r\n        const regularMarketPrice = meta.regularMarketPrice;\r\n        \r\n        if (regularMarketPrice) {\r\n          console.log('✅ Yahoo Finance API successful! US 10Y yield:', regularMarketPrice + '%');\r\n          return { us10y: regularMarketPrice, source: 'Yahoo Finance' };\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log('❌ Yahoo Finance API failed:', error.message);\r\n    }\r\n    \r\n    // 방법 3: 간단한 JSON API\r\n    try {\r\n      const simpleUrl = 'https://api.jsonbin.io/v3/b/65c8f8c8266cfc3fde8b8c8c';\r\n      \r\n      const response = await fetch(simpleUrl);\r\n      const data = await response.json();\r\n      \r\n      if (data && data.record && data.record.us10y) {\r\n        const us10y = data.record.us10y;\r\n        console.log('✅ Simple API successful! US 10Y yield:', us10y + '%');\r\n        return { us10y: us10y, source: 'Simple API' };\r\n      }\r\n    } catch (error) {\r\n      console.log('❌ Simple API failed:', error.message);\r\n    }\r\n    \r\n    throw new Error('All public APIs failed');\r\n  } catch (error) {\r\n    console.log('❌ All public APIs failed:', error.message);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 프록시를 사용한 웹 스크래핑\r\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\r\n  if (proxyIndex >= PROXY_SERVICES.length) {\r\n    throw new Error('All proxy attempts failed');\r\n  }\r\n\r\n  try {\r\n    const proxyUrl = PROXY_SERVICES[proxyIndex] + url;\r\n    console.log(`🔗 Trying proxy ${proxyIndex + 1}/${PROXY_SERVICES.length}: ${proxyUrl.substring(0, 50)}...`);\r\n    \r\n    const response = await fetch(proxyUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n        'Accept-Language': 'en-US,en;q=0.9',\r\n        'Accept-Encoding': 'gzip, deflate, br',\r\n        'Connection': 'keep-alive',\r\n        'Upgrade-Insecure-Requests': '1'\r\n      },\r\n      timeout: 10000 // 10초 타임아웃\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const html = await response.text();\r\n    \r\n    if (html.length < 1000) {\r\n      throw new Error('Response too short, likely an error page');\r\n    }\r\n    \r\n    console.log(`✅ Proxy ${proxyIndex + 1} successful! HTML length: ${html.length} characters`);\r\n    return html;\r\n  } catch (error) {\r\n    console.log(`❌ Proxy ${proxyIndex + 1} failed: ${error.message}`);\r\n    return fetchWithProxy(url, proxyIndex + 1);\r\n  }\r\n};\r\n\r\n// HTML에서 금리 데이터 추출 (Trading Economics Calendar 테이블에서 추출)\r\nconst extractInterestRateFromHTML = (html, country) => {\r\n  try {\r\n    // Trading Economics Calendar 테이블에서 가장 최신의 실제 데이터 TEForcast 값 추출\r\n    \r\n    // 테이블 패턴 찾기 (Calendar, GMT가 포함된 테이블)\r\n    const tablePattern = /<table[^>]*>.*?Calendar.*?GMT.*?<\\/table>/is;\r\n    const tableMatch = html.match(tablePattern);\r\n    \r\n    if (!tableMatch) {\r\n      console.log(`No calendar table found for ${country}`);\r\n      return null;\r\n    }\r\n    \r\n    const tableHTML = tableMatch[0];\r\n    \r\n    // 테이블 행들 추출\r\n    const rowPattern = /<tr[^>]*>.*?<\\/tr>/gis;\r\n    const rows = tableHTML.match(rowPattern);\r\n    \r\n    if (!rows || rows.length < 2) {\r\n      console.log(`No rows found in calendar table for ${country}`);\r\n      return null;\r\n    }\r\n    \r\n    // 현재 날짜 가져오기\r\n    const currentDate = new Date();\r\n    const currentDateString = currentDate.toISOString().split('T')[0]; // YYYY-MM-DD 형식\r\n    \r\n    console.log(`Current date: ${currentDateString}`);\r\n    \r\n    // 첫 번째 행은 헤더이므로 제외하고, 두 번째 행부터 검색\r\n    // 가장 최신의 실제 데이터(Actual 값이 있는 행)의 TEForcast 값 찾기\r\n    let latestRate = null;\r\n    let latestDate = null;\r\n    \r\n    for (let i = 1; i < rows.length; i++) {\r\n      const row = rows[i];\r\n      \r\n      // TD 태그들 추출\r\n      const tdPattern = /<td[^>]*>(.*?)<\\/td>/gis;\r\n      const tds = row.match(tdPattern);\r\n      \r\n      if (tds && tds.length >= 7) { // Calendar, GMT, Reference, Actual, Previous, Consensus, TEForecast\r\n        // 첫 번째 TD: 날짜\r\n        const dateTD = tds[0];\r\n        // 네 번째 TD: Actual 값\r\n        const actualTD = tds[3];\r\n        // 일곱 번째 TD: TEForcast 값\r\n        const teForcastTD = tds[6];\r\n        \r\n        // 날짜 추출 (YYYY-MM-DD 형식)\r\n        const datePattern = /(\\d{4}-\\d{2}-\\d{2})/;\r\n        const dateMatch = dateTD.match(datePattern);\r\n        \r\n        if (dateMatch) {\r\n          const date = dateMatch[1];\r\n          \r\n          // 날짜가 현재 날짜보다 미래인지 확인\r\n          if (date > currentDateString) {\r\n            console.log(`Skipping future date: ${date}`);\r\n            continue; // 미래 날짜는 건너뛰기\r\n          }\r\n          \r\n          // Actual 값이 있는지 확인 (빈 값이 아닌지)\r\n          const actualPattern = /(\\d+\\.\\d+)/;\r\n          const actualMatch = actualTD.match(actualPattern);\r\n          \r\n          if (actualMatch) {\r\n            // Actual 값이 있으면 실제 데이터로 간주\r\n            const teForcastPattern = /(\\d+\\.\\d+)/;\r\n            const teForcastMatch = teForcastTD.match(teForcastPattern);\r\n            \r\n            if (teForcastMatch) {\r\n              const rate = parseFloat(teForcastMatch[1]);\r\n              \r\n              // 더 최신 날짜인지 확인\r\n              if (!latestDate || date > latestDate) {\r\n                latestDate = date;\r\n                latestRate = rate;\r\n                console.log(`Found actual data: ${rate}% for date: ${date}`);\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`No actual data for date: ${date}, skipping`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (latestRate) {\r\n      console.log(`Found latest actual rate for ${country}: ${latestRate}% (Date: ${latestDate})`);\r\n      return latestRate;\r\n    }\r\n    \r\n    // 실제 데이터를 찾지 못한 경우, 모든 TD에서 숫자 찾기 (미래 제외)\r\n    console.log(`No actual data found for ${country}, searching all TDs (excluding future dates)...`);\r\n    \r\n    for (let i = 1; i < rows.length; i++) {\r\n      const row = rows[i];\r\n      \r\n      // 날짜 추출 (YYYY-MM-DD 형식)\r\n      const datePattern = /(\\d{4}-\\d{2}-\\d{2})/;\r\n      const dateMatch = row.match(datePattern);\r\n      \r\n      if (dateMatch) {\r\n        const date = dateMatch[1];\r\n        \r\n        // 날짜가 현재 날짜보다 미래인지 확인\r\n        if (date > currentDateString) {\r\n          continue; // 미래 날짜는 건너뛰기\r\n        }\r\n        \r\n        // 모든 숫자.숫자 패턴 찾기\r\n        const numberPattern = /(\\d+\\.\\d+)/g;\r\n        const numberMatches = row.match(numberPattern);\r\n        \r\n        if (numberMatches && numberMatches.length > 0) {\r\n          // 가장 큰 값이 보통 메인 금리\r\n          const rates = numberMatches.map(match => parseFloat(match));\r\n          const maxRate = Math.max(...rates);\r\n          \r\n          // 더 최신 날짜인지 확인\r\n          if (!latestDate || date > latestDate) {\r\n            latestDate = date;\r\n            latestRate = maxRate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (latestRate) {\r\n      console.log(`Found latest rate from all TDs for ${country}: ${latestRate}% (Date: ${latestDate})`);\r\n      return latestRate;\r\n    }\r\n    \r\n    // 테이블에서 찾지 못한 경우, 기존 패턴으로 백업 시도\r\n    console.log(`No rate found in table for ${country}, trying backup patterns...`);\r\n    \r\n    // 백업: 첫 번째 문장에서 금리 추출\r\n    const firstSentenceMatch = html.match(/<p[^>]*>([^<]+)<\\/p>/i) || \r\n                              html.match(/<div[^>]*>([^<]+)<\\/div>/i) ||\r\n                              html.match(/<span[^>]*>([^<]+)<\\/span>/i);\r\n    \r\n    const textToSearch = firstSentenceMatch ? firstSentenceMatch[1] : html;\r\n    \r\n    const patterns = [\r\n      /(\\d+\\.\\d+)%/g,\r\n      /yield.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?yield/i,\r\n      /bond.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?bond/i\r\n    ];\r\n    \r\n    for (const pattern of patterns) {\r\n      const matches = textToSearch.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        const maxRate = Math.max(...rates);\r\n        if (maxRate > 0) {\r\n          console.log(`Found rate from backup pattern for ${country}: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`No rate found for ${country}`);\r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error extracting data from HTML:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 실제 웹 스크래핑으로 금리 데이터 가져오기\r\nexport const fetchInterestRateFromWeb = async (country) => {\r\n  try {\r\n    const urls = {\r\n      '미국': 'https://tradingeconomics.com/united-states/interest-rate',\r\n      '한국': 'https://tradingeconomics.com/south-korea/interest-rate',\r\n      '일본': 'https://tradingeconomics.com/japan/interest-rate',\r\n      '유로': 'https://tradingeconomics.com/euro-area/interest-rate',\r\n      '영국': 'https://tradingeconomics.com/united-kingdom/interest-rate',\r\n      '한국국채': 'https://tradingeconomics.com/south-korea/government-bond-yield'\r\n    };\r\n\r\n    const url = urls[country];\r\n    if (!url) {\r\n      throw new Error(`No URL found for country: ${country}`);\r\n    }\r\n\r\n    console.log(`Fetching data for ${country} from: ${url}`);\r\n    const html = await fetchWithProxy(url);\r\n    const rate = extractInterestRateFromHTML(html, country);\r\n    \r\n    return rate;\r\n  } catch (error) {\r\n    console.error(`Error fetching ${country} interest rate:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 한국 국채 수익률 특별 함수\r\nexport const fetchKoreaBondYield = async () => {\r\n  try {\r\n    console.log('🇰🇷 Fetching Korea bond yield...');\r\n    \r\n    // 방법 1: 공개 API 시도 (우선순위)\r\n    try {\r\n      console.log('🌐 Method 1: Trying public APIs...');\r\n      const publicData = await fetchFromPublicAPI();\r\n      \r\n      if (publicData && publicData.us10y) {\r\n        // US 10Y 수익률을 기준으로 한국 국채 수익률 추정\r\n        // 한국 국채는 보통 US 국채보다 1-2% 높음\r\n        const koreaRate = publicData.us10y + 1.5;\r\n        console.log(`✅ Public API successful! Korea rate estimated: ${koreaRate}% (based on US 10Y: ${publicData.us10y}%)`);\r\n        return { rate: koreaRate, source: publicData.source, isEstimated: true };\r\n      }\r\n    } catch (apiError) {\r\n      console.log('❌ Public API failed:', apiError.message);\r\n    }\r\n    \r\n    // 방법 2: Trading Economics 웹 스크래핑 (백업)\r\n    try {\r\n      const url = 'https://tradingeconomics.com/south-korea/government-bond-yield';\r\n      console.log('🌐 Method 2: Web scraping from Trading Economics');\r\n      \r\n      const html = await fetchWithProxy(url);\r\n      const rate = extractInterestRateFromHTML(html, '한국국채');\r\n      \r\n      if (rate) {\r\n        console.log(`✅ Web scraping successful! Korea bond yield: ${rate}%`);\r\n        return { rate: rate, source: 'Trading Economics', isEstimated: false };\r\n      }\r\n    } catch (scrapingError) {\r\n      console.log('❌ Web scraping failed:', scrapingError.message);\r\n    }\r\n    \r\n    // 방법 3: 현실적인 더미 데이터 (최종 백업)\r\n    console.log('🌐 Method 3: Using realistic dummy data...');\r\n    \r\n    // 2024년 12월 기준 실제 한국 10Y 국채 수익률 (약 3.2-3.5% 범위)\r\n    const realisticRate = 3.35 + (Math.random() - 0.5) * 0.1; // 3.30-3.40% 범위\r\n    \r\n    console.log(`✅ Using realistic dummy data: ${realisticRate.toFixed(2)}%`);\r\n    return { rate: realisticRate, source: 'Dummy Data (Realistic)', isEstimated: true };\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching Korea bond yield:', error);\r\n    \r\n    // 최종 백업: 고정된 현실적인 값\r\n    const fallbackRate = 3.35;\r\n    console.log(`✅ Using fallback rate: ${fallbackRate}%`);\r\n    return { rate: fallbackRate, source: 'Fallback', isEstimated: true };\r\n  }\r\n};\r\n\r\n// 2024년 12월 기준 최신 더미 데이터 (실제 시장 상황 반영)\r\nconst DUMMY_FIXED_INCOME_DATA = [\r\n  // Standard Interest Rates (기준 금리) - 2024년 12월 기준\r\n  { title: '미국 기준 금리', value: 4.375, change: 0.00, isPositive: true, symbol: 'FEDFUNDS' },\r\n  { title: '유로 기준 금리', value: 4.50, change: 0.00, isPositive: true, symbol: 'ECBREFI' },\r\n  { title: '일본 기준 금리', value: -0.10, change: 0.00, isPositive: false, symbol: 'BOJDF' },\r\n  { title: '한국 기준 금리', value: 2.50, change: 0.00, isPositive: true, symbol: 'KORREPO' },\r\n  { title: '스위스 기준 금리', value: 1.75, change: 0.00, isPositive: true, symbol: 'SNBREFI' },\r\n  { title: '영국 기준 금리', value: 5.25, change: 0.00, isPositive: true, symbol: 'BOEREFI' },\r\n  { title: '호주 기준 금리', value: 4.35, change: 0.00, isPositive: true, symbol: 'RBAREFI' },\r\n  { title: '브라질 기준 금리', value: 12.25, change: 0.00, isPositive: true, symbol: 'BRAREFI' },\r\n  \r\n  // US Bond Yields - 2024년 12월 기준 최신 수익률\r\n  { title: 'US 3M', value: 5.45, change: 0.02, isPositive: true, symbol: 'US3M' },\r\n  { title: 'US 2Y', value: 4.78, change: 0.05, isPositive: true, symbol: 'US2Y' },\r\n  { title: 'US 10Y', value: 4.25, change: 0.08, isPositive: true, symbol: 'US10Y' },\r\n  { title: 'US 30Y', value: 4.45, change: 0.12, isPositive: true, symbol: 'US30Y' },\r\n  \r\n  // Korea Bond Yields - 2024년 12월 기준 최신 수익률\r\n  { title: 'Korea 2Y', value: 3.45, change: 0.03, isPositive: true, symbol: 'KR2Y' },\r\n  { title: 'Korea 3Y', value: 3.52, change: 0.04, isPositive: true, symbol: 'KR3Y' },\r\n  { title: 'Korea 5Y', value: 3.68, change: 0.06, isPositive: true, symbol: 'KR5Y' },\r\n  { title: 'Korea 10Y', value: 3.85, change: 0.08, isPositive: true, symbol: 'KR10Y' },\r\n  { title: 'Korea 30Y', value: 4.12, change: 0.10, isPositive: true, symbol: 'KR30Y' },\r\n  \r\n  // Japan Bond Yields - 2024년 12월 기준 최신 수익률\r\n  { title: 'Japan 2Y', value: 0.12, change: 0.01, isPositive: true, symbol: 'JP2Y' },\r\n  { title: 'Japan 3Y', value: 0.15, change: 0.02, isPositive: true, symbol: 'JP3Y' },\r\n  { title: 'Japan 5Y', value: 0.25, change: 0.03, isPositive: true, symbol: 'JP5Y' },\r\n  { title: 'Japan 10Y', value: 0.45, change: 0.05, isPositive: true, symbol: 'JP10Y' },\r\n  { title: 'Japan 30Y', value: 1.25, change: 0.08, isPositive: true, symbol: 'JP30Y' },\r\n  \r\n  // Germany Bond Yields - 2024년 12월 기준 최신 수익률\r\n  { title: 'Germany 2Y', value: 3.12, change: 0.04, isPositive: true, symbol: 'DE2Y' },\r\n  { title: 'Germany 3Y', value: 3.25, change: 0.05, isPositive: true, symbol: 'DE3Y' },\r\n  { title: 'Germany 5Y', value: 3.45, change: 0.06, isPositive: true, symbol: 'DE5Y' },\r\n  { title: 'Germany 10Y', value: 2.85, change: 0.08, isPositive: true, symbol: 'DE10Y' },\r\n  { title: 'Germany 30Y', value: 3.15, change: 0.10, isPositive: true, symbol: 'DE30Y' }\r\n];\r\n\r\n// 실시간 데이터 시뮬레이션 (더미 데이터에 약간의 변동 추가)\r\nconst generateRealTimeData = () => {\r\n  return DUMMY_FIXED_INCOME_DATA.map(item => {\r\n    // 약간의 랜덤 변동 추가 (±0.05% 범위)\r\n    const variation = (Math.random() - 0.5) * 0.1;\r\n    const newValue = item.value + variation;\r\n    const newChange = variation;\r\n    \r\n    return {\r\n      ...item,\r\n      value: Math.round(newValue * 100) / 100,\r\n      change: Math.round(newChange * 100) / 100,\r\n      isPositive: newChange >= 0\r\n    };\r\n  });\r\n};\r\n\r\n// 기준 금리 데이터 가져오기 (실시간 시뮬레이션)\r\nexport const fetchInterestRates = async () => {\r\n  try {\r\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\r\n    const realTimeData = generateRealTimeData();\r\n    return realTimeData.filter(item => item.title.includes('기준 금리'));\r\n  } catch (error) {\r\n    console.error('Error fetching interest rates:', error);\r\n    return DUMMY_FIXED_INCOME_DATA.filter(item => item.title.includes('기준 금리'));\r\n  }\r\n};\r\n\r\n// Trading Economics에서 기준금리 데이터 가져오기\r\nexport const fetchInterestRatesFromTradingEconomics = async () => {\r\n  try {\r\n    console.log('🌐 Fetching interest rates from Trading Economics...');\r\n    \r\n    // Trading Economics 국가별 기준금리 페이지 URL\r\n    const url = 'https://ko.tradingeconomics.com/country-list/interest-rate';\r\n    \r\n    console.log(`🔗 Fetching from: ${url}`);\r\n    const html = await fetchWithProxy(url);\r\n    \r\n    if (!html) {\r\n      console.log('❌ Failed to fetch HTML from Trading Economics');\r\n      return null;\r\n    }\r\n    \r\n    console.log(`✅ HTML fetched successfully! Length: ${html.length} characters`);\r\n    \r\n    // HTML에서 기준금리 데이터 추출\r\n    const interestRates = extractInterestRatesFromCountryList(html);\r\n    \r\n    if (interestRates && interestRates.length > 0) {\r\n      console.log(`✅ Successfully extracted ${interestRates.length} interest rates`);\r\n      return interestRates;\r\n    } else {\r\n      console.log('❌ No interest rates found in HTML');\r\n      return null;\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching interest rates from Trading Economics:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Trading Economics 국가별 기준금리 페이지에서 데이터 추출\r\nconst extractInterestRatesFromCountryList = (html) => {\r\n  try {\r\n    console.log('🔍 Extracting interest rates from country list...');\r\n    \r\n    const interestRates = [];\r\n    \r\n    // 국가별 기준금리 테이블 패턴 찾기\r\n    // 일반적으로 <table> 태그 안에 국가명과 기준금리가 포함됨\r\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\r\n    const tables = html.match(tablePattern);\r\n    \r\n    if (!tables || tables.length === 0) {\r\n      console.log('❌ No tables found in HTML');\r\n      return null;\r\n    }\r\n    \r\n    console.log(`📊 Found ${tables.length} tables in HTML`);\r\n    \r\n    // 각 테이블에서 데이터 추출\r\n    for (let tableIndex = 0; tableIndex < tables.length; tableIndex++) {\r\n      const table = tables[tableIndex];\r\n      \r\n      // 테이블 행들 추출\r\n      const rowPattern = /<tr[^>]*>.*?<\\/tr>/gis;\r\n      const rows = table.match(rowPattern);\r\n      \r\n      if (!rows || rows.length < 2) {\r\n        continue; // 헤더만 있거나 데이터가 없는 테이블은 건너뛰기\r\n      }\r\n      \r\n      console.log(`📋 Processing table ${tableIndex + 1} with ${rows.length} rows`);\r\n      \r\n      // 첫 번째 행은 헤더이므로 제외하고, 두 번째 행부터 검색\r\n      for (let i = 1; i < rows.length; i++) {\r\n        const row = rows[i];\r\n        \r\n        // TD 태그들 추출\r\n        const tdPattern = /<td[^>]*>(.*?)<\\/td>/gis;\r\n        const tds = row.match(tdPattern);\r\n        \r\n        if (tds && tds.length >= 2) {\r\n          // 첫 번째 TD: 국가명\r\n          const countryTD = tds[0];\r\n          // 두 번째 TD: 기준금리\r\n          const rateTD = tds[1];\r\n          \r\n          // 국가명 추출\r\n          const countryPattern = />([^<]+)</;\r\n          const countryMatch = countryTD.match(countryPattern);\r\n          \r\n          // 기준금리 추출\r\n          const ratePattern = />([^<]+)</;\r\n          const rateMatch = rateTD.match(ratePattern);\r\n          \r\n          if (countryMatch && rateMatch) {\r\n            const country = countryMatch[1].trim();\r\n            const rateText = rateMatch[1].trim();\r\n            \r\n            // 숫자만 추출 (퍼센트 기호 제거)\r\n            const numberPattern = /(\\d+\\.?\\d*)/;\r\n            const numberMatch = rateText.match(numberPattern);\r\n            \r\n            if (numberMatch) {\r\n              const rate = parseFloat(numberMatch[1]);\r\n              \r\n              // 주요 국가들만 필터링\r\n              const majorCountries = {\r\n                '미국': '미국 기준 금리',\r\n                'United States': '미국 기준 금리',\r\n                '유로': '유로 기준 금리',\r\n                'Euro Area': '유로 기준 금리',\r\n                '일본': '일본 기준 금리',\r\n                'Japan': '일본 기준 금리',\r\n                '한국': '한국 기준 금리',\r\n                'South Korea': '한국 기준 금리',\r\n                '스위스': '스위스 기준 금리',\r\n                'Switzerland': '스위스 기준 금리',\r\n                '영국': '영국 기준 금리',\r\n                'United Kingdom': '영국 기준 금리',\r\n                '호주': '호주 기준 금리',\r\n                'Australia': '호주 기준 금리',\r\n                '브라질': '브라질 기준 금리',\r\n                'Brazil': '브라질 기준 금리'\r\n              };\r\n              \r\n              const mappedTitle = majorCountries[country];\r\n              if (mappedTitle) {\r\n                console.log(`✅ Found ${country}: ${rate}% -> ${mappedTitle}`);\r\n                interestRates.push({\r\n                  title: mappedTitle,\r\n                  value: rate,\r\n                  change: 0.00, // 변화율은 별도로 계산 필요\r\n                  isPositive: true,\r\n                  symbol: mappedTitle.replace(' 기준 금리', '').toUpperCase(),\r\n                  isRealData: true,\r\n                  dataSource: 'Trading Economics'\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`📊 Extracted ${interestRates.length} interest rates from Trading Economics`);\r\n    return interestRates;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error extracting interest rates from country list:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 채권 수익률 데이터 가져오기 (실시간 시뮬레이션)\r\nexport const fetchBondYields = async () => {\r\n  try {\r\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\r\n    const realTimeData = generateRealTimeData();\r\n    return realTimeData.filter(item => !item.title.includes('기준 금리'));\r\n  } catch (error) {\r\n    console.error('Error fetching bond yields:', error);\r\n    return DUMMY_FIXED_INCOME_DATA.filter(item => !item.title.includes('기준 금리'));\r\n  }\r\n};\r\n\r\n// 모든 Fixed Income 데이터 가져오기 (실시간 시뮬레이션)\r\nexport const fetchAllFixedIncomeData = async () => {\r\n  try {\r\n    console.log('🔄 Starting Fixed Income data fetch...');\r\n    \r\n    // 기본 더미 데이터 가져오기\r\n    const dummyData = generateRealTimeData();\r\n    console.log('📊 Dummy data loaded:', dummyData.length, 'items');\r\n    \r\n    // Trading Economics에서 기준금리 데이터 가져오기 시도\r\n    try {\r\n      console.log('🌐 Attempting to fetch interest rates from Trading Economics...');\r\n      const realInterestRates = await fetchInterestRatesFromTradingEconomics();\r\n      \r\n      if (realInterestRates && realInterestRates.length > 0) {\r\n        console.log(`✅ Successfully fetched ${realInterestRates.length} interest rates from Trading Economics`);\r\n        \r\n        // 더미 데이터를 실제 데이터로 업데이트\r\n        const updatedData = dummyData.map(item => {\r\n          // 기준금리 항목인지 확인\r\n          if (item.title.includes('기준 금리')) {\r\n            // 실제 데이터에서 해당 항목 찾기\r\n            const realItem = realInterestRates.find(real => real.title === item.title);\r\n            \r\n            if (realItem) {\r\n              console.log(`📈 Updated ${item.title}: ${item.value}% → ${realItem.value}%`);\r\n              return {\r\n                ...item,\r\n                value: realItem.value,\r\n                change: 0.00, // 변화율은 별도로 계산 필요\r\n                isPositive: true,\r\n                isRealData: true,\r\n                dataSource: 'Trading Economics'\r\n              };\r\n            }\r\n          }\r\n          return item;\r\n        });\r\n        \r\n        console.log('✅ Data updated with real interest rates');\r\n        return updatedData;\r\n      } else {\r\n        console.log('❌ Failed to fetch real interest rates, using dummy data');\r\n        return dummyData;\r\n      }\r\n    } catch (scrapingError) {\r\n      console.log('❌ Error fetching real interest rates:', scrapingError);\r\n      console.log('📊 Falling back to dummy data');\r\n      return dummyData;\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching all fixed income data:', error);\r\n    return DUMMY_FIXED_INCOME_DATA;\r\n  }\r\n};\r\n\r\n// Trading Economics URL 매핑 (실제 웹사이트 링크)\r\nexport const TRADING_ECONOMICS_URLS = {\r\n  // 기준 금리 - 실제 Trading Economics 페이지\r\n  '미국 기준 금리': 'https://tradingeconomics.com/united-states/interest-rate',\r\n  '유로 기준 금리': 'https://tradingeconomics.com/euro-area/interest-rate',\r\n  '일본 기준 금리': 'https://tradingeconomics.com/japan/interest-rate',\r\n  '한국 기준 금리': 'https://tradingeconomics.com/south-korea/interest-rate',\r\n  '스위스 기준 금리': 'https://tradingeconomics.com/switzerland/interest-rate',\r\n  '영국 기준 금리': 'https://tradingeconomics.com/united-kingdom/interest-rate',\r\n  '호주 기준 금리': 'https://tradingeconomics.com/australia/interest-rate',\r\n  '브라질 기준 금리': 'https://tradingeconomics.com/brazil/interest-rate',\r\n  \r\n  // US Bond Yields - 실제 Trading Economics 페이지\r\n  'US 3M': 'https://tradingeconomics.com/united-states/government-bond-yield',\r\n  'US 2Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\r\n  'US 10Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\r\n  'US 30Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\r\n  \r\n  // Korea Bond Yields - 실제 Trading Economics 페이지\r\n  'Korea 2Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 3Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 5Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 10Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 30Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  \r\n  // Japan Bond Yields - 실제 Trading Economics 페이지\r\n  'Japan 2Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 3Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 5Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 10Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 30Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  \r\n  // Germany Bond Yields - 실제 Trading Economics 페이지\r\n  'Germany 2Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 3Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 5Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 10Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 30Y': 'https://tradingeconomics.com/germany/government-bond-yield'\r\n}; \r\n\r\n// 웹 스크래핑 테스트 함수\r\nexport const testWebScraping = async () => {\r\n  try {\r\n    console.log('🧪 Testing web scraping functionality...');\r\n    \r\n    // 간단한 테스트 URL (Google)\r\n    const testUrl = 'https://www.google.com';\r\n    \r\n    for (let i = 0; i < PROXY_SERVICES.length; i++) {\r\n      try {\r\n        const proxyUrl = PROXY_SERVICES[i] + testUrl;\r\n        console.log(`🔗 Testing proxy ${i + 1}: ${PROXY_SERVICES[i] ? PROXY_SERVICES[i].substring(0, 30) + '...' : 'Direct'}`);\r\n        \r\n        const response = await fetch(proxyUrl, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n          }\r\n        });\r\n        \r\n        if (response.ok) {\r\n          const html = await response.text();\r\n          if (html.length > 100) {\r\n            console.log(`✅ Proxy ${i + 1} works! Response length: ${html.length}`);\r\n            return true;\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(`❌ Proxy ${i + 1} failed: ${error.message}`);\r\n      }\r\n    }\r\n    \r\n    console.log('❌ All proxies failed');\r\n    return false;\r\n  } catch (error) {\r\n    console.error('❌ Test failed:', error);\r\n    return false;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}