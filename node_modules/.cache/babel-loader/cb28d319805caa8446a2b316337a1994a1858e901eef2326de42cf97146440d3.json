{"ast":null,"code":"import _objectSpread from\"C:/Users/\\uD64D\\uC131\\uAD00/Desktop/FBoard/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Yahoo Finance에서 상품 데이터를 가져오는 Commodities 서비스\nconst BASE_URL='https://query1.finance.yahoo.com/v8/finance/chart';// Commodities 심볼 매핑 (Yahoo Finance 심볼)\nconst COMMODITIES_SYMBOLS={'Gold':'GC=F','Silver':'SI=F','Brent Crude':'BZ=F','WTI':'CL=F','Copper':'HG=F','Natural Gas':'NG=F','Soybean':'ZS=F','Wheat':'ZW=F','Corn':'ZC=F'};// Yahoo Finance URL 매핑\nexport const YAHOO_FINANCE_URLS={'Gold':'https://finance.yahoo.com/quote/GC=F','Silver':'https://finance.yahoo.com/quote/SI=F','Brent Crude':'https://finance.yahoo.com/quote/BZ=F','WTI':'https://finance.yahoo.com/quote/CL=F','Copper':'https://finance.yahoo.com/quote/HG=F','Natural Gas':'https://finance.yahoo.com/quote/NG=F','Soybean':'https://finance.yahoo.com/quote/ZS=F','Wheat':'https://finance.yahoo.com/quote/ZW=F','Corn':'https://finance.yahoo.com/quote/ZC=F'};// 프록시 서버들을 사용한 웹 스크래핑\nconst PROXY_SERVICES=['https://api.allorigins.win/raw?url=','https://corsproxy.io/?','https://thingproxy.freeboard.io/fetch/','https://cors.bridged.cc/','https://api.codetabs.com/v1/proxy?quest=','https://cors.eu.org/','https://cors-anywhere.herokuapp.com/',''// 직접 호출도 시도\n];// 프록시를 사용한 웹 스크래핑\nconst fetchWithProxy=async function(url){let proxyIndex=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;if(proxyIndex>=PROXY_SERVICES.length){throw new Error('All proxy attempts failed');}try{const proxyUrl=PROXY_SERVICES[proxyIndex]+url;console.log(\"\\uD83D\\uDD17 Trying proxy \".concat(proxyIndex+1,\"/\").concat(PROXY_SERVICES.length,\": \").concat(proxyUrl.substring(0,50),\"...\"));const response=await fetch(proxyUrl,{method:'GET',headers:{'Accept':'application/json,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36','Accept-Language':'en-US,en;q=0.9','Accept-Encoding':'gzip, deflate, br','Connection':'keep-alive','Upgrade-Insecure-Requests':'1'},timeout:10000// 10초 타임아웃\n});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.text();if(data.length<100){throw new Error('Response too short, likely an error page');}console.log(\"\\u2705 Proxy \".concat(proxyIndex+1,\" successful! Data length: \").concat(data.length,\" characters\"));return data;}catch(error){console.log(\"\\u274C Proxy \".concat(proxyIndex+1,\" failed: \").concat(error.message));return fetchWithProxy(url,proxyIndex+1);}};// 2024년 12월 기준 최신 더미 데이터 (실제 시장 상황 반영)\nconst DUMMY_COMMODITIES_DATA=[// Precious Metals (귀금속)\n{title:'Gold',value:2075.50,change:12.30,isPositive:true,symbol:'GC=F'},{title:'Silver',value:24.85,change:-0.15,isPositive:false,symbol:'SI=F'},// Energy (에너지)\n{title:'Brent Crude',value:82.45,change:1.25,isPositive:true,symbol:'BZ=F'},{title:'WTI',value:78.90,change:1.10,isPositive:true,symbol:'CL=F'},{title:'Natural Gas',value:2.85,change:-0.08,isPositive:false,symbol:'NG=F'},// Industrial Metals (산업용 금속)\n{title:'Copper',value:3.95,change:0.05,isPositive:true,symbol:'HG=F'},// Agriculture (농산물)\n{title:'Soybean',value:1250.75,change:-5.25,isPositive:false,symbol:'ZS=F'},{title:'Wheat',value:580.50,change:8.75,isPositive:true,symbol:'ZW=F'},{title:'Corn',value:485.25,change:-2.50,isPositive:false,symbol:'ZC=F'}];// 실시간 데이터 시뮬레이션 (더미 데이터에 약간의 변동 추가)\nconst generateRealTimeData=()=>{return DUMMY_COMMODITIES_DATA.map(item=>{// 약간의 랜덤 변동 추가 (±2% 범위)\nconst variation=(Math.random()-0.5)*0.04;const newValue=item.value*(1+variation);const newChange=newValue-item.value;return _objectSpread(_objectSpread({},item),{},{value:Math.round(newValue*100)/100,change:Math.round(newChange*100)/100,isPositive:newChange>=0});});};// 개별 상품 데이터 가져오기\nexport const fetchCommodityQuote=async title=>{try{console.log(\"\\uD83D\\uDD04 Fetching \".concat(title,\" from Yahoo Finance...\"));const symbol=COMMODITIES_SYMBOLS[title];if(!symbol){throw new Error(\"Unknown symbol: \".concat(title));}const url=\"\".concat(BASE_URL,\"/\").concat(symbol,\"?interval=1d&range=1d\");console.log(\"\\uD83D\\uDD17 URL: \".concat(url));const data=await fetchWithProxy(url);if(!data){throw new Error('Failed to fetch data');}// JSON 파싱 시도\nlet jsonData;try{jsonData=JSON.parse(data);}catch(error){console.log('❌ Failed to parse JSON, using dummy data');throw new Error('Invalid JSON response');}// Yahoo Finance API 응답 구조에서 데이터 추출\nif(jsonData.chart&&jsonData.chart.result&&jsonData.chart.result[0]){const result=jsonData.chart.result[0];const meta=result.meta;const indicators=result.indicators;if(meta&&indicators&&indicators.quote&&indicators.quote[0]){const quote=indicators.quote[0];const currentPrice=meta.regularMarketPrice;const previousClose=meta.previousClose;const change=currentPrice-previousClose;console.log(\"\\u2705 Successfully fetched \".concat(title,\": $\").concat(currentPrice,\" (\").concat(change>=0?'+':'').concat(change.toFixed(2),\")\"));return{title:title,value:currentPrice,change:Math.round(change*100)/100,isPositive:change>=0,symbol:symbol,isRealData:true,dataSource:'Yahoo Finance'};}}throw new Error(\"No valid data found for \".concat(title));}catch(error){console.error(\"\\u274C Error fetching \".concat(title,\":\"),error.message);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_COMMODITIES_DATA.find(item=>item.title===title);if(dummyData){console.log(\"\\uD83D\\uDCCA Using dummy data for \".concat(title));return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:COMMODITIES_SYMBOLS[title]||''});}throw error;}};// 모든 Commodities 데이터 가져오기\nexport const fetchAllCommoditiesData=async()=>{try{console.log('🔄 Fetching all Commodities data from Yahoo Finance...');const promises=[];// 모든 Commodities 심볼에 대해 병렬로 데이터 가져오기\nfor(const[title,symbol]of Object.entries(COMMODITIES_SYMBOLS)){promises.push(fetchCommodityQuote(title).then(data=>{console.log(\"\\u2705 \".concat(title,\": $\").concat(data.value,\" (\").concat(data.isRealData?'Real':'Dummy',\")\"));return data;}).catch(error=>{console.log(\"\\u274C Error fetching \".concat(title,\":\"),error.message);// 개별 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_COMMODITIES_DATA.find(item=>item.title===title);if(dummyData){console.log(\"\\uD83D\\uDCCA Using dummy data for \".concat(title));return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:symbol});}return null;}));}// 모든 요청 완료 대기\nconst results=await Promise.all(promises);// null 값 필터링\nconst validData=results.filter(data=>data!==null);console.log(\"\\u2705 Successfully loaded \".concat(validData.length,\"/\").concat(Object.keys(COMMODITIES_SYMBOLS).length,\" Commodities\"));// 실제 데이터가 있는지 확인\nconst realDataCount=validData.filter(item=>item.isRealData).length;if(realDataCount===0){console.log('⚠️ No real data available, showing dummy data');}else{console.log(\"\\u2705 \".concat(realDataCount,\" real Commodities loaded\"));}return validData;}catch(error){console.error('❌ Error fetching all Commodities data:',error);console.log('📊 Falling back to dummy data...');// 전체 실패 시 더미 데이터 반환\nreturn DUMMY_COMMODITIES_DATA.map(item=>_objectSpread(_objectSpread({},item),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:COMMODITIES_SYMBOLS[item.title]||''}));}};// 상품 데이터 가져오기 (실시간 시뮬레이션)\nexport const fetchCommodities=async()=>{try{// 실제 API 호출 대신 실시간 시뮬레이션 사용\nconst realTimeData=generateRealTimeData();return realTimeData;}catch(error){console.error('Error fetching commodities:',error);return DUMMY_COMMODITIES_DATA;}};","map":{"version":3,"names":["BASE_URL","COMMODITIES_SYMBOLS","YAHOO_FINANCE_URLS","PROXY_SERVICES","fetchWithProxy","url","proxyIndex","arguments","length","undefined","Error","proxyUrl","console","log","concat","substring","response","fetch","method","headers","timeout","ok","status","data","text","error","message","DUMMY_COMMODITIES_DATA","title","value","change","isPositive","symbol","generateRealTimeData","map","item","variation","Math","random","newValue","newChange","_objectSpread","round","fetchCommodityQuote","jsonData","JSON","parse","chart","result","meta","indicators","quote","currentPrice","regularMarketPrice","previousClose","toFixed","isRealData","dataSource","dummyData","find","fetchAllCommoditiesData","promises","Object","entries","push","then","catch","results","Promise","all","validData","filter","keys","realDataCount","fetchCommodities","realTimeData"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/commoditiesApi.js"],"sourcesContent":["// Yahoo Finance에서 상품 데이터를 가져오는 Commodities 서비스\r\nconst BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\r\n\r\n// Commodities 심볼 매핑 (Yahoo Finance 심볼)\r\nconst COMMODITIES_SYMBOLS = {\r\n  'Gold': 'GC=F',\r\n  'Silver': 'SI=F',\r\n  'Brent Crude': 'BZ=F',\r\n  'WTI': 'CL=F',\r\n  'Copper': 'HG=F',\r\n  'Natural Gas': 'NG=F',\r\n  'Soybean': 'ZS=F',\r\n  'Wheat': 'ZW=F',\r\n  'Corn': 'ZC=F'\r\n};\r\n\r\n// Yahoo Finance URL 매핑\r\nexport const YAHOO_FINANCE_URLS = {\r\n  'Gold': 'https://finance.yahoo.com/quote/GC=F',\r\n  'Silver': 'https://finance.yahoo.com/quote/SI=F',\r\n  'Brent Crude': 'https://finance.yahoo.com/quote/BZ=F',\r\n  'WTI': 'https://finance.yahoo.com/quote/CL=F',\r\n  'Copper': 'https://finance.yahoo.com/quote/HG=F',\r\n  'Natural Gas': 'https://finance.yahoo.com/quote/NG=F',\r\n  'Soybean': 'https://finance.yahoo.com/quote/ZS=F',\r\n  'Wheat': 'https://finance.yahoo.com/quote/ZW=F',\r\n  'Corn': 'https://finance.yahoo.com/quote/ZC=F'\r\n};\r\n\r\n// 프록시 서버들을 사용한 웹 스크래핑\r\nconst PROXY_SERVICES = [\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://corsproxy.io/?',\r\n  'https://thingproxy.freeboard.io/fetch/',\r\n  'https://cors.bridged.cc/',\r\n  'https://api.codetabs.com/v1/proxy?quest=',\r\n  'https://cors.eu.org/',\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  '' // 직접 호출도 시도\r\n];\r\n\r\n// 프록시를 사용한 웹 스크래핑\r\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\r\n  if (proxyIndex >= PROXY_SERVICES.length) {\r\n    throw new Error('All proxy attempts failed');\r\n  }\r\n\r\n  try {\r\n    const proxyUrl = PROXY_SERVICES[proxyIndex] + url;\r\n    console.log(`🔗 Trying proxy ${proxyIndex + 1}/${PROXY_SERVICES.length}: ${proxyUrl.substring(0, 50)}...`);\r\n    \r\n    const response = await fetch(proxyUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n        'Accept-Language': 'en-US,en;q=0.9',\r\n        'Accept-Encoding': 'gzip, deflate, br',\r\n        'Connection': 'keep-alive',\r\n        'Upgrade-Insecure-Requests': '1'\r\n      },\r\n      timeout: 10000 // 10초 타임아웃\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.text();\r\n    \r\n    if (data.length < 100) {\r\n      throw new Error('Response too short, likely an error page');\r\n    }\r\n    \r\n    console.log(`✅ Proxy ${proxyIndex + 1} successful! Data length: ${data.length} characters`);\r\n    return data;\r\n  } catch (error) {\r\n    console.log(`❌ Proxy ${proxyIndex + 1} failed: ${error.message}`);\r\n    return fetchWithProxy(url, proxyIndex + 1);\r\n  }\r\n};\r\n\r\n// 2024년 12월 기준 최신 더미 데이터 (실제 시장 상황 반영)\r\nconst DUMMY_COMMODITIES_DATA = [\r\n  // Precious Metals (귀금속)\r\n  { title: 'Gold', value: 2075.50, change: 12.30, isPositive: true, symbol: 'GC=F' },\r\n  { title: 'Silver', value: 24.85, change: -0.15, isPositive: false, symbol: 'SI=F' },\r\n  \r\n  // Energy (에너지)\r\n  { title: 'Brent Crude', value: 82.45, change: 1.25, isPositive: true, symbol: 'BZ=F' },\r\n  { title: 'WTI', value: 78.90, change: 1.10, isPositive: true, symbol: 'CL=F' },\r\n  { title: 'Natural Gas', value: 2.85, change: -0.08, isPositive: false, symbol: 'NG=F' },\r\n  \r\n  // Industrial Metals (산업용 금속)\r\n  { title: 'Copper', value: 3.95, change: 0.05, isPositive: true, symbol: 'HG=F' },\r\n  \r\n  // Agriculture (농산물)\r\n  { title: 'Soybean', value: 1250.75, change: -5.25, isPositive: false, symbol: 'ZS=F' },\r\n  { title: 'Wheat', value: 580.50, change: 8.75, isPositive: true, symbol: 'ZW=F' },\r\n  { title: 'Corn', value: 485.25, change: -2.50, isPositive: false, symbol: 'ZC=F' }\r\n];\r\n\r\n// 실시간 데이터 시뮬레이션 (더미 데이터에 약간의 변동 추가)\r\nconst generateRealTimeData = () => {\r\n  return DUMMY_COMMODITIES_DATA.map(item => {\r\n    // 약간의 랜덤 변동 추가 (±2% 범위)\r\n    const variation = (Math.random() - 0.5) * 0.04;\r\n    const newValue = item.value * (1 + variation);\r\n    const newChange = newValue - item.value;\r\n    \r\n    return {\r\n      ...item,\r\n      value: Math.round(newValue * 100) / 100,\r\n      change: Math.round(newChange * 100) / 100,\r\n      isPositive: newChange >= 0\r\n    };\r\n  });\r\n};\r\n\r\n// 개별 상품 데이터 가져오기\r\nexport const fetchCommodityQuote = async (title) => {\r\n  try {\r\n    console.log(`🔄 Fetching ${title} from Yahoo Finance...`);\r\n    \r\n    const symbol = COMMODITIES_SYMBOLS[title];\r\n    if (!symbol) {\r\n      throw new Error(`Unknown symbol: ${title}`);\r\n    }\r\n    \r\n    const url = `${BASE_URL}/${symbol}?interval=1d&range=1d`;\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const data = await fetchWithProxy(url);\r\n    \r\n    if (!data) {\r\n      throw new Error('Failed to fetch data');\r\n    }\r\n    \r\n    // JSON 파싱 시도\r\n    let jsonData;\r\n    try {\r\n      jsonData = JSON.parse(data);\r\n    } catch (error) {\r\n      console.log('❌ Failed to parse JSON, using dummy data');\r\n      throw new Error('Invalid JSON response');\r\n    }\r\n    \r\n    // Yahoo Finance API 응답 구조에서 데이터 추출\r\n    if (jsonData.chart && jsonData.chart.result && jsonData.chart.result[0]) {\r\n      const result = jsonData.chart.result[0];\r\n      const meta = result.meta;\r\n      const indicators = result.indicators;\r\n      \r\n      if (meta && indicators && indicators.quote && indicators.quote[0]) {\r\n        const quote = indicators.quote[0];\r\n        const currentPrice = meta.regularMarketPrice;\r\n        const previousClose = meta.previousClose;\r\n        const change = currentPrice - previousClose;\r\n        \r\n        console.log(`✅ Successfully fetched ${title}: $${currentPrice} (${change >= 0 ? '+' : ''}${change.toFixed(2)})`);\r\n        return {\r\n          title: title,\r\n          value: currentPrice,\r\n          change: Math.round(change * 100) / 100,\r\n          isPositive: change >= 0,\r\n          symbol: symbol,\r\n          isRealData: true,\r\n          dataSource: 'Yahoo Finance'\r\n        };\r\n      }\r\n    }\r\n    \r\n    throw new Error(`No valid data found for ${title}`);\r\n    \r\n  } catch (error) {\r\n    console.error(`❌ Error fetching ${title}:`, error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_COMMODITIES_DATA.find(item => item.title === title);\r\n    if (dummyData) {\r\n      console.log(`📊 Using dummy data for ${title}`);\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)',\r\n        symbol: COMMODITIES_SYMBOLS[title] || ''\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// 모든 Commodities 데이터 가져오기\r\nexport const fetchAllCommoditiesData = async () => {\r\n  try {\r\n    console.log('🔄 Fetching all Commodities data from Yahoo Finance...');\r\n    \r\n    const promises = [];\r\n    \r\n    // 모든 Commodities 심볼에 대해 병렬로 데이터 가져오기\r\n    for (const [title, symbol] of Object.entries(COMMODITIES_SYMBOLS)) {\r\n      promises.push(\r\n        fetchCommodityQuote(title)\r\n          .then(data => {\r\n            console.log(`✅ ${title}: $${data.value} (${data.isRealData ? 'Real' : 'Dummy'})`);\r\n            return data;\r\n          })\r\n          .catch(error => {\r\n            console.log(`❌ Error fetching ${title}:`, error.message);\r\n            // 개별 실패 시 더미 데이터 사용\r\n            const dummyData = DUMMY_COMMODITIES_DATA.find(item => item.title === title);\r\n            if (dummyData) {\r\n              console.log(`📊 Using dummy data for ${title}`);\r\n              return {\r\n                ...dummyData,\r\n                isRealData: false,\r\n                dataSource: 'Dummy Data (Error)',\r\n                symbol: symbol\r\n              };\r\n            }\r\n            return null;\r\n          })\r\n      );\r\n    }\r\n    \r\n    // 모든 요청 완료 대기\r\n    const results = await Promise.all(promises);\r\n    \r\n    // null 값 필터링\r\n    const validData = results.filter(data => data !== null);\r\n    \r\n    console.log(`✅ Successfully loaded ${validData.length}/${Object.keys(COMMODITIES_SYMBOLS).length} Commodities`);\r\n    \r\n    // 실제 데이터가 있는지 확인\r\n    const realDataCount = validData.filter(item => item.isRealData).length;\r\n    if (realDataCount === 0) {\r\n      console.log('⚠️ No real data available, showing dummy data');\r\n    } else {\r\n      console.log(`✅ ${realDataCount} real Commodities loaded`);\r\n    }\r\n    \r\n    return validData;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching all Commodities data:', error);\r\n    console.log('📊 Falling back to dummy data...');\r\n    \r\n    // 전체 실패 시 더미 데이터 반환\r\n    return DUMMY_COMMODITIES_DATA.map(item => ({\r\n      ...item,\r\n      isRealData: false,\r\n      dataSource: 'Dummy Data (Error)',\r\n      symbol: COMMODITIES_SYMBOLS[item.title] || ''\r\n    }));\r\n  }\r\n};\r\n\r\n// 상품 데이터 가져오기 (실시간 시뮬레이션)\r\nexport const fetchCommodities = async () => {\r\n  try {\r\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\r\n    const realTimeData = generateRealTimeData();\r\n    return realTimeData;\r\n  } catch (error) {\r\n    console.error('Error fetching commodities:', error);\r\n    return DUMMY_COMMODITIES_DATA;\r\n  }\r\n}; "],"mappings":"+HAAA;AACA,KAAM,CAAAA,QAAQ,CAAG,mDAAmD,CAEpE;AACA,KAAM,CAAAC,mBAAmB,CAAG,CAC1B,MAAM,CAAE,MAAM,CACd,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,MAAM,CACrB,KAAK,CAAE,MAAM,CACb,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,MAAM,CACrB,SAAS,CAAE,MAAM,CACjB,OAAO,CAAE,MAAM,CACf,MAAM,CAAE,MACV,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,kBAAkB,CAAG,CAChC,MAAM,CAAE,sCAAsC,CAC9C,QAAQ,CAAE,sCAAsC,CAChD,aAAa,CAAE,sCAAsC,CACrD,KAAK,CAAE,sCAAsC,CAC7C,QAAQ,CAAE,sCAAsC,CAChD,aAAa,CAAE,sCAAsC,CACrD,SAAS,CAAE,sCAAsC,CACjD,OAAO,CAAE,sCAAsC,CAC/C,MAAM,CAAE,sCACV,CAAC,CAED;AACA,KAAM,CAAAC,cAAc,CAAG,CACrB,qCAAqC,CACrC,wBAAwB,CACxB,wCAAwC,CACxC,0BAA0B,CAC1B,0CAA0C,CAC1C,sBAAsB,CACtB,sCAAsC,CACtC,EAAG;AAAA,CACJ,CAED;AACA,KAAM,CAAAC,cAAc,CAAG,cAAAA,CAAOC,GAAG,CAAqB,IAAnB,CAAAC,UAAU,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAC/C,GAAID,UAAU,EAAIH,cAAc,CAACK,MAAM,CAAE,CACvC,KAAM,IAAI,CAAAE,KAAK,CAAC,2BAA2B,CAAC,CAC9C,CAEA,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAGR,cAAc,CAACG,UAAU,CAAC,CAAGD,GAAG,CACjDO,OAAO,CAACC,GAAG,8BAAAC,MAAA,CAAoBR,UAAU,CAAG,CAAC,MAAAQ,MAAA,CAAIX,cAAc,CAACK,MAAM,OAAAM,MAAA,CAAKH,QAAQ,CAACI,SAAS,CAAC,CAAC,CAAE,EAAE,CAAC,OAAK,CAAC,CAE1G,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACN,QAAQ,CAAE,CACrCO,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,QAAQ,CAAE,kFAAkF,CAC5F,YAAY,CAAE,qHAAqH,CACnI,iBAAiB,CAAE,gBAAgB,CACnC,iBAAiB,CAAE,mBAAmB,CACtC,YAAY,CAAE,YAAY,CAC1B,2BAA2B,CAAE,GAC/B,CAAC,CACDC,OAAO,CAAE,KAAM;AACjB,CAAC,CAAC,CAEF,GAAI,CAACJ,QAAQ,CAACK,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAX,KAAK,wBAAAI,MAAA,CAAwBE,QAAQ,CAACM,MAAM,CAAE,CAAC,CAC3D,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAElC,GAAID,IAAI,CAACf,MAAM,CAAG,GAAG,CAAE,CACrB,KAAM,IAAI,CAAAE,KAAK,CAAC,0CAA0C,CAAC,CAC7D,CAEAE,OAAO,CAACC,GAAG,iBAAAC,MAAA,CAAYR,UAAU,CAAG,CAAC,+BAAAQ,MAAA,CAA6BS,IAAI,CAACf,MAAM,eAAa,CAAC,CAC3F,MAAO,CAAAe,IAAI,CACb,CAAE,MAAOE,KAAK,CAAE,CACdb,OAAO,CAACC,GAAG,iBAAAC,MAAA,CAAYR,UAAU,CAAG,CAAC,cAAAQ,MAAA,CAAYW,KAAK,CAACC,OAAO,CAAE,CAAC,CACjE,MAAO,CAAAtB,cAAc,CAACC,GAAG,CAAEC,UAAU,CAAG,CAAC,CAAC,CAC5C,CACF,CAAC,CAED;AACA,KAAM,CAAAqB,sBAAsB,CAAG,CAC7B;AACA,CAAEC,KAAK,CAAE,MAAM,CAAEC,KAAK,CAAE,OAAO,CAAEC,MAAM,CAAE,KAAK,CAAEC,UAAU,CAAE,IAAI,CAAEC,MAAM,CAAE,MAAO,CAAC,CAClF,CAAEJ,KAAK,CAAE,QAAQ,CAAEC,KAAK,CAAE,KAAK,CAAEC,MAAM,CAAE,CAAC,IAAI,CAAEC,UAAU,CAAE,KAAK,CAAEC,MAAM,CAAE,MAAO,CAAC,CAEnF;AACA,CAAEJ,KAAK,CAAE,aAAa,CAAEC,KAAK,CAAE,KAAK,CAAEC,MAAM,CAAE,IAAI,CAAEC,UAAU,CAAE,IAAI,CAAEC,MAAM,CAAE,MAAO,CAAC,CACtF,CAAEJ,KAAK,CAAE,KAAK,CAAEC,KAAK,CAAE,KAAK,CAAEC,MAAM,CAAE,IAAI,CAAEC,UAAU,CAAE,IAAI,CAAEC,MAAM,CAAE,MAAO,CAAC,CAC9E,CAAEJ,KAAK,CAAE,aAAa,CAAEC,KAAK,CAAE,IAAI,CAAEC,MAAM,CAAE,CAAC,IAAI,CAAEC,UAAU,CAAE,KAAK,CAAEC,MAAM,CAAE,MAAO,CAAC,CAEvF;AACA,CAAEJ,KAAK,CAAE,QAAQ,CAAEC,KAAK,CAAE,IAAI,CAAEC,MAAM,CAAE,IAAI,CAAEC,UAAU,CAAE,IAAI,CAAEC,MAAM,CAAE,MAAO,CAAC,CAEhF;AACA,CAAEJ,KAAK,CAAE,SAAS,CAAEC,KAAK,CAAE,OAAO,CAAEC,MAAM,CAAE,CAAC,IAAI,CAAEC,UAAU,CAAE,KAAK,CAAEC,MAAM,CAAE,MAAO,CAAC,CACtF,CAAEJ,KAAK,CAAE,OAAO,CAAEC,KAAK,CAAE,MAAM,CAAEC,MAAM,CAAE,IAAI,CAAEC,UAAU,CAAE,IAAI,CAAEC,MAAM,CAAE,MAAO,CAAC,CACjF,CAAEJ,KAAK,CAAE,MAAM,CAAEC,KAAK,CAAE,MAAM,CAAEC,MAAM,CAAE,CAAC,IAAI,CAAEC,UAAU,CAAE,KAAK,CAAEC,MAAM,CAAE,MAAO,CAAC,CACnF,CAED;AACA,KAAM,CAAAC,oBAAoB,CAAGA,CAAA,GAAM,CACjC,MAAO,CAAAN,sBAAsB,CAACO,GAAG,CAACC,IAAI,EAAI,CACxC;AACA,KAAM,CAAAC,SAAS,CAAG,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,EAAI,IAAI,CAC9C,KAAM,CAAAC,QAAQ,CAAGJ,IAAI,CAACN,KAAK,EAAI,CAAC,CAAGO,SAAS,CAAC,CAC7C,KAAM,CAAAI,SAAS,CAAGD,QAAQ,CAAGJ,IAAI,CAACN,KAAK,CAEvC,OAAAY,aAAA,CAAAA,aAAA,IACKN,IAAI,MACPN,KAAK,CAAEQ,IAAI,CAACK,KAAK,CAACH,QAAQ,CAAG,GAAG,CAAC,CAAG,GAAG,CACvCT,MAAM,CAAEO,IAAI,CAACK,KAAK,CAACF,SAAS,CAAG,GAAG,CAAC,CAAG,GAAG,CACzCT,UAAU,CAAES,SAAS,EAAI,CAAC,GAE9B,CAAC,CAAC,CACJ,CAAC,CAED;AACA,MAAO,MAAM,CAAAG,mBAAmB,CAAG,KAAO,CAAAf,KAAK,EAAK,CAClD,GAAI,CACFhB,OAAO,CAACC,GAAG,0BAAAC,MAAA,CAAgBc,KAAK,0BAAwB,CAAC,CAEzD,KAAM,CAAAI,MAAM,CAAG/B,mBAAmB,CAAC2B,KAAK,CAAC,CACzC,GAAI,CAACI,MAAM,CAAE,CACX,KAAM,IAAI,CAAAtB,KAAK,oBAAAI,MAAA,CAAoBc,KAAK,CAAE,CAAC,CAC7C,CAEA,KAAM,CAAAvB,GAAG,IAAAS,MAAA,CAAMd,QAAQ,MAAAc,MAAA,CAAIkB,MAAM,yBAAuB,CACxDpB,OAAO,CAACC,GAAG,sBAAAC,MAAA,CAAYT,GAAG,CAAE,CAAC,CAE7B,KAAM,CAAAkB,IAAI,CAAG,KAAM,CAAAnB,cAAc,CAACC,GAAG,CAAC,CAEtC,GAAI,CAACkB,IAAI,CAAE,CACT,KAAM,IAAI,CAAAb,KAAK,CAAC,sBAAsB,CAAC,CACzC,CAEA;AACA,GAAI,CAAAkC,QAAQ,CACZ,GAAI,CACFA,QAAQ,CAAGC,IAAI,CAACC,KAAK,CAACvB,IAAI,CAAC,CAC7B,CAAE,MAAOE,KAAK,CAAE,CACdb,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC,CACvD,KAAM,IAAI,CAAAH,KAAK,CAAC,uBAAuB,CAAC,CAC1C,CAEA;AACA,GAAIkC,QAAQ,CAACG,KAAK,EAAIH,QAAQ,CAACG,KAAK,CAACC,MAAM,EAAIJ,QAAQ,CAACG,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAAE,CACvE,KAAM,CAAAA,MAAM,CAAGJ,QAAQ,CAACG,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CACvC,KAAM,CAAAC,IAAI,CAAGD,MAAM,CAACC,IAAI,CACxB,KAAM,CAAAC,UAAU,CAAGF,MAAM,CAACE,UAAU,CAEpC,GAAID,IAAI,EAAIC,UAAU,EAAIA,UAAU,CAACC,KAAK,EAAID,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC,CAAE,CACjE,KAAM,CAAAA,KAAK,CAAGD,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC,CACjC,KAAM,CAAAC,YAAY,CAAGH,IAAI,CAACI,kBAAkB,CAC5C,KAAM,CAAAC,aAAa,CAAGL,IAAI,CAACK,aAAa,CACxC,KAAM,CAAAxB,MAAM,CAAGsB,YAAY,CAAGE,aAAa,CAE3C1C,OAAO,CAACC,GAAG,gCAAAC,MAAA,CAA2Bc,KAAK,QAAAd,MAAA,CAAMsC,YAAY,OAAAtC,MAAA,CAAKgB,MAAM,EAAI,CAAC,CAAG,GAAG,CAAG,EAAE,EAAAhB,MAAA,CAAGgB,MAAM,CAACyB,OAAO,CAAC,CAAC,CAAC,KAAG,CAAC,CAChH,MAAO,CACL3B,KAAK,CAAEA,KAAK,CACZC,KAAK,CAAEuB,YAAY,CACnBtB,MAAM,CAAEO,IAAI,CAACK,KAAK,CAACZ,MAAM,CAAG,GAAG,CAAC,CAAG,GAAG,CACtCC,UAAU,CAAED,MAAM,EAAI,CAAC,CACvBE,MAAM,CAAEA,MAAM,CACdwB,UAAU,CAAE,IAAI,CAChBC,UAAU,CAAE,eACd,CAAC,CACH,CACF,CAEA,KAAM,IAAI,CAAA/C,KAAK,4BAAAI,MAAA,CAA4Bc,KAAK,CAAE,CAAC,CAErD,CAAE,MAAOH,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,0BAAAX,MAAA,CAAqBc,KAAK,MAAKH,KAAK,CAACC,OAAO,CAAC,CAE1D;AACA,KAAM,CAAAgC,SAAS,CAAG/B,sBAAsB,CAACgC,IAAI,CAACxB,IAAI,EAAIA,IAAI,CAACP,KAAK,GAAKA,KAAK,CAAC,CAC3E,GAAI8B,SAAS,CAAE,CACb9C,OAAO,CAACC,GAAG,sCAAAC,MAAA,CAA4Bc,KAAK,CAAE,CAAC,CAC/C,OAAAa,aAAA,CAAAA,aAAA,IACKiB,SAAS,MACZF,UAAU,CAAE,KAAK,CACjBC,UAAU,CAAE,oBAAoB,CAChCzB,MAAM,CAAE/B,mBAAmB,CAAC2B,KAAK,CAAC,EAAI,EAAE,GAE5C,CAEA,KAAM,CAAAH,KAAK,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAmC,uBAAuB,CAAG,KAAAA,CAAA,GAAY,CACjD,GAAI,CACFhD,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC,CAErE,KAAM,CAAAgD,QAAQ,CAAG,EAAE,CAEnB;AACA,IAAK,KAAM,CAACjC,KAAK,CAAEI,MAAM,CAAC,EAAI,CAAA8B,MAAM,CAACC,OAAO,CAAC9D,mBAAmB,CAAC,CAAE,CACjE4D,QAAQ,CAACG,IAAI,CACXrB,mBAAmB,CAACf,KAAK,CAAC,CACvBqC,IAAI,CAAC1C,IAAI,EAAI,CACZX,OAAO,CAACC,GAAG,WAAAC,MAAA,CAAMc,KAAK,QAAAd,MAAA,CAAMS,IAAI,CAACM,KAAK,OAAAf,MAAA,CAAKS,IAAI,CAACiC,UAAU,CAAG,MAAM,CAAG,OAAO,KAAG,CAAC,CACjF,MAAO,CAAAjC,IAAI,CACb,CAAC,CAAC,CACD2C,KAAK,CAACzC,KAAK,EAAI,CACdb,OAAO,CAACC,GAAG,0BAAAC,MAAA,CAAqBc,KAAK,MAAKH,KAAK,CAACC,OAAO,CAAC,CACxD;AACA,KAAM,CAAAgC,SAAS,CAAG/B,sBAAsB,CAACgC,IAAI,CAACxB,IAAI,EAAIA,IAAI,CAACP,KAAK,GAAKA,KAAK,CAAC,CAC3E,GAAI8B,SAAS,CAAE,CACb9C,OAAO,CAACC,GAAG,sCAAAC,MAAA,CAA4Bc,KAAK,CAAE,CAAC,CAC/C,OAAAa,aAAA,CAAAA,aAAA,IACKiB,SAAS,MACZF,UAAU,CAAE,KAAK,CACjBC,UAAU,CAAE,oBAAoB,CAChCzB,MAAM,CAAEA,MAAM,GAElB,CACA,MAAO,KAAI,CACb,CAAC,CACL,CAAC,CACH,CAEA;AACA,KAAM,CAAAmC,OAAO,CAAG,KAAM,CAAAC,OAAO,CAACC,GAAG,CAACR,QAAQ,CAAC,CAE3C;AACA,KAAM,CAAAS,SAAS,CAAGH,OAAO,CAACI,MAAM,CAAChD,IAAI,EAAIA,IAAI,GAAK,IAAI,CAAC,CAEvDX,OAAO,CAACC,GAAG,+BAAAC,MAAA,CAA0BwD,SAAS,CAAC9D,MAAM,MAAAM,MAAA,CAAIgD,MAAM,CAACU,IAAI,CAACvE,mBAAmB,CAAC,CAACO,MAAM,gBAAc,CAAC,CAE/G;AACA,KAAM,CAAAiE,aAAa,CAAGH,SAAS,CAACC,MAAM,CAACpC,IAAI,EAAIA,IAAI,CAACqB,UAAU,CAAC,CAAChD,MAAM,CACtE,GAAIiE,aAAa,GAAK,CAAC,CAAE,CACvB7D,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC,CAC9D,CAAC,IAAM,CACLD,OAAO,CAACC,GAAG,WAAAC,MAAA,CAAM2D,aAAa,4BAA0B,CAAC,CAC3D,CAEA,MAAO,CAAAH,SAAS,CAElB,CAAE,MAAO7C,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,wCAAwC,CAAEA,KAAK,CAAC,CAC9Db,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC,CAE/C;AACA,MAAO,CAAAc,sBAAsB,CAACO,GAAG,CAACC,IAAI,EAAAM,aAAA,CAAAA,aAAA,IACjCN,IAAI,MACPqB,UAAU,CAAE,KAAK,CACjBC,UAAU,CAAE,oBAAoB,CAChCzB,MAAM,CAAE/B,mBAAmB,CAACkC,IAAI,CAACP,KAAK,CAAC,EAAI,EAAE,EAC7C,CAAC,CACL,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAA8C,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CAC1C,GAAI,CACF;AACA,KAAM,CAAAC,YAAY,CAAG1C,oBAAoB,CAAC,CAAC,CAC3C,MAAO,CAAA0C,YAAY,CACrB,CAAE,MAAOlD,KAAK,CAAE,CACdb,OAAO,CAACa,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnD,MAAO,CAAAE,sBAAsB,CAC/B,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}