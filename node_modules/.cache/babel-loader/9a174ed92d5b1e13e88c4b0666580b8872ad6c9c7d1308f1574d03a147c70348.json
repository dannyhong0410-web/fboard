{"ast":null,"code":"// Yahoo Finance API를 사용한 주식 데이터 서비스\nconst BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\nconst ALPHA_VANTAGE_URL = 'https://www.alphavantage.co/query';\n\n// 더미 데이터 (API 문제시 사용)\nconst DUMMY_STOCK_DATA = [{\n  symbol: '^GSPC',\n  price: 4567.89,\n  // 현재 가격 (2024년 말 대비 하락)\n  change: 56.78,\n  changePercent: 1.23,\n  previousClose: 4511.11,\n  open: 4520.00,\n  high: 4580.00,\n  low: 4510.00,\n  volume: 2345678901,\n  currency: 'USD',\n  threeMonthReturn: 8.45,\n  ytdReturn: -22.33 // 5,881.63 → 4,567.89 = -22.33%\n}, {\n  symbol: '^IXIC',\n  price: 14234.56,\n  change: -64.32,\n  changePercent: -0.45,\n  previousClose: 14298.88,\n  open: 14300.00,\n  high: 14350.00,\n  low: 14200.00,\n  volume: 3456789012,\n  currency: 'USD',\n  threeMonthReturn: 15.67,\n  ytdReturn: -18.76 // 2024년 말 대비 하락\n}, {\n  symbol: '^DJI',\n  price: 35678.90,\n  change: 278.45,\n  changePercent: 0.78,\n  previousClose: 35400.45,\n  open: 35450.00,\n  high: 35800.00,\n  low: 35400.00,\n  volume: 4567890123,\n  currency: 'USD',\n  threeMonthReturn: 6.78,\n  ytdReturn: -15.43 // 2024년 말 대비 하락\n}, {\n  symbol: '^VIX',\n  price: 18.45,\n  change: -0.40,\n  changePercent: -2.1,\n  previousClose: 18.85,\n  open: 19.00,\n  high: 19.20,\n  low: 18.30,\n  volume: 5678901234,\n  currency: 'USD',\n  threeMonthReturn: -12.34,\n  ytdReturn: 45.67 // VIX는 시장 불안시 상승하므로 양수\n}, {\n  symbol: '^KS11',\n  price: 2567.89,\n  change: 23.45,\n  changePercent: 0.92,\n  previousClose: 2544.44,\n  open: 2550.00,\n  high: 2580.00,\n  low: 2540.00,\n  volume: 6789012345,\n  currency: 'KRW',\n  threeMonthReturn: 5.43,\n  ytdReturn: -12.34 // 2024년 말 대비 하락\n}, {\n  symbol: '^KQ11',\n  price: 856.78,\n  change: -2.92,\n  changePercent: -0.34,\n  previousClose: 859.70,\n  open: 860.00,\n  high: 865.00,\n  low: 855.00,\n  volume: 7890123456,\n  currency: 'KRW',\n  threeMonthReturn: 3.21,\n  ytdReturn: -18.76 // 2024년 말 대비 하락\n}, {\n  symbol: '^STOXX50E',\n  price: 5338.58,\n  change: -9.12,\n  changePercent: -0.17,\n  previousClose: 5347.70,\n  open: 5350.00,\n  high: 5360.00,\n  low: 5330.00,\n  volume: 1234567890,\n  currency: 'EUR',\n  threeMonthReturn: 4.56,\n  ytdReturn: -8.90\n}, {\n  symbol: 'MXWO.SW',\n  price: 1578.49,\n  change: -1.26,\n  changePercent: -0.08,\n  previousClose: 1579.75,\n  open: 1580.00,\n  high: 1585.00,\n  low: 1575.00,\n  volume: 987654321,\n  currency: 'USD',\n  threeMonthReturn: 6.78,\n  ytdReturn: -12.45\n}, {\n  symbol: 'MXEF',\n  price: 892.34,\n  change: 5.67,\n  changePercent: 0.64,\n  previousClose: 886.67,\n  open: 887.00,\n  high: 895.00,\n  low: 885.00,\n  volume: 876543210,\n  currency: 'USD',\n  threeMonthReturn: 2.34,\n  ytdReturn: -15.67\n}, {\n  symbol: '^N225',\n  price: 41820.48,\n  change: 760.85,\n  changePercent: 1.85,\n  previousClose: 41059.63,\n  open: 41100.00,\n  high: 42000.00,\n  low: 41000.00,\n  volume: 765432109,\n  currency: 'JPY',\n  threeMonthReturn: 12.34,\n  ytdReturn: 8.76\n}, {\n  symbol: '^HSI',\n  price: 24906.81,\n  change: 47.19,\n  changePercent: 0.19,\n  previousClose: 24859.62,\n  open: 24850.00,\n  high: 25000.00,\n  low: 24800.00,\n  volume: 654321098,\n  currency: 'HKD',\n  threeMonthReturn: -3.45,\n  ytdReturn: -18.90\n}, {\n  symbol: '^HSCE',\n  price: 8765.43,\n  change: -23.45,\n  changePercent: -0.27,\n  previousClose: 8788.88,\n  open: 8790.00,\n  high: 8800.00,\n  low: 8750.00,\n  volume: 543210987,\n  currency: 'HKD',\n  threeMonthReturn: -5.67,\n  ytdReturn: -22.34\n}, {\n  symbol: '000300.SS',\n  price: 3647.55,\n  change: 12.45,\n  changePercent: 0.34,\n  previousClose: 3635.10,\n  open: 3630.00,\n  high: 3650.00,\n  low: 3620.00,\n  volume: 432109876,\n  currency: 'CNY',\n  threeMonthReturn: -2.34,\n  ytdReturn: -25.67\n}, {\n  symbol: '^BSESN',\n  price: 80325.71,\n  change: 470.59,\n  changePercent: 0.59,\n  previousClose: 79855.12,\n  open: 79900.00,\n  high: 80500.00,\n  low: 79800.00,\n  volume: 321098765,\n  currency: 'INR',\n  threeMonthReturn: 8.90,\n  ytdReturn: 12.34\n}, {\n  symbol: '^MXX',\n  price: 58070.17,\n  change: -192.83,\n  changePercent: -0.33,\n  previousClose: 58263.00,\n  open: 58300.00,\n  high: 58500.00,\n  low: 58000.00,\n  volume: 210987654,\n  currency: 'MXN',\n  threeMonthReturn: 3.21,\n  ytdReturn: -8.76\n}];\n\n// 더미 차트 데이터 생성\nconst generateDummyChartData = (symbol, range = '1mo') => {\n  var _DUMMY_STOCK_DATA$fin;\n  const days = range === '1d' ? 1 : range === '5d' ? 5 : range === '1mo' ? 30 : 90;\n  const data = [];\n\n  // 2024년 12월 31일 기준 가격 설정\n  const basePrices = {\n    '^GSPC': 5881.63,\n    // S&P 500: 2024년 말 종가\n    '^IXIC': 17500.00,\n    // NASDAQ: 2024년 말 종가\n    '^DJI': 42200.00,\n    // DOW JONES: 2024년 말 종가\n    '^VIX': 12.67,\n    // VIX: 2024년 말 종가\n    '^KS11': 2930.00,\n    // KOSPI: 2024년 말 종가\n    '^KQ11': 1050.00,\n    // KOSDAQ: 2024년 말 종가\n    '^STOXX50E': 5860.00,\n    // Eurostoxx50: 2024년 말 종가\n    'MXWO.SW': 1800.00,\n    // MSCI World: 2024년 말 종가\n    'MXEF': 1050.00,\n    // MSCI Emerging Markets: 2024년 말 종가\n    '^N225': 38400.00,\n    // Nikkei 225: 2024년 말 종가\n    '^HSI': 30700.00,\n    // Hang Seng Index: 2024년 말 종가\n    '^HSCE': 11200.00,\n    // Hang Seng China Enterprises: 2024년 말 종가\n    '000300.SS': 4900.00,\n    // CSI 300: 2024년 말 종가\n    '^BSESN': 71500.00,\n    // SENSEX: 2024년 말 종가\n    '^MXX': 63600.00 // MEXBOL: 2024년 말 종가\n  };\n  const basePrice = basePrices[symbol] || 100;\n  const currentPrice = ((_DUMMY_STOCK_DATA$fin = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol)) === null || _DUMMY_STOCK_DATA$fin === void 0 ? void 0 : _DUMMY_STOCK_DATA$fin.price) || basePrice;\n  for (let i = days - 1; i >= 0; i--) {\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n\n    // 시간에 따른 가격 변화 (2024년 말에서 현재까지 하락 추세)\n    const timeProgress = i / (days - 1); // 0 = 현재, 1 = 과거\n    const trendFactor = 1 + timeProgress * 0.3; // 과거로 갈수록 높은 가격\n\n    // 랜덤한 가격 변동 생성 (더 현실적인 범위)\n    const variation = (Math.random() - 0.5) * 0.015; // ±0.75% 변동\n    const price = basePrice * trendFactor * (1 + variation);\n\n    // OHLC 데이터 생성\n    const open = price * (1 + (Math.random() - 0.5) * 0.008);\n    const high = Math.max(open, price) * (1 + Math.random() * 0.005);\n    const low = Math.min(open, price) * (1 - Math.random() * 0.005);\n    const close = price;\n    data.push({\n      date: date.toLocaleDateString('ko-KR'),\n      timestamp: Math.floor(date.getTime() / 1000),\n      open: Math.round(open * 100) / 100,\n      high: Math.round(high * 100) / 100,\n      low: Math.round(low * 100) / 100,\n      close: Math.round(close * 100) / 100,\n      volume: Math.floor(Math.random() * 1000000) + 100000\n    });\n  }\n  return data;\n};\n\n// CORS 프록시 URL들 (여러 개 시도)\nconst CORS_PROXIES = ['https://cors-anywhere.herokuapp.com/', 'https://api.allorigins.win/raw?url=', 'https://corsproxy.io/?', '' // 직접 호출도 시도\n];\n\n// 프록시를 사용한 API 호출\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\n  if (proxyIndex >= CORS_PROXIES.length) {\n    throw new Error('All proxy attempts failed');\n  }\n  try {\n    const proxyUrl = CORS_PROXIES[proxyIndex] + url;\n    const response = await fetch(proxyUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response;\n  } catch (error) {\n    console.log(`Proxy ${proxyIndex} failed, trying next...`);\n    return fetchWithProxy(url, proxyIndex + 1);\n  }\n};\n\n// 수익률 계산 함수\nconst calculateReturns = (currentPrice, historicalPrice) => {\n  if (!historicalPrice || historicalPrice <= 0) return 0;\n  return (currentPrice - historicalPrice) / historicalPrice * 100;\n};\n\n// Alpha Vantage API를 사용한 주식 데이터 가져오기 (대체 방법)\nexport const fetchStockDataAlphaVantage = async symbol => {\n  try {\n    // 무료 API 키 (실제 사용시에는 본인의 API 키를 사용해야 함)\n    const API_KEY = 'demo'; // 실제 사용시 본인의 API 키로 교체\n    const url = `${ALPHA_VANTAGE_URL}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${API_KEY}`;\n    const response = await fetch(url);\n    const data = await response.json();\n    if (data['Error Message']) {\n      throw new Error(data['Error Message']);\n    }\n    const quote = data['Global Quote'];\n    if (!quote) {\n      throw new Error('No quote data available');\n    }\n    return {\n      symbol: symbol,\n      price: parseFloat(quote['05. price']) || 0,\n      change: parseFloat(quote['09. change']) || 0,\n      changePercent: parseFloat(quote['10. change percent'].replace('%', '')) || 0,\n      previousClose: parseFloat(quote['08. previous close']) || 0,\n      open: parseFloat(quote['02. open']) || 0,\n      high: parseFloat(quote['03. high']) || 0,\n      low: parseFloat(quote['04. low']) || 0,\n      volume: parseInt(quote['06. volume']) || 0,\n      currency: 'USD'\n    };\n  } catch (error) {\n    console.error('Error fetching Alpha Vantage data:', error);\n    throw error;\n  }\n};\n\n// 주식 심볼별 차트 데이터 가져오기\nexport const fetchStockChartData = async (symbol, range = '1mo', interval = '1d') => {\n  try {\n    const url = `${BASE_URL}/${symbol}?interval=${interval}&range=${range}`;\n    const response = await fetchWithProxy(url);\n    const data = await response.json();\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\n      throw new Error('No chart data available');\n    }\n    const result = data.chart.result[0];\n    const timestamps = result.timestamp;\n    const quotes = result.indicators.quote[0];\n\n    // 데이터 정리 및 변환\n    const chartData = timestamps.map((timestamp, index) => {\n      const date = new Date(timestamp * 1000);\n      return {\n        date: date.toLocaleDateString('ko-KR'),\n        timestamp: timestamp,\n        open: quotes.open[index] || 0,\n        high: quotes.high[index] || 0,\n        low: quotes.low[index] || 0,\n        close: quotes.close[index] || 0,\n        volume: quotes.volume[index] || 0\n      };\n    }).filter(item => item.close > 0); // 유효한 데이터만 필터링\n\n    return chartData;\n  } catch (error) {\n    console.error('Error fetching stock data:', error);\n    // API 실패시 더미 데이터 사용\n    console.log('Using dummy data as fallback...');\n    return generateDummyChartData(symbol, range);\n  }\n};\n\n// 주식 실시간 가격 정보 가져오기 (수익률 포함)\nexport const fetchStockQuote = async symbol => {\n  try {\n    const url = `${BASE_URL}/${symbol}?interval=1m&range=1d`;\n    const response = await fetchWithProxy(url);\n    const data = await response.json();\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\n      throw new Error('No quote data available');\n    }\n    const result = data.chart.result[0];\n    const meta = result.meta;\n    const quotes = result.indicators.quote[0];\n\n    // 가장 최근 데이터\n    const latestIndex = quotes.close.length - 1;\n    const currentPrice = meta.regularMarketPrice || quotes.close[latestIndex] || 0;\n    return {\n      symbol: symbol,\n      price: currentPrice,\n      change: meta.regularMarketPrice - meta.previousClose || 0,\n      changePercent: (meta.regularMarketPrice - meta.previousClose) / meta.previousClose * 100 || 0,\n      previousClose: meta.previousClose || 0,\n      open: quotes.open[latestIndex] || 0,\n      high: quotes.high[latestIndex] || 0,\n      low: quotes.low[latestIndex] || 0,\n      volume: quotes.volume[latestIndex] || 0,\n      marketCap: meta.marketCap || 0,\n      currency: meta.currency || 'USD'\n    };\n  } catch (error) {\n    console.error('Error fetching stock quote:', error);\n    // Yahoo Finance API 실패시 Alpha Vantage 시도\n    try {\n      console.log('Trying Alpha Vantage as fallback...');\n      return await fetchStockDataAlphaVantage(symbol);\n    } catch (fallbackError) {\n      console.error('Fallback API also failed:', fallbackError);\n      // 모든 API 실패시 더미 데이터 사용\n      console.log('Using dummy data as final fallback...');\n      const dummyData = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol);\n      if (dummyData) {\n        return dummyData;\n      }\n      throw error;\n    }\n  }\n};\n\n// 주식 수익률 데이터 가져오기 (3개월, YTD)\nexport const fetchStockReturns = async symbol => {\n  try {\n    var _threeMonthData$chart, _threeMonthData$chart2, _ytdData$chart, _ytdData$chart$result;\n    // 3개월 데이터\n    const threeMonthUrl = `${BASE_URL}/${symbol}?interval=1d&range=3mo`;\n    const threeMonthResponse = await fetchWithProxy(threeMonthUrl);\n    const threeMonthData = await threeMonthResponse.json();\n\n    // YTD 데이터 (작년 12월 31일부터)\n    const currentYear = new Date().getFullYear();\n    const lastYearEnd = new Date(currentYear - 1, 11, 31); // 작년 12월 31일\n    const ytdDays = Math.ceil((new Date() - lastYearEnd) / (1000 * 60 * 60 * 24));\n    const ytdUrl = `${BASE_URL}/${symbol}?interval=1d&range=${ytdDays}d`;\n    const ytdResponse = await fetchWithProxy(ytdUrl);\n    const ytdData = await ytdResponse.json();\n    if (!((_threeMonthData$chart = threeMonthData.chart) !== null && _threeMonthData$chart !== void 0 && (_threeMonthData$chart2 = _threeMonthData$chart.result) !== null && _threeMonthData$chart2 !== void 0 && _threeMonthData$chart2[0]) || !((_ytdData$chart = ytdData.chart) !== null && _ytdData$chart !== void 0 && (_ytdData$chart$result = _ytdData$chart.result) !== null && _ytdData$chart$result !== void 0 && _ytdData$chart$result[0])) {\n      throw new Error('No return data available');\n    }\n    const threeMonthResult = threeMonthData.chart.result[0];\n    const ytdResult = ytdData.chart.result[0];\n    const threeMonthQuotes = threeMonthResult.indicators.quote[0];\n    const ytdQuotes = ytdResult.indicators.quote[0];\n\n    // 3개월 전 가격 (90일 전)\n    const threeMonthPrice = threeMonthQuotes.close[0] || 0;\n\n    // YTD 시작 가격 (작년 12월 31일)\n    const ytdPrice = ytdQuotes.close[0] || 0;\n\n    // 현재 가격\n    const currentPrice = threeMonthQuotes.close[threeMonthQuotes.close.length - 1] || 0;\n    return {\n      threeMonthReturn: calculateReturns(currentPrice, threeMonthPrice),\n      ytdReturn: calculateReturns(currentPrice, ytdPrice)\n    };\n  } catch (error) {\n    console.error('Error fetching stock returns:', error);\n    // API 실패시 더미 데이터 사용\n    const dummyData = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol);\n    if (dummyData) {\n      return {\n        threeMonthReturn: dummyData.threeMonthReturn,\n        ytdReturn: dummyData.ytdReturn\n      };\n    }\n    return {\n      threeMonthReturn: 0,\n      ytdReturn: 0\n    };\n  }\n};\n\n// 여러 주식 심볼의 실시간 데이터 가져오기 (수익률 포함)\nexport const fetchMultipleStockQuotes = async symbols => {\n  try {\n    const promises = symbols.map(async symbol => {\n      try {\n        const [quoteData, returnsData] = await Promise.all([fetchStockQuote(symbol), fetchStockReturns(symbol)]);\n        return {\n          ...quoteData,\n          ...returnsData\n        };\n      } catch (error) {\n        console.error(`Failed to fetch ${symbol}:`, error);\n        // API 실패시 더미 데이터 사용\n        const dummyData = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol);\n        if (dummyData) {\n          console.log(`Using dummy data for ${symbol}`);\n          return dummyData;\n        }\n        return {\n          symbol: symbol,\n          error: true,\n          message: error.message\n        };\n      }\n    });\n    const results = await Promise.all(promises);\n    return results;\n  } catch (error) {\n    console.error('Error fetching multiple stock quotes:', error);\n    // 전체 실패시 더미 데이터 반환\n    console.log('All APIs failed, using dummy data...');\n    return DUMMY_STOCK_DATA;\n  }\n};\n\n// Yahoo Finance API 테스트 함수\nexport const testYahooFinanceStockAPI = async () => {\n  try {\n    console.log('🧪 Testing Yahoo Finance Stock API...');\n\n    // 간단한 테스트: S&P 500 데이터 가져오기\n    const testSymbol = '^GSPC';\n    const testUrl = `${BASE_URL}/${testSymbol}?interval=1d&range=1d`;\n    console.log(`🔗 Testing URL: ${testUrl}`);\n\n    // 방법 1: 직접 호출\n    try {\n      const response = await fetch(testUrl, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n        }\n      });\n      console.log(`📊 Direct response status: ${response.status}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(`📊 Direct response data keys:`, Object.keys(data));\n      if (data && data.chart && data.chart.result && data.chart.result[0]) {\n        const result = data.chart.result[0];\n        const meta = result.meta;\n        console.log(`📊 Meta data:`, meta);\n        if (meta.regularMarketPrice) {\n          console.log(`✅ Yahoo Finance Stock API test successful! S&P 500: ${meta.regularMarketPrice}`);\n          return {\n            success: true,\n            method: 'Direct',\n            price: meta.regularMarketPrice\n          };\n        }\n      }\n    } catch (directError) {\n      console.log(`❌ Direct API call failed:`, directError.message);\n    }\n\n    // 방법 2: 프록시를 통한 호출\n    try {\n      const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(testUrl)}`;\n      const response = await fetch(proxyUrl);\n      console.log(`📊 Proxy response status: ${response.status}`);\n      if (!response.ok) {\n        throw new Error(`Proxy HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(`📊 Proxy response data keys:`, Object.keys(data));\n      if (data && data.chart && data.chart.result && data.chart.result[0]) {\n        const result = data.chart.result[0];\n        const meta = result.meta;\n        console.log(`📊 Proxy meta data:`, meta);\n        if (meta.regularMarketPrice) {\n          console.log(`✅ Yahoo Finance Stock API test successful via proxy! S&P 500: ${meta.regularMarketPrice}`);\n          return {\n            success: true,\n            method: 'Proxy',\n            price: meta.regularMarketPrice\n          };\n        }\n      }\n    } catch (proxyError) {\n      console.log(`❌ Proxy API call failed:`, proxyError.message);\n    }\n    console.log(`❌ All methods failed for stock API test`);\n    return {\n      success: false,\n      method: 'None',\n      price: null\n    };\n  } catch (error) {\n    console.error(`❌ Yahoo Finance Stock API test failed:`, error);\n    return {\n      success: false,\n      method: 'Error',\n      price: null\n    };\n  }\n};\n\n// 인기 주식 심볼들\nexport const POPULAR_STOCKS = ['^GSPC',\n// S&P 500\n'^IXIC',\n// NASDAQ\n'^DJI',\n// DOW JONES\n'^VIX',\n// VIX\n'^KS11',\n// KOSPI\n'^KQ11',\n// KOSDAQ\n'^STOXX50E',\n// Eurostoxx50\n'MXWO.SW',\n// MSCI World\n'MXEF',\n// MSCI Emerging Markets\n'^N225',\n// Nikkei 225\n'^HSI',\n// Hang Seng Index\n'^HSCE',\n// Hang Seng China Enterprises\n'000300.SS',\n// CSI 300\n'^BSESN',\n// SENSEX\n'^MXX' // MEXBOL\n];","map":{"version":3,"names":["BASE_URL","ALPHA_VANTAGE_URL","DUMMY_STOCK_DATA","symbol","price","change","changePercent","previousClose","open","high","low","volume","currency","threeMonthReturn","ytdReturn","generateDummyChartData","range","_DUMMY_STOCK_DATA$fin","days","data","basePrices","basePrice","currentPrice","find","stock","i","date","Date","setDate","getDate","timeProgress","trendFactor","variation","Math","random","max","min","close","push","toLocaleDateString","timestamp","floor","getTime","round","CORS_PROXIES","fetchWithProxy","url","proxyIndex","length","Error","proxyUrl","response","fetch","method","headers","ok","status","error","console","log","calculateReturns","historicalPrice","fetchStockDataAlphaVantage","API_KEY","json","quote","parseFloat","replace","parseInt","fetchStockChartData","interval","chart","result","timestamps","quotes","indicators","chartData","map","index","filter","item","fetchStockQuote","meta","latestIndex","regularMarketPrice","marketCap","fallbackError","dummyData","fetchStockReturns","_threeMonthData$chart","_threeMonthData$chart2","_ytdData$chart","_ytdData$chart$result","threeMonthUrl","threeMonthResponse","threeMonthData","currentYear","getFullYear","lastYearEnd","ytdDays","ceil","ytdUrl","ytdResponse","ytdData","threeMonthResult","ytdResult","threeMonthQuotes","ytdQuotes","threeMonthPrice","ytdPrice","fetchMultipleStockQuotes","symbols","promises","quoteData","returnsData","Promise","all","message","results","testYahooFinanceStockAPI","testSymbol","testUrl","Object","keys","success","directError","encodeURIComponent","proxyError","POPULAR_STOCKS"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/stockApi.js"],"sourcesContent":["// Yahoo Finance API를 사용한 주식 데이터 서비스\r\nconst BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\r\nconst ALPHA_VANTAGE_URL = 'https://www.alphavantage.co/query';\r\n\r\n// 더미 데이터 (API 문제시 사용)\r\nconst DUMMY_STOCK_DATA = [\r\n  {\r\n    symbol: '^GSPC',\r\n    price: 4567.89, // 현재 가격 (2024년 말 대비 하락)\r\n    change: 56.78,\r\n    changePercent: 1.23,\r\n    previousClose: 4511.11,\r\n    open: 4520.00,\r\n    high: 4580.00,\r\n    low: 4510.00,\r\n    volume: 2345678901,\r\n    currency: 'USD',\r\n    threeMonthReturn: 8.45,\r\n    ytdReturn: -22.33 // 5,881.63 → 4,567.89 = -22.33%\r\n  },\r\n  {\r\n    symbol: '^IXIC',\r\n    price: 14234.56,\r\n    change: -64.32,\r\n    changePercent: -0.45,\r\n    previousClose: 14298.88,\r\n    open: 14300.00,\r\n    high: 14350.00,\r\n    low: 14200.00,\r\n    volume: 3456789012,\r\n    currency: 'USD',\r\n    threeMonthReturn: 15.67,\r\n    ytdReturn: -18.76 // 2024년 말 대비 하락\r\n  },\r\n  {\r\n    symbol: '^DJI',\r\n    price: 35678.90,\r\n    change: 278.45,\r\n    changePercent: 0.78,\r\n    previousClose: 35400.45,\r\n    open: 35450.00,\r\n    high: 35800.00,\r\n    low: 35400.00,\r\n    volume: 4567890123,\r\n    currency: 'USD',\r\n    threeMonthReturn: 6.78,\r\n    ytdReturn: -15.43 // 2024년 말 대비 하락\r\n  },\r\n  {\r\n    symbol: '^VIX',\r\n    price: 18.45,\r\n    change: -0.40,\r\n    changePercent: -2.1,\r\n    previousClose: 18.85,\r\n    open: 19.00,\r\n    high: 19.20,\r\n    low: 18.30,\r\n    volume: 5678901234,\r\n    currency: 'USD',\r\n    threeMonthReturn: -12.34,\r\n    ytdReturn: 45.67 // VIX는 시장 불안시 상승하므로 양수\r\n  },\r\n  {\r\n    symbol: '^KS11',\r\n    price: 2567.89,\r\n    change: 23.45,\r\n    changePercent: 0.92,\r\n    previousClose: 2544.44,\r\n    open: 2550.00,\r\n    high: 2580.00,\r\n    low: 2540.00,\r\n    volume: 6789012345,\r\n    currency: 'KRW',\r\n    threeMonthReturn: 5.43,\r\n    ytdReturn: -12.34 // 2024년 말 대비 하락\r\n  },\r\n  {\r\n    symbol: '^KQ11',\r\n    price: 856.78,\r\n    change: -2.92,\r\n    changePercent: -0.34,\r\n    previousClose: 859.70,\r\n    open: 860.00,\r\n    high: 865.00,\r\n    low: 855.00,\r\n    volume: 7890123456,\r\n    currency: 'KRW',\r\n    threeMonthReturn: 3.21,\r\n    ytdReturn: -18.76 // 2024년 말 대비 하락\r\n  },\r\n  {\r\n    symbol: '^STOXX50E',\r\n    price: 5338.58,\r\n    change: -9.12,\r\n    changePercent: -0.17,\r\n    previousClose: 5347.70,\r\n    open: 5350.00,\r\n    high: 5360.00,\r\n    low: 5330.00,\r\n    volume: 1234567890,\r\n    currency: 'EUR',\r\n    threeMonthReturn: 4.56,\r\n    ytdReturn: -8.90\r\n  },\r\n  {\r\n    symbol: 'MXWO.SW',\r\n    price: 1578.49,\r\n    change: -1.26,\r\n    changePercent: -0.08,\r\n    previousClose: 1579.75,\r\n    open: 1580.00,\r\n    high: 1585.00,\r\n    low: 1575.00,\r\n    volume: 987654321,\r\n    currency: 'USD',\r\n    threeMonthReturn: 6.78,\r\n    ytdReturn: -12.45\r\n  },\r\n  {\r\n    symbol: 'MXEF',\r\n    price: 892.34,\r\n    change: 5.67,\r\n    changePercent: 0.64,\r\n    previousClose: 886.67,\r\n    open: 887.00,\r\n    high: 895.00,\r\n    low: 885.00,\r\n    volume: 876543210,\r\n    currency: 'USD',\r\n    threeMonthReturn: 2.34,\r\n    ytdReturn: -15.67\r\n  },\r\n  {\r\n    symbol: '^N225',\r\n    price: 41820.48,\r\n    change: 760.85,\r\n    changePercent: 1.85,\r\n    previousClose: 41059.63,\r\n    open: 41100.00,\r\n    high: 42000.00,\r\n    low: 41000.00,\r\n    volume: 765432109,\r\n    currency: 'JPY',\r\n    threeMonthReturn: 12.34,\r\n    ytdReturn: 8.76\r\n  },\r\n  {\r\n    symbol: '^HSI',\r\n    price: 24906.81,\r\n    change: 47.19,\r\n    changePercent: 0.19,\r\n    previousClose: 24859.62,\r\n    open: 24850.00,\r\n    high: 25000.00,\r\n    low: 24800.00,\r\n    volume: 654321098,\r\n    currency: 'HKD',\r\n    threeMonthReturn: -3.45,\r\n    ytdReturn: -18.90\r\n  },\r\n  {\r\n    symbol: '^HSCE',\r\n    price: 8765.43,\r\n    change: -23.45,\r\n    changePercent: -0.27,\r\n    previousClose: 8788.88,\r\n    open: 8790.00,\r\n    high: 8800.00,\r\n    low: 8750.00,\r\n    volume: 543210987,\r\n    currency: 'HKD',\r\n    threeMonthReturn: -5.67,\r\n    ytdReturn: -22.34\r\n  },\r\n  {\r\n    symbol: '000300.SS',\r\n    price: 3647.55,\r\n    change: 12.45,\r\n    changePercent: 0.34,\r\n    previousClose: 3635.10,\r\n    open: 3630.00,\r\n    high: 3650.00,\r\n    low: 3620.00,\r\n    volume: 432109876,\r\n    currency: 'CNY',\r\n    threeMonthReturn: -2.34,\r\n    ytdReturn: -25.67\r\n  },\r\n  {\r\n    symbol: '^BSESN',\r\n    price: 80325.71,\r\n    change: 470.59,\r\n    changePercent: 0.59,\r\n    previousClose: 79855.12,\r\n    open: 79900.00,\r\n    high: 80500.00,\r\n    low: 79800.00,\r\n    volume: 321098765,\r\n    currency: 'INR',\r\n    threeMonthReturn: 8.90,\r\n    ytdReturn: 12.34\r\n  },\r\n  {\r\n    symbol: '^MXX',\r\n    price: 58070.17,\r\n    change: -192.83,\r\n    changePercent: -0.33,\r\n    previousClose: 58263.00,\r\n    open: 58300.00,\r\n    high: 58500.00,\r\n    low: 58000.00,\r\n    volume: 210987654,\r\n    currency: 'MXN',\r\n    threeMonthReturn: 3.21,\r\n    ytdReturn: -8.76\r\n  }\r\n];\r\n\r\n// 더미 차트 데이터 생성\r\nconst generateDummyChartData = (symbol, range = '1mo') => {\r\n  const days = range === '1d' ? 1 : range === '5d' ? 5 : range === '1mo' ? 30 : 90;\r\n  const data = [];\r\n  \r\n  // 2024년 12월 31일 기준 가격 설정\r\n  const basePrices = {\r\n    '^GSPC': 5881.63,    // S&P 500: 2024년 말 종가\r\n    '^IXIC': 17500.00,   // NASDAQ: 2024년 말 종가\r\n    '^DJI': 42200.00,    // DOW JONES: 2024년 말 종가\r\n    '^VIX': 12.67,       // VIX: 2024년 말 종가\r\n    '^KS11': 2930.00,    // KOSPI: 2024년 말 종가\r\n    '^KQ11': 1050.00,    // KOSDAQ: 2024년 말 종가\r\n    '^STOXX50E': 5860.00, // Eurostoxx50: 2024년 말 종가\r\n    'MXWO.SW': 1800.00,  // MSCI World: 2024년 말 종가\r\n    'MXEF': 1050.00,     // MSCI Emerging Markets: 2024년 말 종가\r\n    '^N225': 38400.00,   // Nikkei 225: 2024년 말 종가\r\n    '^HSI': 30700.00,    // Hang Seng Index: 2024년 말 종가\r\n    '^HSCE': 11200.00,   // Hang Seng China Enterprises: 2024년 말 종가\r\n    '000300.SS': 4900.00, // CSI 300: 2024년 말 종가\r\n    '^BSESN': 71500.00,  // SENSEX: 2024년 말 종가\r\n    '^MXX': 63600.00     // MEXBOL: 2024년 말 종가\r\n  };\r\n  \r\n  const basePrice = basePrices[symbol] || 100;\r\n  const currentPrice = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol)?.price || basePrice;\r\n  \r\n  for (let i = days - 1; i >= 0; i--) {\r\n    const date = new Date();\r\n    date.setDate(date.getDate() - i);\r\n    \r\n    // 시간에 따른 가격 변화 (2024년 말에서 현재까지 하락 추세)\r\n    const timeProgress = i / (days - 1); // 0 = 현재, 1 = 과거\r\n    const trendFactor = 1 + (timeProgress * 0.3); // 과거로 갈수록 높은 가격\r\n    \r\n    // 랜덤한 가격 변동 생성 (더 현실적인 범위)\r\n    const variation = (Math.random() - 0.5) * 0.015; // ±0.75% 변동\r\n    const price = basePrice * trendFactor * (1 + variation);\r\n    \r\n    // OHLC 데이터 생성\r\n    const open = price * (1 + (Math.random() - 0.5) * 0.008);\r\n    const high = Math.max(open, price) * (1 + Math.random() * 0.005);\r\n    const low = Math.min(open, price) * (1 - Math.random() * 0.005);\r\n    const close = price;\r\n    \r\n    data.push({\r\n      date: date.toLocaleDateString('ko-KR'),\r\n      timestamp: Math.floor(date.getTime() / 1000),\r\n      open: Math.round(open * 100) / 100,\r\n      high: Math.round(high * 100) / 100,\r\n      low: Math.round(low * 100) / 100,\r\n      close: Math.round(close * 100) / 100,\r\n      volume: Math.floor(Math.random() * 1000000) + 100000\r\n    });\r\n  }\r\n  \r\n  return data;\r\n};\r\n\r\n// CORS 프록시 URL들 (여러 개 시도)\r\nconst CORS_PROXIES = [\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://corsproxy.io/?',\r\n  '' // 직접 호출도 시도\r\n];\r\n\r\n// 프록시를 사용한 API 호출\r\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\r\n  if (proxyIndex >= CORS_PROXIES.length) {\r\n    throw new Error('All proxy attempts failed');\r\n  }\r\n\r\n  try {\r\n    const proxyUrl = CORS_PROXIES[proxyIndex] + url;\r\n    const response = await fetch(proxyUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.log(`Proxy ${proxyIndex} failed, trying next...`);\r\n    return fetchWithProxy(url, proxyIndex + 1);\r\n  }\r\n};\r\n\r\n// 수익률 계산 함수\r\nconst calculateReturns = (currentPrice, historicalPrice) => {\r\n  if (!historicalPrice || historicalPrice <= 0) return 0;\r\n  return ((currentPrice - historicalPrice) / historicalPrice) * 100;\r\n};\r\n\r\n// Alpha Vantage API를 사용한 주식 데이터 가져오기 (대체 방법)\r\nexport const fetchStockDataAlphaVantage = async (symbol) => {\r\n  try {\r\n    // 무료 API 키 (실제 사용시에는 본인의 API 키를 사용해야 함)\r\n    const API_KEY = 'demo'; // 실제 사용시 본인의 API 키로 교체\r\n    const url = `${ALPHA_VANTAGE_URL}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${API_KEY}`;\r\n    \r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    \r\n    if (data['Error Message']) {\r\n      throw new Error(data['Error Message']);\r\n    }\r\n    \r\n    const quote = data['Global Quote'];\r\n    if (!quote) {\r\n      throw new Error('No quote data available');\r\n    }\r\n    \r\n    return {\r\n      symbol: symbol,\r\n      price: parseFloat(quote['05. price']) || 0,\r\n      change: parseFloat(quote['09. change']) || 0,\r\n      changePercent: parseFloat(quote['10. change percent'].replace('%', '')) || 0,\r\n      previousClose: parseFloat(quote['08. previous close']) || 0,\r\n      open: parseFloat(quote['02. open']) || 0,\r\n      high: parseFloat(quote['03. high']) || 0,\r\n      low: parseFloat(quote['04. low']) || 0,\r\n      volume: parseInt(quote['06. volume']) || 0,\r\n      currency: 'USD'\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching Alpha Vantage data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 주식 심볼별 차트 데이터 가져오기\r\nexport const fetchStockChartData = async (symbol, range = '1mo', interval = '1d') => {\r\n  try {\r\n    const url = `${BASE_URL}/${symbol}?interval=${interval}&range=${range}`;\r\n    const response = await fetchWithProxy(url);\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\r\n      throw new Error('No chart data available');\r\n    }\r\n    \r\n    const result = data.chart.result[0];\r\n    const timestamps = result.timestamp;\r\n    const quotes = result.indicators.quote[0];\r\n    \r\n    // 데이터 정리 및 변환\r\n    const chartData = timestamps.map((timestamp, index) => {\r\n      const date = new Date(timestamp * 1000);\r\n      return {\r\n        date: date.toLocaleDateString('ko-KR'),\r\n        timestamp: timestamp,\r\n        open: quotes.open[index] || 0,\r\n        high: quotes.high[index] || 0,\r\n        low: quotes.low[index] || 0,\r\n        close: quotes.close[index] || 0,\r\n        volume: quotes.volume[index] || 0\r\n      };\r\n    }).filter(item => item.close > 0); // 유효한 데이터만 필터링\r\n    \r\n    return chartData;\r\n  } catch (error) {\r\n    console.error('Error fetching stock data:', error);\r\n    // API 실패시 더미 데이터 사용\r\n    console.log('Using dummy data as fallback...');\r\n    return generateDummyChartData(symbol, range);\r\n  }\r\n};\r\n\r\n// 주식 실시간 가격 정보 가져오기 (수익률 포함)\r\nexport const fetchStockQuote = async (symbol) => {\r\n  try {\r\n    const url = `${BASE_URL}/${symbol}?interval=1m&range=1d`;\r\n    const response = await fetchWithProxy(url);\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\r\n      throw new Error('No quote data available');\r\n    }\r\n    \r\n    const result = data.chart.result[0];\r\n    const meta = result.meta;\r\n    const quotes = result.indicators.quote[0];\r\n    \r\n    // 가장 최근 데이터\r\n    const latestIndex = quotes.close.length - 1;\r\n    const currentPrice = meta.regularMarketPrice || quotes.close[latestIndex] || 0;\r\n    \r\n    return {\r\n      symbol: symbol,\r\n      price: currentPrice,\r\n      change: meta.regularMarketPrice - meta.previousClose || 0,\r\n      changePercent: ((meta.regularMarketPrice - meta.previousClose) / meta.previousClose * 100) || 0,\r\n      previousClose: meta.previousClose || 0,\r\n      open: quotes.open[latestIndex] || 0,\r\n      high: quotes.high[latestIndex] || 0,\r\n      low: quotes.low[latestIndex] || 0,\r\n      volume: quotes.volume[latestIndex] || 0,\r\n      marketCap: meta.marketCap || 0,\r\n      currency: meta.currency || 'USD'\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching stock quote:', error);\r\n    // Yahoo Finance API 실패시 Alpha Vantage 시도\r\n    try {\r\n      console.log('Trying Alpha Vantage as fallback...');\r\n      return await fetchStockDataAlphaVantage(symbol);\r\n    } catch (fallbackError) {\r\n      console.error('Fallback API also failed:', fallbackError);\r\n      // 모든 API 실패시 더미 데이터 사용\r\n      console.log('Using dummy data as final fallback...');\r\n      const dummyData = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol);\r\n      if (dummyData) {\r\n        return dummyData;\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// 주식 수익률 데이터 가져오기 (3개월, YTD)\r\nexport const fetchStockReturns = async (symbol) => {\r\n  try {\r\n    // 3개월 데이터\r\n    const threeMonthUrl = `${BASE_URL}/${symbol}?interval=1d&range=3mo`;\r\n    const threeMonthResponse = await fetchWithProxy(threeMonthUrl);\r\n    const threeMonthData = await threeMonthResponse.json();\r\n    \r\n    // YTD 데이터 (작년 12월 31일부터)\r\n    const currentYear = new Date().getFullYear();\r\n    const lastYearEnd = new Date(currentYear - 1, 11, 31); // 작년 12월 31일\r\n    const ytdDays = Math.ceil((new Date() - lastYearEnd) / (1000 * 60 * 60 * 24));\r\n    const ytdUrl = `${BASE_URL}/${symbol}?interval=1d&range=${ytdDays}d`;\r\n    const ytdResponse = await fetchWithProxy(ytdUrl);\r\n    const ytdData = await ytdResponse.json();\r\n    \r\n    if (!threeMonthData.chart?.result?.[0] || !ytdData.chart?.result?.[0]) {\r\n      throw new Error('No return data available');\r\n    }\r\n    \r\n    const threeMonthResult = threeMonthData.chart.result[0];\r\n    const ytdResult = ytdData.chart.result[0];\r\n    \r\n    const threeMonthQuotes = threeMonthResult.indicators.quote[0];\r\n    const ytdQuotes = ytdResult.indicators.quote[0];\r\n    \r\n    // 3개월 전 가격 (90일 전)\r\n    const threeMonthPrice = threeMonthQuotes.close[0] || 0;\r\n    \r\n    // YTD 시작 가격 (작년 12월 31일)\r\n    const ytdPrice = ytdQuotes.close[0] || 0;\r\n    \r\n    // 현재 가격\r\n    const currentPrice = threeMonthQuotes.close[threeMonthQuotes.close.length - 1] || 0;\r\n    \r\n    return {\r\n      threeMonthReturn: calculateReturns(currentPrice, threeMonthPrice),\r\n      ytdReturn: calculateReturns(currentPrice, ytdPrice)\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching stock returns:', error);\r\n    // API 실패시 더미 데이터 사용\r\n    const dummyData = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol);\r\n    if (dummyData) {\r\n      return {\r\n        threeMonthReturn: dummyData.threeMonthReturn,\r\n        ytdReturn: dummyData.ytdReturn\r\n      };\r\n    }\r\n    return { threeMonthReturn: 0, ytdReturn: 0 };\r\n  }\r\n};\r\n\r\n// 여러 주식 심볼의 실시간 데이터 가져오기 (수익률 포함)\r\nexport const fetchMultipleStockQuotes = async (symbols) => {\r\n  try {\r\n    const promises = symbols.map(async (symbol) => {\r\n      try {\r\n        const [quoteData, returnsData] = await Promise.all([\r\n          fetchStockQuote(symbol),\r\n          fetchStockReturns(symbol)\r\n        ]);\r\n        \r\n        return {\r\n          ...quoteData,\r\n          ...returnsData\r\n        };\r\n      } catch (error) {\r\n        console.error(`Failed to fetch ${symbol}:`, error);\r\n        // API 실패시 더미 데이터 사용\r\n        const dummyData = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol);\r\n        if (dummyData) {\r\n          console.log(`Using dummy data for ${symbol}`);\r\n          return dummyData;\r\n        }\r\n        return {\r\n          symbol: symbol,\r\n          error: true,\r\n          message: error.message\r\n        };\r\n      }\r\n    });\r\n    \r\n    const results = await Promise.all(promises);\r\n    return results;\r\n  } catch (error) {\r\n    console.error('Error fetching multiple stock quotes:', error);\r\n    // 전체 실패시 더미 데이터 반환\r\n    console.log('All APIs failed, using dummy data...');\r\n    return DUMMY_STOCK_DATA;\r\n  }\r\n};\r\n\r\n// Yahoo Finance API 테스트 함수\r\nexport const testYahooFinanceStockAPI = async () => {\r\n  try {\r\n    console.log('🧪 Testing Yahoo Finance Stock API...');\r\n    \r\n    // 간단한 테스트: S&P 500 데이터 가져오기\r\n    const testSymbol = '^GSPC';\r\n    const testUrl = `${BASE_URL}/${testSymbol}?interval=1d&range=1d`;\r\n    \r\n    console.log(`🔗 Testing URL: ${testUrl}`);\r\n    \r\n    // 방법 1: 직접 호출\r\n    try {\r\n      const response = await fetch(testUrl, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n        }\r\n      });\r\n      \r\n      console.log(`📊 Direct response status: ${response.status}`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log(`📊 Direct response data keys:`, Object.keys(data));\r\n      \r\n      if (data && data.chart && data.chart.result && data.chart.result[0]) {\r\n        const result = data.chart.result[0];\r\n        const meta = result.meta;\r\n        console.log(`📊 Meta data:`, meta);\r\n        \r\n        if (meta.regularMarketPrice) {\r\n          console.log(`✅ Yahoo Finance Stock API test successful! S&P 500: ${meta.regularMarketPrice}`);\r\n          return { success: true, method: 'Direct', price: meta.regularMarketPrice };\r\n        }\r\n      }\r\n    } catch (directError) {\r\n      console.log(`❌ Direct API call failed:`, directError.message);\r\n    }\r\n    \r\n    // 방법 2: 프록시를 통한 호출\r\n    try {\r\n      const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(testUrl)}`;\r\n      \r\n      const response = await fetch(proxyUrl);\r\n      console.log(`📊 Proxy response status: ${response.status}`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Proxy HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log(`📊 Proxy response data keys:`, Object.keys(data));\r\n      \r\n      if (data && data.chart && data.chart.result && data.chart.result[0]) {\r\n        const result = data.chart.result[0];\r\n        const meta = result.meta;\r\n        console.log(`📊 Proxy meta data:`, meta);\r\n        \r\n        if (meta.regularMarketPrice) {\r\n          console.log(`✅ Yahoo Finance Stock API test successful via proxy! S&P 500: ${meta.regularMarketPrice}`);\r\n          return { success: true, method: 'Proxy', price: meta.regularMarketPrice };\r\n        }\r\n      }\r\n    } catch (proxyError) {\r\n      console.log(`❌ Proxy API call failed:`, proxyError.message);\r\n    }\r\n    \r\n    console.log(`❌ All methods failed for stock API test`);\r\n    return { success: false, method: 'None', price: null };\r\n    \r\n  } catch (error) {\r\n    console.error(`❌ Yahoo Finance Stock API test failed:`, error);\r\n    return { success: false, method: 'Error', price: null };\r\n  }\r\n};\r\n\r\n// 인기 주식 심볼들\r\nexport const POPULAR_STOCKS = [\r\n  '^GSPC',    // S&P 500\r\n  '^IXIC',    // NASDAQ\r\n  '^DJI',     // DOW JONES\r\n  '^VIX',     // VIX\r\n  '^KS11',    // KOSPI\r\n  '^KQ11',    // KOSDAQ\r\n  '^STOXX50E', // Eurostoxx50\r\n  'MXWO.SW',  // MSCI World\r\n  'MXEF',     // MSCI Emerging Markets\r\n  '^N225',    // Nikkei 225\r\n  '^HSI',     // Hang Seng Index\r\n  '^HSCE',    // Hang Seng China Enterprises\r\n  '000300.SS', // CSI 300\r\n  '^BSESN',   // SENSEX\r\n  '^MXX'      // MEXBOL\r\n]; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}