{"ast":null,"code":"// Yahoo Finance API를 사용한 FX 데이터 서비스\n\n// 주요 환율 심볼 매핑\nconst FX_SYMBOLS = {\n  'USD/KRW': 'KRW=X',\n  // 달러/원\n  'EUR/KRW': 'EURKRW=X',\n  // 유로/원\n  'JPY/KRW': 'JPYKRW=X',\n  // 엔/원\n  'CNY/KRW': 'CNYKRW=X',\n  // 위안/원\n  'GBP/KRW': 'GBPKRW=X',\n  // 파운드/원\n  'EUR/USD': 'EURUSD=X',\n  // 유로/달러\n  'USD/JPY': 'USDJPY=X',\n  // 달러/엔\n  'GBP/USD': 'GBPUSD=X',\n  // 파운드/달러\n  'USD/CNY': 'USDCNY=X',\n  // 달러/위안\n  'EUR/JPY': 'EURJPY=X',\n  // 유로/엔\n  'AUD/USD': 'AUDUSD=X',\n  // 호주달러/달러\n  'USD/CAD': 'USDCAD=X',\n  // 달러/캐나다달러\n  'USD/CHF': 'USDCHF=X',\n  // 달러/스위스프랑\n  'NZD/USD': 'NZDUSD=X',\n  // 뉴질랜드달러/달러\n  'USD/SGD': 'USDSGD=X' // 달러/싱가포르달러\n};\n\n// Yahoo Finance API에서 환율 데이터 가져오기\nconst fetchFXDataFromYahoo = async symbol => {\n  try {\n    console.log(`🔗 Fetching ${symbol} from Yahoo Finance...`);\n\n    // 방법 1: 직접 Yahoo Finance API 호출 (주식과 동일한 방식)\n    try {\n      const url = `https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?interval=1d&range=1d`;\n      console.log(`🔗 Direct API URL: ${url}`);\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n          'Accept-Language': 'en-US,en;q=0.9',\n          'Cache-Control': 'no-cache'\n        }\n      });\n      console.log(`📊 Direct response status: ${response.status}`);\n      console.log(`📊 Direct response headers:`, Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(`📊 Direct response data keys:`, Object.keys(data));\n      if (data && data.chart && data.chart.result && data.chart.result[0]) {\n        const result = data.chart.result[0];\n        const meta = result.meta;\n        console.log(`📊 Direct meta data:`, meta);\n        const regularMarketPrice = meta.regularMarketPrice;\n        const previousClose = meta.previousClose;\n        if (regularMarketPrice && previousClose) {\n          const change = regularMarketPrice - previousClose;\n          const changePercent = change / previousClose * 100;\n          console.log(`✅ ${symbol} (direct): ${regularMarketPrice} (${changePercent > 0 ? '+' : ''}${changePercent.toFixed(2)}%)`);\n          return {\n            price: regularMarketPrice,\n            change: change,\n            changePercent: changePercent,\n            previousClose: previousClose,\n            isPositive: change >= 0\n          };\n        }\n      }\n      throw new Error('No valid data from Yahoo Finance');\n    } catch (directError) {\n      console.log(`❌ Direct API call failed for ${symbol}:`, directError.message);\n    }\n\n    // 방법 2: 프록시를 통한 호출 (CORS 문제 해결)\n    try {\n      const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(`https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?interval=1d&range=1d`)}`;\n      console.log(`🔗 Proxy API URL: ${proxyUrl}`);\n      const response = await fetch(proxyUrl);\n      console.log(`📊 Proxy response status: ${response.status}`);\n      if (!response.ok) {\n        throw new Error(`Proxy HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(`📊 Proxy response data keys:`, Object.keys(data));\n      if (data && data.chart && data.chart.result && data.chart.result[0]) {\n        const result = data.chart.result[0];\n        const meta = result.meta;\n        console.log(`📊 Proxy meta data:`, meta);\n        const regularMarketPrice = meta.regularMarketPrice;\n        const previousClose = meta.previousClose;\n        if (regularMarketPrice && previousClose) {\n          const change = regularMarketPrice - previousClose;\n          const changePercent = change / previousClose * 100;\n          console.log(`✅ ${symbol} (via proxy): ${regularMarketPrice} (${changePercent > 0 ? '+' : ''}${changePercent.toFixed(2)}%)`);\n          return {\n            price: regularMarketPrice,\n            change: change,\n            changePercent: changePercent,\n            previousClose: previousClose,\n            isPositive: change >= 0\n          };\n        }\n      }\n      throw new Error('No valid data from proxy');\n    } catch (proxyError) {\n      console.log(`❌ Proxy call failed for ${symbol}:`, proxyError.message);\n    }\n\n    // 방법 3: 다른 프록시 서버 시도\n    try {\n      const proxyUrl = `https://corsproxy.io/?https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?interval=1d&range=1d`;\n      console.log(`🔗 Alternative proxy API URL: ${proxyUrl}`);\n      const response = await fetch(proxyUrl);\n      console.log(`📊 Alternative proxy response status: ${response.status}`);\n      if (!response.ok) {\n        throw new Error(`Alternative proxy HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(`📊 Alternative proxy response data keys:`, Object.keys(data));\n      if (data && data.chart && data.chart.result && data.chart.result[0]) {\n        const result = data.chart.result[0];\n        const meta = result.meta;\n        console.log(`📊 Alternative proxy meta data:`, meta);\n        const regularMarketPrice = meta.regularMarketPrice;\n        const previousClose = meta.previousClose;\n        if (regularMarketPrice && previousClose) {\n          const change = regularMarketPrice - previousClose;\n          const changePercent = change / previousClose * 100;\n          console.log(`✅ ${symbol} (via alt proxy): ${regularMarketPrice} (${changePercent > 0 ? '+' : ''}${changePercent.toFixed(2)}%)`);\n          return {\n            price: regularMarketPrice,\n            change: change,\n            changePercent: changePercent,\n            previousClose: previousClose,\n            isPositive: change >= 0\n          };\n        }\n      }\n      throw new Error('No valid data from alternative proxy');\n    } catch (altProxyError) {\n      console.log(`❌ Alternative proxy call failed for ${symbol}:`, altProxyError.message);\n    }\n    console.log(`❌ All methods failed for ${symbol}`);\n    return null;\n  } catch (error) {\n    console.error(`❌ Error fetching ${symbol}:`, error);\n    return null;\n  }\n};\n\n// 현실적인 더미 FX 데이터 (2024년 12월 기준)\nconst DUMMY_FX_DATA = [{\n  title: 'USD/KRW',\n  value: 1345.67,\n  change: 0.15,\n  isPositive: true\n}, {\n  title: 'EUR/KRW',\n  value: 1459.23,\n  change: -0.21,\n  isPositive: false\n}, {\n  title: 'JPY/KRW',\n  value: 9.12,\n  change: 0.45,\n  isPositive: true\n}, {\n  title: 'CNY/KRW',\n  value: 186.34,\n  change: -0.12,\n  isPositive: false\n}, {\n  title: 'GBP/KRW',\n  value: 1702.45,\n  change: 0.32,\n  isPositive: true\n}, {\n  title: 'EUR/USD',\n  value: 1.0856,\n  change: -0.21,\n  isPositive: false\n}, {\n  title: 'USD/JPY',\n  value: 148.45,\n  change: 0.45,\n  isPositive: true\n}, {\n  title: 'GBP/USD',\n  value: 1.2654,\n  change: 0.32,\n  isPositive: true\n}, {\n  title: 'USD/CNY',\n  value: 7.2345,\n  change: -0.12,\n  isPositive: false\n}, {\n  title: 'EUR/JPY',\n  value: 161.23,\n  change: 0.24,\n  isPositive: true\n}, {\n  title: 'AUD/USD',\n  value: 0.6756,\n  change: 0.18,\n  isPositive: true\n}, {\n  title: 'USD/CAD',\n  value: 1.3456,\n  change: -0.08,\n  isPositive: false\n}, {\n  title: 'USD/CHF',\n  value: 0.8923,\n  change: 0.12,\n  isPositive: true\n}, {\n  title: 'NZD/USD',\n  value: 0.6234,\n  change: 0.25,\n  isPositive: true\n}, {\n  title: 'USD/SGD',\n  value: 1.3456,\n  change: -0.05,\n  isPositive: false\n}];\n\n// 모든 환율 데이터 가져오기\nexport const fetchAllFXData = async () => {\n  try {\n    console.log('🔄 Fetching FX data from Yahoo Finance...');\n    const fxData = [];\n    const promises = [];\n\n    // 모든 환율 심볼에 대해 병렬로 데이터 가져오기\n    for (const [name, symbol] of Object.entries(FX_SYMBOLS)) {\n      promises.push(fetchFXDataFromYahoo(symbol).then(data => {\n        if (data) {\n          console.log(`✅ ${name}: ${data.price} (${data.isPositive ? '+' : ''}${data.changePercent.toFixed(2)}%)`);\n          return {\n            title: name,\n            value: data.price,\n            change: data.changePercent,\n            isPositive: data.isPositive,\n            symbol: symbol,\n            isRealData: true,\n            dataSource: 'Yahoo Finance'\n          };\n        } else {\n          console.log(`❌ Failed to fetch ${name}`);\n          return null;\n        }\n      }).catch(error => {\n        console.log(`❌ Error fetching ${name}:`, error.message);\n        return null;\n      }));\n    }\n\n    // 모든 요청 완료 대기\n    const results = await Promise.all(promises);\n\n    // 성공한 데이터만 필터링\n    const successfulData = results.filter(data => data !== null);\n    console.log(`✅ Successfully fetched ${successfulData.length}/${Object.keys(FX_SYMBOLS).length} FX rates`);\n\n    // 실제 데이터가 있으면 반환, 없으면 더미 데이터 사용\n    if (successfulData.length > 0) {\n      return successfulData;\n    } else {\n      console.log('❌ No real data available, using dummy data...');\n      return DUMMY_FX_DATA.map(item => ({\n        ...item,\n        isRealData: false,\n        dataSource: 'Dummy Data',\n        symbol: FX_SYMBOLS[item.title] || ''\n      }));\n    }\n  } catch (error) {\n    console.error('❌ Error fetching FX data:', error);\n    console.log('📊 Falling back to dummy data...');\n\n    // 에러 발생 시 더미 데이터 반환\n    return DUMMY_FX_DATA.map(item => ({\n      ...item,\n      isRealData: false,\n      dataSource: 'Dummy Data (Error)',\n      symbol: FX_SYMBOLS[item.title] || ''\n    }));\n  }\n};\n\n// 특정 환율 데이터 가져오기\nexport const fetchFXRate = async symbol => {\n  const yahooSymbol = FX_SYMBOLS[symbol];\n  if (!yahooSymbol) {\n    throw new Error(`Unknown symbol: ${symbol}`);\n  }\n  return await fetchFXDataFromYahoo(yahooSymbol);\n};\n\n// Yahoo Finance URL 매핑\nexport const YAHOO_FINANCE_URLS = {\n  'USD/KRW': 'https://finance.yahoo.com/quote/KRW=X',\n  'EUR/KRW': 'https://finance.yahoo.com/quote/EURKRW=X',\n  'JPY/KRW': 'https://finance.yahoo.com/quote/JPYKRW=X',\n  'CNY/KRW': 'https://finance.yahoo.com/quote/CNYKRW=X',\n  'GBP/KRW': 'https://finance.yahoo.com/quote/GBPKRW=X',\n  'EUR/USD': 'https://finance.yahoo.com/quote/EURUSD=X',\n  'USD/JPY': 'https://finance.yahoo.com/quote/USDJPY=X',\n  'GBP/USD': 'https://finance.yahoo.com/quote/GBPUSD=X',\n  'USD/CNY': 'https://finance.yahoo.com/quote/USDCNY=X',\n  'EUR/JPY': 'https://finance.yahoo.com/quote/EURJPY=X',\n  'AUD/USD': 'https://finance.yahoo.com/quote/AUDUSD=X',\n  'USD/CAD': 'https://finance.yahoo.com/quote/USDCAD=X',\n  'USD/CHF': 'https://finance.yahoo.com/quote/USDCHF=X',\n  'NZD/USD': 'https://finance.yahoo.com/quote/NZDUSD=X',\n  'USD/SGD': 'https://finance.yahoo.com/quote/USDSGD=X'\n};\n\n// Yahoo Finance API 테스트 함수\nexport const testYahooFinanceAPI = async () => {\n  try {\n    console.log('🧪 Testing Yahoo Finance API...');\n\n    // 간단한 테스트: USD/KRW 환율 가져오기\n    const testSymbol = 'KRW=X';\n    const testUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${testSymbol}?interval=1d&range=1d`;\n    console.log(`🔗 Testing URL: ${testUrl}`);\n    const response = await fetch(testUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      }\n    });\n    console.log(`📊 Response status: ${response.status}`);\n    console.log(`📊 Response headers:`, Object.fromEntries(response.headers.entries()));\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(`📊 Response data keys:`, Object.keys(data));\n    if (data && data.chart && data.chart.result && data.chart.result[0]) {\n      const result = data.chart.result[0];\n      const meta = result.meta;\n      console.log(`📊 Meta data:`, meta);\n      if (meta.regularMarketPrice) {\n        console.log(`✅ Yahoo Finance API test successful! USD/KRW: ${meta.regularMarketPrice}`);\n        return true;\n      }\n    }\n    console.log(`❌ No valid data in response`);\n    return false;\n  } catch (error) {\n    console.error(`❌ Yahoo Finance API test failed:`, error);\n    return false;\n  }\n};","map":{"version":3,"names":["FX_SYMBOLS","fetchFXDataFromYahoo","symbol","console","log","url","response","fetch","method","headers","status","Object","fromEntries","entries","ok","Error","data","json","keys","chart","result","meta","regularMarketPrice","previousClose","change","changePercent","toFixed","price","isPositive","directError","message","proxyUrl","encodeURIComponent","proxyError","altProxyError","error","DUMMY_FX_DATA","title","value","fetchAllFXData","fxData","promises","name","push","then","isRealData","dataSource","catch","results","Promise","all","successfulData","filter","length","map","item","fetchFXRate","yahooSymbol","YAHOO_FINANCE_URLS","testYahooFinanceAPI","testSymbol","testUrl"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/fxApi.js"],"sourcesContent":["// Yahoo Finance API를 사용한 FX 데이터 서비스\r\n\r\n// 주요 환율 심볼 매핑\r\nconst FX_SYMBOLS = {\r\n  'USD/KRW': 'KRW=X', // 달러/원\r\n  'EUR/KRW': 'EURKRW=X', // 유로/원\r\n  'JPY/KRW': 'JPYKRW=X', // 엔/원\r\n  'CNY/KRW': 'CNYKRW=X', // 위안/원\r\n  'GBP/KRW': 'GBPKRW=X', // 파운드/원\r\n  'EUR/USD': 'EURUSD=X', // 유로/달러\r\n  'USD/JPY': 'USDJPY=X', // 달러/엔\r\n  'GBP/USD': 'GBPUSD=X', // 파운드/달러\r\n  'USD/CNY': 'USDCNY=X', // 달러/위안\r\n  'EUR/JPY': 'EURJPY=X', // 유로/엔\r\n  'AUD/USD': 'AUDUSD=X', // 호주달러/달러\r\n  'USD/CAD': 'USDCAD=X', // 달러/캐나다달러\r\n  'USD/CHF': 'USDCHF=X', // 달러/스위스프랑\r\n  'NZD/USD': 'NZDUSD=X', // 뉴질랜드달러/달러\r\n  'USD/SGD': 'USDSGD=X' // 달러/싱가포르달러\r\n};\r\n\r\n// Yahoo Finance API에서 환율 데이터 가져오기\r\nconst fetchFXDataFromYahoo = async (symbol) => {\r\n  try {\r\n    console.log(`🔗 Fetching ${symbol} from Yahoo Finance...`);\r\n    \r\n    // 방법 1: 직접 Yahoo Finance API 호출 (주식과 동일한 방식)\r\n    try {\r\n      const url = `https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?interval=1d&range=1d`;\r\n      \r\n      console.log(`🔗 Direct API URL: ${url}`);\r\n      \r\n      const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n          'Accept-Language': 'en-US,en;q=0.9',\r\n          'Cache-Control': 'no-cache'\r\n        }\r\n      });\r\n      \r\n      console.log(`📊 Direct response status: ${response.status}`);\r\n      console.log(`📊 Direct response headers:`, Object.fromEntries(response.headers.entries()));\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log(`📊 Direct response data keys:`, Object.keys(data));\r\n      \r\n      if (data && data.chart && data.chart.result && data.chart.result[0]) {\r\n        const result = data.chart.result[0];\r\n        const meta = result.meta;\r\n        console.log(`📊 Direct meta data:`, meta);\r\n        \r\n        const regularMarketPrice = meta.regularMarketPrice;\r\n        const previousClose = meta.previousClose;\r\n        \r\n        if (regularMarketPrice && previousClose) {\r\n          const change = regularMarketPrice - previousClose;\r\n          const changePercent = (change / previousClose) * 100;\r\n          \r\n          console.log(`✅ ${symbol} (direct): ${regularMarketPrice} (${changePercent > 0 ? '+' : ''}${changePercent.toFixed(2)}%)`);\r\n          \r\n          return {\r\n            price: regularMarketPrice,\r\n            change: change,\r\n            changePercent: changePercent,\r\n            previousClose: previousClose,\r\n            isPositive: change >= 0\r\n          };\r\n        }\r\n      }\r\n      \r\n      throw new Error('No valid data from Yahoo Finance');\r\n    } catch (directError) {\r\n      console.log(`❌ Direct API call failed for ${symbol}:`, directError.message);\r\n    }\r\n    \r\n    // 방법 2: 프록시를 통한 호출 (CORS 문제 해결)\r\n    try {\r\n      const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(`https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?interval=1d&range=1d`)}`;\r\n      \r\n      console.log(`🔗 Proxy API URL: ${proxyUrl}`);\r\n      \r\n      const response = await fetch(proxyUrl);\r\n      console.log(`📊 Proxy response status: ${response.status}`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Proxy HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log(`📊 Proxy response data keys:`, Object.keys(data));\r\n      \r\n      if (data && data.chart && data.chart.result && data.chart.result[0]) {\r\n        const result = data.chart.result[0];\r\n        const meta = result.meta;\r\n        console.log(`📊 Proxy meta data:`, meta);\r\n        \r\n        const regularMarketPrice = meta.regularMarketPrice;\r\n        const previousClose = meta.previousClose;\r\n        \r\n        if (regularMarketPrice && previousClose) {\r\n          const change = regularMarketPrice - previousClose;\r\n          const changePercent = (change / previousClose) * 100;\r\n          \r\n          console.log(`✅ ${symbol} (via proxy): ${regularMarketPrice} (${changePercent > 0 ? '+' : ''}${changePercent.toFixed(2)}%)`);\r\n          \r\n          return {\r\n            price: regularMarketPrice,\r\n            change: change,\r\n            changePercent: changePercent,\r\n            previousClose: previousClose,\r\n            isPositive: change >= 0\r\n          };\r\n        }\r\n      }\r\n      \r\n      throw new Error('No valid data from proxy');\r\n    } catch (proxyError) {\r\n      console.log(`❌ Proxy call failed for ${symbol}:`, proxyError.message);\r\n    }\r\n    \r\n    // 방법 3: 다른 프록시 서버 시도\r\n    try {\r\n      const proxyUrl = `https://corsproxy.io/?https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?interval=1d&range=1d`;\r\n      \r\n      console.log(`🔗 Alternative proxy API URL: ${proxyUrl}`);\r\n      \r\n      const response = await fetch(proxyUrl);\r\n      console.log(`📊 Alternative proxy response status: ${response.status}`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Alternative proxy HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log(`📊 Alternative proxy response data keys:`, Object.keys(data));\r\n      \r\n      if (data && data.chart && data.chart.result && data.chart.result[0]) {\r\n        const result = data.chart.result[0];\r\n        const meta = result.meta;\r\n        console.log(`📊 Alternative proxy meta data:`, meta);\r\n        \r\n        const regularMarketPrice = meta.regularMarketPrice;\r\n        const previousClose = meta.previousClose;\r\n        \r\n        if (regularMarketPrice && previousClose) {\r\n          const change = regularMarketPrice - previousClose;\r\n          const changePercent = (change / previousClose) * 100;\r\n          \r\n          console.log(`✅ ${symbol} (via alt proxy): ${regularMarketPrice} (${changePercent > 0 ? '+' : ''}${changePercent.toFixed(2)}%)`);\r\n          \r\n          return {\r\n            price: regularMarketPrice,\r\n            change: change,\r\n            changePercent: changePercent,\r\n            previousClose: previousClose,\r\n            isPositive: change >= 0\r\n          };\r\n        }\r\n      }\r\n      \r\n      throw new Error('No valid data from alternative proxy');\r\n    } catch (altProxyError) {\r\n      console.log(`❌ Alternative proxy call failed for ${symbol}:`, altProxyError.message);\r\n    }\r\n    \r\n    console.log(`❌ All methods failed for ${symbol}`);\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    console.error(`❌ Error fetching ${symbol}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 현실적인 더미 FX 데이터 (2024년 12월 기준)\r\nconst DUMMY_FX_DATA = [\r\n  { title: 'USD/KRW', value: 1345.67, change: 0.15, isPositive: true },\r\n  { title: 'EUR/KRW', value: 1459.23, change: -0.21, isPositive: false },\r\n  { title: 'JPY/KRW', value: 9.12, change: 0.45, isPositive: true },\r\n  { title: 'CNY/KRW', value: 186.34, change: -0.12, isPositive: false },\r\n  { title: 'GBP/KRW', value: 1702.45, change: 0.32, isPositive: true },\r\n  { title: 'EUR/USD', value: 1.0856, change: -0.21, isPositive: false },\r\n  { title: 'USD/JPY', value: 148.45, change: 0.45, isPositive: true },\r\n  { title: 'GBP/USD', value: 1.2654, change: 0.32, isPositive: true },\r\n  { title: 'USD/CNY', value: 7.2345, change: -0.12, isPositive: false },\r\n  { title: 'EUR/JPY', value: 161.23, change: 0.24, isPositive: true },\r\n  { title: 'AUD/USD', value: 0.6756, change: 0.18, isPositive: true },\r\n  { title: 'USD/CAD', value: 1.3456, change: -0.08, isPositive: false },\r\n  { title: 'USD/CHF', value: 0.8923, change: 0.12, isPositive: true },\r\n  { title: 'NZD/USD', value: 0.6234, change: 0.25, isPositive: true },\r\n  { title: 'USD/SGD', value: 1.3456, change: -0.05, isPositive: false }\r\n];\r\n\r\n// 모든 환율 데이터 가져오기\r\nexport const fetchAllFXData = async () => {\r\n  try {\r\n    console.log('🔄 Fetching FX data from Yahoo Finance...');\r\n    \r\n    const fxData = [];\r\n    const promises = [];\r\n    \r\n    // 모든 환율 심볼에 대해 병렬로 데이터 가져오기\r\n    for (const [name, symbol] of Object.entries(FX_SYMBOLS)) {\r\n      promises.push(\r\n        fetchFXDataFromYahoo(symbol)\r\n          .then(data => {\r\n            if (data) {\r\n              console.log(`✅ ${name}: ${data.price} (${data.isPositive ? '+' : ''}${data.changePercent.toFixed(2)}%)`);\r\n              return {\r\n                title: name,\r\n                value: data.price,\r\n                change: data.changePercent,\r\n                isPositive: data.isPositive,\r\n                symbol: symbol,\r\n                isRealData: true,\r\n                dataSource: 'Yahoo Finance'\r\n              };\r\n            } else {\r\n              console.log(`❌ Failed to fetch ${name}`);\r\n              return null;\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.log(`❌ Error fetching ${name}:`, error.message);\r\n            return null;\r\n          })\r\n      );\r\n    }\r\n    \r\n    // 모든 요청 완료 대기\r\n    const results = await Promise.all(promises);\r\n    \r\n    // 성공한 데이터만 필터링\r\n    const successfulData = results.filter(data => data !== null);\r\n    \r\n    console.log(`✅ Successfully fetched ${successfulData.length}/${Object.keys(FX_SYMBOLS).length} FX rates`);\r\n    \r\n    // 실제 데이터가 있으면 반환, 없으면 더미 데이터 사용\r\n    if (successfulData.length > 0) {\r\n      return successfulData;\r\n    } else {\r\n      console.log('❌ No real data available, using dummy data...');\r\n      return DUMMY_FX_DATA.map(item => ({\r\n        ...item,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data',\r\n        symbol: FX_SYMBOLS[item.title] || ''\r\n      }));\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching FX data:', error);\r\n    console.log('📊 Falling back to dummy data...');\r\n    \r\n    // 에러 발생 시 더미 데이터 반환\r\n    return DUMMY_FX_DATA.map(item => ({\r\n      ...item,\r\n      isRealData: false,\r\n      dataSource: 'Dummy Data (Error)',\r\n      symbol: FX_SYMBOLS[item.title] || ''\r\n    }));\r\n  }\r\n};\r\n\r\n// 특정 환율 데이터 가져오기\r\nexport const fetchFXRate = async (symbol) => {\r\n  const yahooSymbol = FX_SYMBOLS[symbol];\r\n  if (!yahooSymbol) {\r\n    throw new Error(`Unknown symbol: ${symbol}`);\r\n  }\r\n  \r\n  return await fetchFXDataFromYahoo(yahooSymbol);\r\n};\r\n\r\n// Yahoo Finance URL 매핑\r\nexport const YAHOO_FINANCE_URLS = {\r\n  'USD/KRW': 'https://finance.yahoo.com/quote/KRW=X',\r\n  'EUR/KRW': 'https://finance.yahoo.com/quote/EURKRW=X',\r\n  'JPY/KRW': 'https://finance.yahoo.com/quote/JPYKRW=X',\r\n  'CNY/KRW': 'https://finance.yahoo.com/quote/CNYKRW=X',\r\n  'GBP/KRW': 'https://finance.yahoo.com/quote/GBPKRW=X',\r\n  'EUR/USD': 'https://finance.yahoo.com/quote/EURUSD=X',\r\n  'USD/JPY': 'https://finance.yahoo.com/quote/USDJPY=X',\r\n  'GBP/USD': 'https://finance.yahoo.com/quote/GBPUSD=X',\r\n  'USD/CNY': 'https://finance.yahoo.com/quote/USDCNY=X',\r\n  'EUR/JPY': 'https://finance.yahoo.com/quote/EURJPY=X',\r\n  'AUD/USD': 'https://finance.yahoo.com/quote/AUDUSD=X',\r\n  'USD/CAD': 'https://finance.yahoo.com/quote/USDCAD=X',\r\n  'USD/CHF': 'https://finance.yahoo.com/quote/USDCHF=X',\r\n  'NZD/USD': 'https://finance.yahoo.com/quote/NZDUSD=X',\r\n  'USD/SGD': 'https://finance.yahoo.com/quote/USDSGD=X'\r\n};\r\n\r\n// Yahoo Finance API 테스트 함수\r\nexport const testYahooFinanceAPI = async () => {\r\n  try {\r\n    console.log('🧪 Testing Yahoo Finance API...');\r\n    \r\n    // 간단한 테스트: USD/KRW 환율 가져오기\r\n    const testSymbol = 'KRW=X';\r\n    const testUrl = `https://query1.finance.yahoo.com/v8/finance/chart/${testSymbol}?interval=1d&range=1d`;\r\n    \r\n    console.log(`🔗 Testing URL: ${testUrl}`);\r\n    \r\n    const response = await fetch(testUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n      }\r\n    });\r\n    \r\n    console.log(`📊 Response status: ${response.status}`);\r\n    console.log(`📊 Response headers:`, Object.fromEntries(response.headers.entries()));\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log(`📊 Response data keys:`, Object.keys(data));\r\n    \r\n    if (data && data.chart && data.chart.result && data.chart.result[0]) {\r\n      const result = data.chart.result[0];\r\n      const meta = result.meta;\r\n      console.log(`📊 Meta data:`, meta);\r\n      \r\n      if (meta.regularMarketPrice) {\r\n        console.log(`✅ Yahoo Finance API test successful! USD/KRW: ${meta.regularMarketPrice}`);\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    console.log(`❌ No valid data in response`);\r\n    return false;\r\n    \r\n  } catch (error) {\r\n    console.error(`❌ Yahoo Finance API test failed:`, error);\r\n    return false;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}