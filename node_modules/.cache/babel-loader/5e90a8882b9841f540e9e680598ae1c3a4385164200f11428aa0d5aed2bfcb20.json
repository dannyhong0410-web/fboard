{"ast":null,"code":"// Yahoo Finance API를 사용한 주식 데이터 서비스\nconst BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\nconst ALPHA_VANTAGE_URL = 'https://www.alphavantage.co/query';\n\n// 더미 데이터 (API 문제시 사용)\nconst DUMMY_STOCK_DATA = [{\n  symbol: '^GSPC',\n  price: 4567.89,\n  change: 56.78,\n  changePercent: 1.23,\n  previousClose: 4511.11,\n  open: 4520.00,\n  high: 4580.00,\n  low: 4510.00,\n  volume: 2345678901,\n  currency: 'USD',\n  threeMonthReturn: 8.45,\n  ytdReturn: 12.34\n}, {\n  symbol: '^IXIC',\n  price: 14234.56,\n  change: -64.32,\n  changePercent: -0.45,\n  previousClose: 14298.88,\n  open: 14300.00,\n  high: 14350.00,\n  low: 14200.00,\n  volume: 3456789012,\n  currency: 'USD',\n  threeMonthReturn: 15.67,\n  ytdReturn: 18.90\n}, {\n  symbol: '^DJI',\n  price: 35678.90,\n  change: 278.45,\n  changePercent: 0.78,\n  previousClose: 35400.45,\n  open: 35450.00,\n  high: 35800.00,\n  low: 35400.00,\n  volume: 4567890123,\n  currency: 'USD',\n  threeMonthReturn: 6.78,\n  ytdReturn: 9.12\n}, {\n  symbol: '^VIX',\n  price: 18.45,\n  change: -0.40,\n  changePercent: -2.1,\n  previousClose: 18.85,\n  open: 19.00,\n  high: 19.20,\n  low: 18.30,\n  volume: 5678901234,\n  currency: 'USD',\n  threeMonthReturn: -12.34,\n  ytdReturn: -8.76\n}, {\n  symbol: '^KS11',\n  price: 2567.89,\n  change: 23.45,\n  changePercent: 0.92,\n  previousClose: 2544.44,\n  open: 2550.00,\n  high: 2580.00,\n  low: 2540.00,\n  volume: 6789012345,\n  currency: 'KRW',\n  threeMonthReturn: 5.43,\n  ytdReturn: 7.89\n}, {\n  symbol: '^KQ11',\n  price: 856.78,\n  change: -2.92,\n  changePercent: -0.34,\n  previousClose: 859.70,\n  open: 860.00,\n  high: 865.00,\n  low: 855.00,\n  volume: 7890123456,\n  currency: 'KRW',\n  threeMonthReturn: 3.21,\n  ytdReturn: 4.56\n}];\n\n// 더미 차트 데이터 생성\nconst generateDummyChartData = (symbol, range = '1mo') => {\n  var _DUMMY_STOCK_DATA$fin;\n  const days = range === '1d' ? 1 : range === '5d' ? 5 : range === '1mo' ? 30 : 90;\n  const data = [];\n  const basePrice = ((_DUMMY_STOCK_DATA$fin = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol)) === null || _DUMMY_STOCK_DATA$fin === void 0 ? void 0 : _DUMMY_STOCK_DATA$fin.price) || 100;\n  for (let i = days - 1; i >= 0; i--) {\n    const date = new Date();\n    date.setDate(date.getDate() - i);\n\n    // 랜덤한 가격 변동 생성 (더 현실적인 범위)\n    const variation = (Math.random() - 0.5) * 0.015; // ±0.75% 변동\n    const price = basePrice * (1 + variation);\n\n    // OHLC 데이터 생성\n    const open = price * (1 + (Math.random() - 0.5) * 0.008);\n    const high = Math.max(open, price) * (1 + Math.random() * 0.005);\n    const low = Math.min(open, price) * (1 - Math.random() * 0.005);\n    const close = price;\n    data.push({\n      date: date.toLocaleDateString('ko-KR'),\n      timestamp: Math.floor(date.getTime() / 1000),\n      open: Math.round(open * 100) / 100,\n      high: Math.round(high * 100) / 100,\n      low: Math.round(low * 100) / 100,\n      close: Math.round(close * 100) / 100,\n      volume: Math.floor(Math.random() * 1000000) + 100000\n    });\n  }\n  return data;\n};\n\n// CORS 프록시 URL들 (여러 개 시도)\nconst CORS_PROXIES = ['https://cors-anywhere.herokuapp.com/', 'https://api.allorigins.win/raw?url=', 'https://corsproxy.io/?', '' // 직접 호출도 시도\n];\n\n// 프록시를 사용한 API 호출\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\n  if (proxyIndex >= CORS_PROXIES.length) {\n    throw new Error('All proxy attempts failed');\n  }\n  try {\n    const proxyUrl = CORS_PROXIES[proxyIndex] + url;\n    const response = await fetch(proxyUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response;\n  } catch (error) {\n    console.log(`Proxy ${proxyIndex} failed, trying next...`);\n    return fetchWithProxy(url, proxyIndex + 1);\n  }\n};\n\n// 수익률 계산 함수\nconst calculateReturns = (currentPrice, historicalPrice) => {\n  if (!historicalPrice || historicalPrice <= 0) return 0;\n  return (currentPrice - historicalPrice) / historicalPrice * 100;\n};\n\n// Alpha Vantage API를 사용한 주식 데이터 가져오기 (대체 방법)\nexport const fetchStockDataAlphaVantage = async symbol => {\n  try {\n    // 무료 API 키 (실제 사용시에는 본인의 API 키를 사용해야 함)\n    const API_KEY = 'demo'; // 실제 사용시 본인의 API 키로 교체\n    const url = `${ALPHA_VANTAGE_URL}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${API_KEY}`;\n    const response = await fetch(url);\n    const data = await response.json();\n    if (data['Error Message']) {\n      throw new Error(data['Error Message']);\n    }\n    const quote = data['Global Quote'];\n    if (!quote) {\n      throw new Error('No quote data available');\n    }\n    return {\n      symbol: symbol,\n      price: parseFloat(quote['05. price']) || 0,\n      change: parseFloat(quote['09. change']) || 0,\n      changePercent: parseFloat(quote['10. change percent'].replace('%', '')) || 0,\n      previousClose: parseFloat(quote['08. previous close']) || 0,\n      open: parseFloat(quote['02. open']) || 0,\n      high: parseFloat(quote['03. high']) || 0,\n      low: parseFloat(quote['04. low']) || 0,\n      volume: parseInt(quote['06. volume']) || 0,\n      currency: 'USD'\n    };\n  } catch (error) {\n    console.error('Error fetching Alpha Vantage data:', error);\n    throw error;\n  }\n};\n\n// 주식 심볼별 차트 데이터 가져오기\nexport const fetchStockChartData = async (symbol, range = '1mo', interval = '1d') => {\n  try {\n    const url = `${BASE_URL}/${symbol}?interval=${interval}&range=${range}`;\n    const response = await fetchWithProxy(url);\n    const data = await response.json();\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\n      throw new Error('No chart data available');\n    }\n    const result = data.chart.result[0];\n    const timestamps = result.timestamp;\n    const quotes = result.indicators.quote[0];\n\n    // 데이터 정리 및 변환\n    const chartData = timestamps.map((timestamp, index) => {\n      const date = new Date(timestamp * 1000);\n      return {\n        date: date.toLocaleDateString('ko-KR'),\n        timestamp: timestamp,\n        open: quotes.open[index] || 0,\n        high: quotes.high[index] || 0,\n        low: quotes.low[index] || 0,\n        close: quotes.close[index] || 0,\n        volume: quotes.volume[index] || 0\n      };\n    }).filter(item => item.close > 0); // 유효한 데이터만 필터링\n\n    return chartData;\n  } catch (error) {\n    console.error('Error fetching stock data:', error);\n    // API 실패시 더미 데이터 사용\n    console.log('Using dummy data as fallback...');\n    return generateDummyChartData(symbol, range);\n  }\n};\n\n// 주식 실시간 가격 정보 가져오기 (수익률 포함)\nexport const fetchStockQuote = async symbol => {\n  try {\n    const url = `${BASE_URL}/${symbol}?interval=1m&range=1d`;\n    const response = await fetchWithProxy(url);\n    const data = await response.json();\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\n      throw new Error('No quote data available');\n    }\n    const result = data.chart.result[0];\n    const meta = result.meta;\n    const quotes = result.indicators.quote[0];\n\n    // 가장 최근 데이터\n    const latestIndex = quotes.close.length - 1;\n    const currentPrice = meta.regularMarketPrice || quotes.close[latestIndex] || 0;\n    return {\n      symbol: symbol,\n      price: currentPrice,\n      change: meta.regularMarketPrice - meta.previousClose || 0,\n      changePercent: (meta.regularMarketPrice - meta.previousClose) / meta.previousClose * 100 || 0,\n      previousClose: meta.previousClose || 0,\n      open: quotes.open[latestIndex] || 0,\n      high: quotes.high[latestIndex] || 0,\n      low: quotes.low[latestIndex] || 0,\n      volume: quotes.volume[latestIndex] || 0,\n      marketCap: meta.marketCap || 0,\n      currency: meta.currency || 'USD'\n    };\n  } catch (error) {\n    console.error('Error fetching stock quote:', error);\n    // Yahoo Finance API 실패시 Alpha Vantage 시도\n    try {\n      console.log('Trying Alpha Vantage as fallback...');\n      return await fetchStockDataAlphaVantage(symbol);\n    } catch (fallbackError) {\n      console.error('Fallback API also failed:', fallbackError);\n      // 모든 API 실패시 더미 데이터 사용\n      console.log('Using dummy data as final fallback...');\n      const dummyData = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol);\n      if (dummyData) {\n        return dummyData;\n      }\n      throw error;\n    }\n  }\n};\n\n// 주식 수익률 데이터 가져오기 (3개월, YTD)\nexport const fetchStockReturns = async symbol => {\n  try {\n    var _threeMonthData$chart, _threeMonthData$chart2, _ytdData$chart, _ytdData$chart$result;\n    // 3개월 데이터\n    const threeMonthUrl = `${BASE_URL}/${symbol}?interval=1d&range=3mo`;\n    const threeMonthResponse = await fetchWithProxy(threeMonthUrl);\n    const threeMonthData = await threeMonthResponse.json();\n\n    // YTD 데이터 (작년 12월 31일부터)\n    const currentYear = new Date().getFullYear();\n    const lastYearEnd = new Date(currentYear - 1, 11, 31); // 작년 12월 31일\n    const ytdDays = Math.ceil((new Date() - lastYearEnd) / (1000 * 60 * 60 * 24));\n    const ytdUrl = `${BASE_URL}/${symbol}?interval=1d&range=${ytdDays}d`;\n    const ytdResponse = await fetchWithProxy(ytdUrl);\n    const ytdData = await ytdResponse.json();\n    if (!((_threeMonthData$chart = threeMonthData.chart) !== null && _threeMonthData$chart !== void 0 && (_threeMonthData$chart2 = _threeMonthData$chart.result) !== null && _threeMonthData$chart2 !== void 0 && _threeMonthData$chart2[0]) || !((_ytdData$chart = ytdData.chart) !== null && _ytdData$chart !== void 0 && (_ytdData$chart$result = _ytdData$chart.result) !== null && _ytdData$chart$result !== void 0 && _ytdData$chart$result[0])) {\n      throw new Error('No return data available');\n    }\n    const threeMonthResult = threeMonthData.chart.result[0];\n    const ytdResult = ytdData.chart.result[0];\n    const threeMonthQuotes = threeMonthResult.indicators.quote[0];\n    const ytdQuotes = ytdResult.indicators.quote[0];\n\n    // 3개월 전 가격 (90일 전)\n    const threeMonthPrice = threeMonthQuotes.close[0] || 0;\n\n    // YTD 시작 가격 (작년 12월 31일)\n    const ytdPrice = ytdQuotes.close[0] || 0;\n\n    // 현재 가격\n    const currentPrice = threeMonthQuotes.close[threeMonthQuotes.close.length - 1] || 0;\n    return {\n      threeMonthReturn: calculateReturns(currentPrice, threeMonthPrice),\n      ytdReturn: calculateReturns(currentPrice, ytdPrice)\n    };\n  } catch (error) {\n    console.error('Error fetching stock returns:', error);\n    // API 실패시 더미 데이터 사용\n    const dummyData = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol);\n    if (dummyData) {\n      return {\n        threeMonthReturn: dummyData.threeMonthReturn,\n        ytdReturn: dummyData.ytdReturn\n      };\n    }\n    return {\n      threeMonthReturn: 0,\n      ytdReturn: 0\n    };\n  }\n};\n\n// 여러 주식 심볼의 실시간 데이터 가져오기 (수익률 포함)\nexport const fetchMultipleStockQuotes = async symbols => {\n  try {\n    const promises = symbols.map(async symbol => {\n      try {\n        const [quoteData, returnsData] = await Promise.all([fetchStockQuote(symbol), fetchStockReturns(symbol)]);\n        return {\n          ...quoteData,\n          ...returnsData\n        };\n      } catch (error) {\n        console.error(`Failed to fetch ${symbol}:`, error);\n        // API 실패시 더미 데이터 사용\n        const dummyData = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol);\n        if (dummyData) {\n          console.log(`Using dummy data for ${symbol}`);\n          return dummyData;\n        }\n        return {\n          symbol: symbol,\n          error: true,\n          message: error.message\n        };\n      }\n    });\n    const results = await Promise.all(promises);\n    return results;\n  } catch (error) {\n    console.error('Error fetching multiple stock quotes:', error);\n    // 전체 실패시 더미 데이터 반환\n    console.log('All APIs failed, using dummy data...');\n    return DUMMY_STOCK_DATA;\n  }\n};\n\n// 인기 주식 심볼들\nexport const POPULAR_STOCKS = ['^GSPC',\n// S&P 500\n'^IXIC',\n// NASDAQ\n'^DJI',\n// DOW JONES\n'^VIX',\n// VIX\n'^KS11',\n// KOSPI\n'^KQ11' // KOSDAQ\n];","map":{"version":3,"names":["BASE_URL","ALPHA_VANTAGE_URL","DUMMY_STOCK_DATA","symbol","price","change","changePercent","previousClose","open","high","low","volume","currency","threeMonthReturn","ytdReturn","generateDummyChartData","range","_DUMMY_STOCK_DATA$fin","days","data","basePrice","find","stock","i","date","Date","setDate","getDate","variation","Math","random","max","min","close","push","toLocaleDateString","timestamp","floor","getTime","round","CORS_PROXIES","fetchWithProxy","url","proxyIndex","length","Error","proxyUrl","response","fetch","method","headers","ok","status","error","console","log","calculateReturns","currentPrice","historicalPrice","fetchStockDataAlphaVantage","API_KEY","json","quote","parseFloat","replace","parseInt","fetchStockChartData","interval","chart","result","timestamps","quotes","indicators","chartData","map","index","filter","item","fetchStockQuote","meta","latestIndex","regularMarketPrice","marketCap","fallbackError","dummyData","fetchStockReturns","_threeMonthData$chart","_threeMonthData$chart2","_ytdData$chart","_ytdData$chart$result","threeMonthUrl","threeMonthResponse","threeMonthData","currentYear","getFullYear","lastYearEnd","ytdDays","ceil","ytdUrl","ytdResponse","ytdData","threeMonthResult","ytdResult","threeMonthQuotes","ytdQuotes","threeMonthPrice","ytdPrice","fetchMultipleStockQuotes","symbols","promises","quoteData","returnsData","Promise","all","message","results","POPULAR_STOCKS"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/stockApi.js"],"sourcesContent":["// Yahoo Finance API를 사용한 주식 데이터 서비스\r\nconst BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\r\nconst ALPHA_VANTAGE_URL = 'https://www.alphavantage.co/query';\r\n\r\n// 더미 데이터 (API 문제시 사용)\r\nconst DUMMY_STOCK_DATA = [\r\n  {\r\n    symbol: '^GSPC',\r\n    price: 4567.89,\r\n    change: 56.78,\r\n    changePercent: 1.23,\r\n    previousClose: 4511.11,\r\n    open: 4520.00,\r\n    high: 4580.00,\r\n    low: 4510.00,\r\n    volume: 2345678901,\r\n    currency: 'USD',\r\n    threeMonthReturn: 8.45,\r\n    ytdReturn: 12.34\r\n  },\r\n  {\r\n    symbol: '^IXIC',\r\n    price: 14234.56,\r\n    change: -64.32,\r\n    changePercent: -0.45,\r\n    previousClose: 14298.88,\r\n    open: 14300.00,\r\n    high: 14350.00,\r\n    low: 14200.00,\r\n    volume: 3456789012,\r\n    currency: 'USD',\r\n    threeMonthReturn: 15.67,\r\n    ytdReturn: 18.90\r\n  },\r\n  {\r\n    symbol: '^DJI',\r\n    price: 35678.90,\r\n    change: 278.45,\r\n    changePercent: 0.78,\r\n    previousClose: 35400.45,\r\n    open: 35450.00,\r\n    high: 35800.00,\r\n    low: 35400.00,\r\n    volume: 4567890123,\r\n    currency: 'USD',\r\n    threeMonthReturn: 6.78,\r\n    ytdReturn: 9.12\r\n  },\r\n  {\r\n    symbol: '^VIX',\r\n    price: 18.45,\r\n    change: -0.40,\r\n    changePercent: -2.1,\r\n    previousClose: 18.85,\r\n    open: 19.00,\r\n    high: 19.20,\r\n    low: 18.30,\r\n    volume: 5678901234,\r\n    currency: 'USD',\r\n    threeMonthReturn: -12.34,\r\n    ytdReturn: -8.76\r\n  },\r\n  {\r\n    symbol: '^KS11',\r\n    price: 2567.89,\r\n    change: 23.45,\r\n    changePercent: 0.92,\r\n    previousClose: 2544.44,\r\n    open: 2550.00,\r\n    high: 2580.00,\r\n    low: 2540.00,\r\n    volume: 6789012345,\r\n    currency: 'KRW',\r\n    threeMonthReturn: 5.43,\r\n    ytdReturn: 7.89\r\n  },\r\n  {\r\n    symbol: '^KQ11',\r\n    price: 856.78,\r\n    change: -2.92,\r\n    changePercent: -0.34,\r\n    previousClose: 859.70,\r\n    open: 860.00,\r\n    high: 865.00,\r\n    low: 855.00,\r\n    volume: 7890123456,\r\n    currency: 'KRW',\r\n    threeMonthReturn: 3.21,\r\n    ytdReturn: 4.56\r\n  }\r\n];\r\n\r\n// 더미 차트 데이터 생성\r\nconst generateDummyChartData = (symbol, range = '1mo') => {\r\n  const days = range === '1d' ? 1 : range === '5d' ? 5 : range === '1mo' ? 30 : 90;\r\n  const data = [];\r\n  const basePrice = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol)?.price || 100;\r\n  \r\n  for (let i = days - 1; i >= 0; i--) {\r\n    const date = new Date();\r\n    date.setDate(date.getDate() - i);\r\n    \r\n    // 랜덤한 가격 변동 생성 (더 현실적인 범위)\r\n    const variation = (Math.random() - 0.5) * 0.015; // ±0.75% 변동\r\n    const price = basePrice * (1 + variation);\r\n    \r\n    // OHLC 데이터 생성\r\n    const open = price * (1 + (Math.random() - 0.5) * 0.008);\r\n    const high = Math.max(open, price) * (1 + Math.random() * 0.005);\r\n    const low = Math.min(open, price) * (1 - Math.random() * 0.005);\r\n    const close = price;\r\n    \r\n    data.push({\r\n      date: date.toLocaleDateString('ko-KR'),\r\n      timestamp: Math.floor(date.getTime() / 1000),\r\n      open: Math.round(open * 100) / 100,\r\n      high: Math.round(high * 100) / 100,\r\n      low: Math.round(low * 100) / 100,\r\n      close: Math.round(close * 100) / 100,\r\n      volume: Math.floor(Math.random() * 1000000) + 100000\r\n    });\r\n  }\r\n  \r\n  return data;\r\n};\r\n\r\n// CORS 프록시 URL들 (여러 개 시도)\r\nconst CORS_PROXIES = [\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://corsproxy.io/?',\r\n  '' // 직접 호출도 시도\r\n];\r\n\r\n// 프록시를 사용한 API 호출\r\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\r\n  if (proxyIndex >= CORS_PROXIES.length) {\r\n    throw new Error('All proxy attempts failed');\r\n  }\r\n\r\n  try {\r\n    const proxyUrl = CORS_PROXIES[proxyIndex] + url;\r\n    const response = await fetch(proxyUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.log(`Proxy ${proxyIndex} failed, trying next...`);\r\n    return fetchWithProxy(url, proxyIndex + 1);\r\n  }\r\n};\r\n\r\n// 수익률 계산 함수\r\nconst calculateReturns = (currentPrice, historicalPrice) => {\r\n  if (!historicalPrice || historicalPrice <= 0) return 0;\r\n  return ((currentPrice - historicalPrice) / historicalPrice) * 100;\r\n};\r\n\r\n// Alpha Vantage API를 사용한 주식 데이터 가져오기 (대체 방법)\r\nexport const fetchStockDataAlphaVantage = async (symbol) => {\r\n  try {\r\n    // 무료 API 키 (실제 사용시에는 본인의 API 키를 사용해야 함)\r\n    const API_KEY = 'demo'; // 실제 사용시 본인의 API 키로 교체\r\n    const url = `${ALPHA_VANTAGE_URL}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${API_KEY}`;\r\n    \r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    \r\n    if (data['Error Message']) {\r\n      throw new Error(data['Error Message']);\r\n    }\r\n    \r\n    const quote = data['Global Quote'];\r\n    if (!quote) {\r\n      throw new Error('No quote data available');\r\n    }\r\n    \r\n    return {\r\n      symbol: symbol,\r\n      price: parseFloat(quote['05. price']) || 0,\r\n      change: parseFloat(quote['09. change']) || 0,\r\n      changePercent: parseFloat(quote['10. change percent'].replace('%', '')) || 0,\r\n      previousClose: parseFloat(quote['08. previous close']) || 0,\r\n      open: parseFloat(quote['02. open']) || 0,\r\n      high: parseFloat(quote['03. high']) || 0,\r\n      low: parseFloat(quote['04. low']) || 0,\r\n      volume: parseInt(quote['06. volume']) || 0,\r\n      currency: 'USD'\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching Alpha Vantage data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 주식 심볼별 차트 데이터 가져오기\r\nexport const fetchStockChartData = async (symbol, range = '1mo', interval = '1d') => {\r\n  try {\r\n    const url = `${BASE_URL}/${symbol}?interval=${interval}&range=${range}`;\r\n    const response = await fetchWithProxy(url);\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\r\n      throw new Error('No chart data available');\r\n    }\r\n    \r\n    const result = data.chart.result[0];\r\n    const timestamps = result.timestamp;\r\n    const quotes = result.indicators.quote[0];\r\n    \r\n    // 데이터 정리 및 변환\r\n    const chartData = timestamps.map((timestamp, index) => {\r\n      const date = new Date(timestamp * 1000);\r\n      return {\r\n        date: date.toLocaleDateString('ko-KR'),\r\n        timestamp: timestamp,\r\n        open: quotes.open[index] || 0,\r\n        high: quotes.high[index] || 0,\r\n        low: quotes.low[index] || 0,\r\n        close: quotes.close[index] || 0,\r\n        volume: quotes.volume[index] || 0\r\n      };\r\n    }).filter(item => item.close > 0); // 유효한 데이터만 필터링\r\n    \r\n    return chartData;\r\n  } catch (error) {\r\n    console.error('Error fetching stock data:', error);\r\n    // API 실패시 더미 데이터 사용\r\n    console.log('Using dummy data as fallback...');\r\n    return generateDummyChartData(symbol, range);\r\n  }\r\n};\r\n\r\n// 주식 실시간 가격 정보 가져오기 (수익률 포함)\r\nexport const fetchStockQuote = async (symbol) => {\r\n  try {\r\n    const url = `${BASE_URL}/${symbol}?interval=1m&range=1d`;\r\n    const response = await fetchWithProxy(url);\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\r\n      throw new Error('No quote data available');\r\n    }\r\n    \r\n    const result = data.chart.result[0];\r\n    const meta = result.meta;\r\n    const quotes = result.indicators.quote[0];\r\n    \r\n    // 가장 최근 데이터\r\n    const latestIndex = quotes.close.length - 1;\r\n    const currentPrice = meta.regularMarketPrice || quotes.close[latestIndex] || 0;\r\n    \r\n    return {\r\n      symbol: symbol,\r\n      price: currentPrice,\r\n      change: meta.regularMarketPrice - meta.previousClose || 0,\r\n      changePercent: ((meta.regularMarketPrice - meta.previousClose) / meta.previousClose * 100) || 0,\r\n      previousClose: meta.previousClose || 0,\r\n      open: quotes.open[latestIndex] || 0,\r\n      high: quotes.high[latestIndex] || 0,\r\n      low: quotes.low[latestIndex] || 0,\r\n      volume: quotes.volume[latestIndex] || 0,\r\n      marketCap: meta.marketCap || 0,\r\n      currency: meta.currency || 'USD'\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching stock quote:', error);\r\n    // Yahoo Finance API 실패시 Alpha Vantage 시도\r\n    try {\r\n      console.log('Trying Alpha Vantage as fallback...');\r\n      return await fetchStockDataAlphaVantage(symbol);\r\n    } catch (fallbackError) {\r\n      console.error('Fallback API also failed:', fallbackError);\r\n      // 모든 API 실패시 더미 데이터 사용\r\n      console.log('Using dummy data as final fallback...');\r\n      const dummyData = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol);\r\n      if (dummyData) {\r\n        return dummyData;\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// 주식 수익률 데이터 가져오기 (3개월, YTD)\r\nexport const fetchStockReturns = async (symbol) => {\r\n  try {\r\n    // 3개월 데이터\r\n    const threeMonthUrl = `${BASE_URL}/${symbol}?interval=1d&range=3mo`;\r\n    const threeMonthResponse = await fetchWithProxy(threeMonthUrl);\r\n    const threeMonthData = await threeMonthResponse.json();\r\n    \r\n    // YTD 데이터 (작년 12월 31일부터)\r\n    const currentYear = new Date().getFullYear();\r\n    const lastYearEnd = new Date(currentYear - 1, 11, 31); // 작년 12월 31일\r\n    const ytdDays = Math.ceil((new Date() - lastYearEnd) / (1000 * 60 * 60 * 24));\r\n    const ytdUrl = `${BASE_URL}/${symbol}?interval=1d&range=${ytdDays}d`;\r\n    const ytdResponse = await fetchWithProxy(ytdUrl);\r\n    const ytdData = await ytdResponse.json();\r\n    \r\n    if (!threeMonthData.chart?.result?.[0] || !ytdData.chart?.result?.[0]) {\r\n      throw new Error('No return data available');\r\n    }\r\n    \r\n    const threeMonthResult = threeMonthData.chart.result[0];\r\n    const ytdResult = ytdData.chart.result[0];\r\n    \r\n    const threeMonthQuotes = threeMonthResult.indicators.quote[0];\r\n    const ytdQuotes = ytdResult.indicators.quote[0];\r\n    \r\n    // 3개월 전 가격 (90일 전)\r\n    const threeMonthPrice = threeMonthQuotes.close[0] || 0;\r\n    \r\n    // YTD 시작 가격 (작년 12월 31일)\r\n    const ytdPrice = ytdQuotes.close[0] || 0;\r\n    \r\n    // 현재 가격\r\n    const currentPrice = threeMonthQuotes.close[threeMonthQuotes.close.length - 1] || 0;\r\n    \r\n    return {\r\n      threeMonthReturn: calculateReturns(currentPrice, threeMonthPrice),\r\n      ytdReturn: calculateReturns(currentPrice, ytdPrice)\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching stock returns:', error);\r\n    // API 실패시 더미 데이터 사용\r\n    const dummyData = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol);\r\n    if (dummyData) {\r\n      return {\r\n        threeMonthReturn: dummyData.threeMonthReturn,\r\n        ytdReturn: dummyData.ytdReturn\r\n      };\r\n    }\r\n    return { threeMonthReturn: 0, ytdReturn: 0 };\r\n  }\r\n};\r\n\r\n// 여러 주식 심볼의 실시간 데이터 가져오기 (수익률 포함)\r\nexport const fetchMultipleStockQuotes = async (symbols) => {\r\n  try {\r\n    const promises = symbols.map(async (symbol) => {\r\n      try {\r\n        const [quoteData, returnsData] = await Promise.all([\r\n          fetchStockQuote(symbol),\r\n          fetchStockReturns(symbol)\r\n        ]);\r\n        \r\n        return {\r\n          ...quoteData,\r\n          ...returnsData\r\n        };\r\n      } catch (error) {\r\n        console.error(`Failed to fetch ${symbol}:`, error);\r\n        // API 실패시 더미 데이터 사용\r\n        const dummyData = DUMMY_STOCK_DATA.find(stock => stock.symbol === symbol);\r\n        if (dummyData) {\r\n          console.log(`Using dummy data for ${symbol}`);\r\n          return dummyData;\r\n        }\r\n        return {\r\n          symbol: symbol,\r\n          error: true,\r\n          message: error.message\r\n        };\r\n      }\r\n    });\r\n    \r\n    const results = await Promise.all(promises);\r\n    return results;\r\n  } catch (error) {\r\n    console.error('Error fetching multiple stock quotes:', error);\r\n    // 전체 실패시 더미 데이터 반환\r\n    console.log('All APIs failed, using dummy data...');\r\n    return DUMMY_STOCK_DATA;\r\n  }\r\n};\r\n\r\n// 인기 주식 심볼들\r\nexport const POPULAR_STOCKS = [\r\n  '^GSPC',    // S&P 500\r\n  '^IXIC',    // NASDAQ\r\n  '^DJI',     // DOW JONES\r\n  '^VIX',     // VIX\r\n  '^KS11',    // KOSPI\r\n  '^KQ11'     // KOSDAQ\r\n]; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}