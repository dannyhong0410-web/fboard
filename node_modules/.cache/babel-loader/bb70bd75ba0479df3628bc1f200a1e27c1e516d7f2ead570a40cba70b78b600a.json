{"ast":null,"code":"// Yahoo Finance API를 사용한 주식 데이터 서비스\nconst BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\nconst ALPHA_VANTAGE_URL = 'https://www.alphavantage.co/query';\n\n// CORS 프록시 URL들 (여러 개 시도)\nconst CORS_PROXIES = ['https://cors-anywhere.herokuapp.com/', 'https://api.allorigins.win/raw?url=', 'https://corsproxy.io/?', '' // 직접 호출도 시도\n];\n\n// 프록시를 사용한 API 호출\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\n  if (proxyIndex >= CORS_PROXIES.length) {\n    throw new Error('All proxy attempts failed');\n  }\n  try {\n    const proxyUrl = CORS_PROXIES[proxyIndex] + url;\n    const response = await fetch(proxyUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response;\n  } catch (error) {\n    console.log(`Proxy ${proxyIndex} failed, trying next...`);\n    return fetchWithProxy(url, proxyIndex + 1);\n  }\n};\n\n// Alpha Vantage API를 사용한 주식 데이터 가져오기 (대체 방법)\nexport const fetchStockDataAlphaVantage = async symbol => {\n  try {\n    // 무료 API 키 (실제 사용시에는 본인의 API 키를 사용해야 함)\n    const API_KEY = 'demo'; // 실제 사용시 본인의 API 키로 교체\n    const url = `${ALPHA_VANTAGE_URL}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${API_KEY}`;\n    const response = await fetch(url);\n    const data = await response.json();\n    if (data['Error Message']) {\n      throw new Error(data['Error Message']);\n    }\n    const quote = data['Global Quote'];\n    if (!quote) {\n      throw new Error('No quote data available');\n    }\n    return {\n      symbol: symbol,\n      price: parseFloat(quote['05. price']) || 0,\n      change: parseFloat(quote['09. change']) || 0,\n      changePercent: parseFloat(quote['10. change percent'].replace('%', '')) || 0,\n      previousClose: parseFloat(quote['08. previous close']) || 0,\n      open: parseFloat(quote['02. open']) || 0,\n      high: parseFloat(quote['03. high']) || 0,\n      low: parseFloat(quote['04. low']) || 0,\n      volume: parseInt(quote['06. volume']) || 0,\n      currency: 'USD'\n    };\n  } catch (error) {\n    console.error('Error fetching Alpha Vantage data:', error);\n    throw error;\n  }\n};\n\n// 주식 심볼별 차트 데이터 가져오기\nexport const fetchStockChartData = async (symbol, range = '1mo', interval = '1d') => {\n  try {\n    const url = `${BASE_URL}/${symbol}?interval=${interval}&range=${range}`;\n    const response = await fetchWithProxy(url);\n    const data = await response.json();\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\n      throw new Error('No chart data available');\n    }\n    const result = data.chart.result[0];\n    const timestamps = result.timestamp;\n    const quotes = result.indicators.quote[0];\n\n    // 데이터 정리 및 변환\n    const chartData = timestamps.map((timestamp, index) => {\n      const date = new Date(timestamp * 1000);\n      return {\n        date: date.toLocaleDateString('ko-KR'),\n        timestamp: timestamp,\n        open: quotes.open[index] || 0,\n        high: quotes.high[index] || 0,\n        low: quotes.low[index] || 0,\n        close: quotes.close[index] || 0,\n        volume: quotes.volume[index] || 0\n      };\n    }).filter(item => item.close > 0); // 유효한 데이터만 필터링\n\n    return chartData;\n  } catch (error) {\n    console.error('Error fetching stock data:', error);\n    throw error;\n  }\n};\n\n// 주식 실시간 가격 정보 가져오기\nexport const fetchStockQuote = async symbol => {\n  try {\n    const url = `${BASE_URL}/${symbol}?interval=1m&range=1d`;\n    const response = await fetchWithProxy(url);\n    const data = await response.json();\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\n      throw new Error('No quote data available');\n    }\n    const result = data.chart.result[0];\n    const meta = result.meta;\n    const quotes = result.indicators.quote[0];\n\n    // 가장 최근 데이터\n    const latestIndex = quotes.close.length - 1;\n    return {\n      symbol: symbol,\n      price: meta.regularMarketPrice || quotes.close[latestIndex] || 0,\n      change: meta.regularMarketPrice - meta.previousClose || 0,\n      changePercent: (meta.regularMarketPrice - meta.previousClose) / meta.previousClose * 100 || 0,\n      previousClose: meta.previousClose || 0,\n      open: quotes.open[latestIndex] || 0,\n      high: quotes.high[latestIndex] || 0,\n      low: quotes.low[latestIndex] || 0,\n      volume: quotes.volume[latestIndex] || 0,\n      marketCap: meta.marketCap || 0,\n      currency: meta.currency || 'USD'\n    };\n  } catch (error) {\n    console.error('Error fetching stock quote:', error);\n    // Yahoo Finance API 실패시 Alpha Vantage 시도\n    try {\n      console.log('Trying Alpha Vantage as fallback...');\n      return await fetchStockDataAlphaVantage(symbol);\n    } catch (fallbackError) {\n      console.error('Fallback API also failed:', fallbackError);\n      throw error;\n    }\n  }\n};\n\n// 여러 주식 심볼의 실시간 데이터 가져오기\nexport const fetchMultipleStockQuotes = async symbols => {\n  try {\n    const promises = symbols.map(symbol => fetchStockQuote(symbol));\n    const results = await Promise.allSettled(promises);\n    return results.map((result, index) => {\n      if (result.status === 'fulfilled') {\n        return result.value;\n      } else {\n        console.error(`Failed to fetch ${symbols[index]}:`, result.reason);\n        return {\n          symbol: symbols[index],\n          error: true,\n          message: result.reason.message\n        };\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching multiple stock quotes:', error);\n    throw error;\n  }\n};\n\n// 인기 주식 심볼들\nexport const POPULAR_STOCKS = ['^GSPC',\n// S&P 500\n'^IXIC',\n// NASDAQ\n'^DJI',\n// DOW JONES\n'^VIX',\n// VIX\n'^KS11',\n// KOSPI\n'^KQ11' // KOSDAQ\n];","map":{"version":3,"names":["BASE_URL","ALPHA_VANTAGE_URL","CORS_PROXIES","fetchWithProxy","url","proxyIndex","length","Error","proxyUrl","response","fetch","method","headers","ok","status","error","console","log","fetchStockDataAlphaVantage","symbol","API_KEY","data","json","quote","price","parseFloat","change","changePercent","replace","previousClose","open","high","low","volume","parseInt","currency","fetchStockChartData","range","interval","chart","result","timestamps","timestamp","quotes","indicators","chartData","map","index","date","Date","toLocaleDateString","close","filter","item","fetchStockQuote","meta","latestIndex","regularMarketPrice","marketCap","fallbackError","fetchMultipleStockQuotes","symbols","promises","results","Promise","allSettled","value","reason","message","POPULAR_STOCKS"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/stockApi.js"],"sourcesContent":["// Yahoo Finance API를 사용한 주식 데이터 서비스\r\nconst BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\r\nconst ALPHA_VANTAGE_URL = 'https://www.alphavantage.co/query';\r\n\r\n// CORS 프록시 URL들 (여러 개 시도)\r\nconst CORS_PROXIES = [\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://corsproxy.io/?',\r\n  '' // 직접 호출도 시도\r\n];\r\n\r\n// 프록시를 사용한 API 호출\r\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\r\n  if (proxyIndex >= CORS_PROXIES.length) {\r\n    throw new Error('All proxy attempts failed');\r\n  }\r\n\r\n  try {\r\n    const proxyUrl = CORS_PROXIES[proxyIndex] + url;\r\n    const response = await fetch(proxyUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.log(`Proxy ${proxyIndex} failed, trying next...`);\r\n    return fetchWithProxy(url, proxyIndex + 1);\r\n  }\r\n};\r\n\r\n// Alpha Vantage API를 사용한 주식 데이터 가져오기 (대체 방법)\r\nexport const fetchStockDataAlphaVantage = async (symbol) => {\r\n  try {\r\n    // 무료 API 키 (실제 사용시에는 본인의 API 키를 사용해야 함)\r\n    const API_KEY = 'demo'; // 실제 사용시 본인의 API 키로 교체\r\n    const url = `${ALPHA_VANTAGE_URL}?function=GLOBAL_QUOTE&symbol=${symbol}&apikey=${API_KEY}`;\r\n    \r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    \r\n    if (data['Error Message']) {\r\n      throw new Error(data['Error Message']);\r\n    }\r\n    \r\n    const quote = data['Global Quote'];\r\n    if (!quote) {\r\n      throw new Error('No quote data available');\r\n    }\r\n    \r\n    return {\r\n      symbol: symbol,\r\n      price: parseFloat(quote['05. price']) || 0,\r\n      change: parseFloat(quote['09. change']) || 0,\r\n      changePercent: parseFloat(quote['10. change percent'].replace('%', '')) || 0,\r\n      previousClose: parseFloat(quote['08. previous close']) || 0,\r\n      open: parseFloat(quote['02. open']) || 0,\r\n      high: parseFloat(quote['03. high']) || 0,\r\n      low: parseFloat(quote['04. low']) || 0,\r\n      volume: parseInt(quote['06. volume']) || 0,\r\n      currency: 'USD'\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching Alpha Vantage data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 주식 심볼별 차트 데이터 가져오기\r\nexport const fetchStockChartData = async (symbol, range = '1mo', interval = '1d') => {\r\n  try {\r\n    const url = `${BASE_URL}/${symbol}?interval=${interval}&range=${range}`;\r\n    const response = await fetchWithProxy(url);\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\r\n      throw new Error('No chart data available');\r\n    }\r\n    \r\n    const result = data.chart.result[0];\r\n    const timestamps = result.timestamp;\r\n    const quotes = result.indicators.quote[0];\r\n    \r\n    // 데이터 정리 및 변환\r\n    const chartData = timestamps.map((timestamp, index) => {\r\n      const date = new Date(timestamp * 1000);\r\n      return {\r\n        date: date.toLocaleDateString('ko-KR'),\r\n        timestamp: timestamp,\r\n        open: quotes.open[index] || 0,\r\n        high: quotes.high[index] || 0,\r\n        low: quotes.low[index] || 0,\r\n        close: quotes.close[index] || 0,\r\n        volume: quotes.volume[index] || 0\r\n      };\r\n    }).filter(item => item.close > 0); // 유효한 데이터만 필터링\r\n    \r\n    return chartData;\r\n  } catch (error) {\r\n    console.error('Error fetching stock data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 주식 실시간 가격 정보 가져오기\r\nexport const fetchStockQuote = async (symbol) => {\r\n  try {\r\n    const url = `${BASE_URL}/${symbol}?interval=1m&range=1d`;\r\n    const response = await fetchWithProxy(url);\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\r\n      throw new Error('No quote data available');\r\n    }\r\n    \r\n    const result = data.chart.result[0];\r\n    const meta = result.meta;\r\n    const quotes = result.indicators.quote[0];\r\n    \r\n    // 가장 최근 데이터\r\n    const latestIndex = quotes.close.length - 1;\r\n    \r\n    return {\r\n      symbol: symbol,\r\n      price: meta.regularMarketPrice || quotes.close[latestIndex] || 0,\r\n      change: meta.regularMarketPrice - meta.previousClose || 0,\r\n      changePercent: ((meta.regularMarketPrice - meta.previousClose) / meta.previousClose * 100) || 0,\r\n      previousClose: meta.previousClose || 0,\r\n      open: quotes.open[latestIndex] || 0,\r\n      high: quotes.high[latestIndex] || 0,\r\n      low: quotes.low[latestIndex] || 0,\r\n      volume: quotes.volume[latestIndex] || 0,\r\n      marketCap: meta.marketCap || 0,\r\n      currency: meta.currency || 'USD'\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching stock quote:', error);\r\n    // Yahoo Finance API 실패시 Alpha Vantage 시도\r\n    try {\r\n      console.log('Trying Alpha Vantage as fallback...');\r\n      return await fetchStockDataAlphaVantage(symbol);\r\n    } catch (fallbackError) {\r\n      console.error('Fallback API also failed:', fallbackError);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// 여러 주식 심볼의 실시간 데이터 가져오기\r\nexport const fetchMultipleStockQuotes = async (symbols) => {\r\n  try {\r\n    const promises = symbols.map(symbol => fetchStockQuote(symbol));\r\n    const results = await Promise.allSettled(promises);\r\n    \r\n    return results.map((result, index) => {\r\n      if (result.status === 'fulfilled') {\r\n        return result.value;\r\n      } else {\r\n        console.error(`Failed to fetch ${symbols[index]}:`, result.reason);\r\n        return {\r\n          symbol: symbols[index],\r\n          error: true,\r\n          message: result.reason.message\r\n        };\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching multiple stock quotes:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 인기 주식 심볼들\r\nexport const POPULAR_STOCKS = [\r\n  '^GSPC',    // S&P 500\r\n  '^IXIC',    // NASDAQ\r\n  '^DJI',     // DOW JONES\r\n  '^VIX',     // VIX\r\n  '^KS11',    // KOSPI\r\n  '^KQ11'     // KOSDAQ\r\n]; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}