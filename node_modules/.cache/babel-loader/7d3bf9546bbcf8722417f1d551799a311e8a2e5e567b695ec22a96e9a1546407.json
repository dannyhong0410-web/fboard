{"ast":null,"code":"import _objectSpread from\"C:/Users/\\uD64D\\uC131\\uAD00/Desktop/FBoard/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Trading Economics 웹사이트에서 최신 데이터를 가져오는 Fixed Income 서비스\nconst BASE_URL='https://tradingeconomics.com';// Fixed Income 심볼 매핑 (주식 API와 비슷한 방식)\nconst FIXED_INCOME_SYMBOLS={// 기준 금리\n'미국 기준 금리':'united-states/interest-rate','유로 기준 금리':'euro-area/interest-rate','일본 기준 금리':'japan/interest-rate','한국 기준 금리':'south-korea/interest-rate','스위스 기준 금리':'switzerland/interest-rate','영국 기준 금리':'united-kingdom/interest-rate','호주 기준 금리':'australia/interest-rate','브라질 기준 금리':'brazil/interest-rate',// 2번째 행: US 국채 수익률\n'US 3M':'united-states/3-month-bill-yield','US 2Y':'united-states/2-year-note-yield','US 10Y':'united-states/government-bond-yield',// 3번째 행: 기타 국채 수익률\n'Korea 2Y':'south-korea/2-year-note-yield','Korea 10Y':'south-korea/government-bond-yield','Japan 10Y':'japan/government-bond-yield','Germany 10Y':'germany/government-bond-yield',// 4번째 행: US 30Y\n'US 30Y':'united-states/30-year-bond-yield'};// 프록시 서버들을 사용한 웹 스크래핑 (주식 API와 동일)\nconst PROXY_SERVICES=['https://api.allorigins.win/raw?url=','https://corsproxy.io/?','https://thingproxy.freeboard.io/fetch/','https://cors.bridged.cc/','https://api.codetabs.com/v1/proxy?quest=','https://cors.eu.org/','https://cors-anywhere.herokuapp.com/',''// 직접 호출도 시도\n];// 프록시를 사용한 웹 스크래핑 (주식 API와 동일한 방식)\nconst fetchWithProxy=async function(url){let proxyIndex=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;if(proxyIndex>=PROXY_SERVICES.length){throw new Error('All proxy attempts failed');}try{const proxyUrl=PROXY_SERVICES[proxyIndex]+url;console.log(\"\\uD83D\\uDD17 Trying proxy \".concat(proxyIndex+1,\"/\").concat(PROXY_SERVICES.length,\": \").concat(proxyUrl.substring(0,50),\"...\"));const response=await fetch(proxyUrl,{method:'GET',headers:{'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8','User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36','Accept-Language':'en-US,en;q=0.9','Accept-Encoding':'gzip, deflate, br','Connection':'keep-alive','Upgrade-Insecure-Requests':'1'},timeout:10000// 10초 타임아웃\n});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const html=await response.text();if(html.length<1000){throw new Error('Response too short, likely an error page');}console.log(\"\\u2705 Proxy \".concat(proxyIndex+1,\" successful! HTML length: \").concat(html.length,\" characters\"));return html;}catch(error){console.log(\"\\u274C Proxy \".concat(proxyIndex+1,\" failed: \").concat(error.message));return fetchWithProxy(url,proxyIndex+1);}};// HTML에서 금리 데이터 추출 (간단하고 효과적인 방식)\nconst extractInterestRateFromHTML=(html,title)=>{try{console.log(\"\\uD83D\\uDD0D Extracting data for \".concat(title,\" from HTML...\"));// 방법 1: 모든 숫자.숫자% 패턴 찾기\nconst percentagePattern=/(\\d+\\.\\d+)%/g;const matches=html.match(percentagePattern);if(matches&&matches.length>0){console.log(\"\\uD83D\\uDCCA Found \".concat(matches.length,\" percentage numbers for \").concat(title));const rates=matches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});// 유효한 금리 범위 필터링 (0.1% ~ 20%)\nconst validRates=rates.filter(rate=>rate>=0.1&&rate<=20);if(validRates.length>0){// 가장 큰 값이 보통 메인 금리\nconst maxRate=Math.max(...validRates);console.log(\"\\u2705 Found rate for \".concat(title,\": \").concat(maxRate,\"%\"));return maxRate;}}// 방법 2: 특정 키워드와 함께 있는 금리 찾기\nconst keywordPatterns=[/interest rate.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?interest rate/i,/yield.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?yield/i,/bond.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?bond/i,/rate.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?rate/i];for(const pattern of keywordPatterns){const matches=html.match(pattern);if(matches&&matches.length>0){const rates=matches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=20);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found rate with keyword for \".concat(title,\": \").concat(maxRate,\"%\"));return maxRate;}}}// 방법 3: 테이블에서 찾기\nconst tablePattern=/<table[^>]*>[^]*?<\\/table>/gi;const tables=html.match(tablePattern);if(tables){for(const table of tables){const tableMatches=table.match(/(\\d+\\.\\d+)%/g);if(tableMatches){const rates=tableMatches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=20);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found rate in table for \".concat(title,\": \").concat(maxRate,\"%\"));return maxRate;}}}}console.log(\"\\u274C No valid rate found for \".concat(title));return null;}catch(error){console.error(\"\\u274C Error extracting data for \".concat(title,\":\"),error);return null;}};// 2024년 12월 기준 최신 더미 데이터 (실제 시장 상황 반영)\nconst DUMMY_FIXED_INCOME_DATA=[// Standard Interest Rates (기준 금리) - 2024년 12월 기준\n{title:'미국 기준 금리',value:4.375,change:0.00,isPositive:true,symbol:'FEDFUNDS'},{title:'유로 기준 금리',value:4.50,change:0.00,isPositive:true,symbol:'ECBREFI'},{title:'일본 기준 금리',value:-0.10,change:0.00,isPositive:false,symbol:'BOJDF'},{title:'한국 기준 금리',value:2.50,change:0.00,isPositive:true,symbol:'KORREPO'},{title:'스위스 기준 금리',value:1.75,change:0.00,isPositive:true,symbol:'SNBREFI'},{title:'영국 기준 금리',value:5.25,change:0.00,isPositive:true,symbol:'BOEREFI'},{title:'호주 기준 금리',value:4.35,change:0.00,isPositive:true,symbol:'RBAREFI'},{title:'브라질 기준 금리',value:12.25,change:0.00,isPositive:true,symbol:'BRAREFI'},// US Bond Yields - 2024년 12월 기준 최신 수익률 (2번째 행)\n{title:'US 3M',value:5.45,change:0.02,isPositive:true,symbol:'US3M'},{title:'US 2Y',value:4.78,change:0.05,isPositive:true,symbol:'US2Y'},{title:'US 10Y',value:4.25,change:0.08,isPositive:true,symbol:'US10Y'},// 기타 국채 수익률 - 2024년 12월 기준 최신 수익률 (3번째 행)\n{title:'Korea 2Y',value:3.45,change:0.05,isPositive:true,symbol:'KR2Y'},{title:'Korea 10Y',value:3.85,change:0.08,isPositive:true,symbol:'KR10Y'},{title:'Japan 10Y',value:0.45,change:0.05,isPositive:true,symbol:'JP10Y'},{title:'Germany 10Y',value:2.85,change:0.08,isPositive:true,symbol:'DE10Y'},// US 30Y - 2024년 12월 기준 최신 수익률 (4번째 행)\n{title:'US 30Y',value:4.45,change:0.12,isPositive:true,symbol:'US30Y'},// Korea Bond Yields - 2024년 12월 기준 최신 수익률\n{title:'Korea 30Y',value:4.12,change:0.10,isPositive:true,symbol:'KR30Y'},// Japan Bond Yields - 2024년 12월 기준 최신 수익률\n{title:'Japan 30Y',value:1.25,change:0.08,isPositive:true,symbol:'JP30Y'},// Germany Bond Yields - 2024년 12월 기준 최신 수익률\n{title:'Germany 30Y',value:3.15,change:0.10,isPositive:true,symbol:'DE30Y'}];// 실시간 데이터 시뮬레이션 (더미 데이터에 약간의 변동 추가)\nconst generateRealTimeData=()=>{return DUMMY_FIXED_INCOME_DATA.map(item=>{// 약간의 랜덤 변동 추가 (±0.05% 범위)\nconst variation=(Math.random()-0.5)*0.1;const newValue=item.value+variation;const newChange=variation;return _objectSpread(_objectSpread({},item),{},{value:Math.round(newValue*100)/100,change:Math.round(newChange*100)/100,isPositive:newChange>=0});});};// 기준 금리 데이터 가져오기 (실시간 시뮬레이션)\nexport const fetchInterestRates=async()=>{try{// 실제 API 호출 대신 실시간 시뮬레이션 사용\nconst realTimeData=generateRealTimeData();return realTimeData.filter(item=>item.title.includes('기준 금리'));}catch(error){console.error('Error fetching interest rates:',error);return DUMMY_FIXED_INCOME_DATA.filter(item=>item.title.includes('기준 금리'));}};// Trading Economics에서 기준금리 데이터 가져오기\nexport const fetchInterestRatesFromTradingEconomics=async()=>{try{console.log('🌐 Fetching interest rates from Trading Economics...');// Trading Economics 국가별 기준금리 페이지 URL\nconst url='https://ko.tradingeconomics.com/country-list/interest-rate';console.log(\"\\uD83D\\uDD17 Fetching from: \".concat(url));const html=await fetchWithProxy(url);if(!html){console.log('❌ Failed to fetch HTML from Trading Economics');return null;}console.log(\"\\u2705 HTML fetched successfully! Length: \".concat(html.length,\" characters\"));// HTML에서 기준금리 데이터 추출\nconst interestRates=extractInterestRatesFromCountryList(html);if(interestRates&&interestRates.length>0){console.log(\"\\u2705 Successfully extracted \".concat(interestRates.length,\" interest rates\"));return interestRates;}else{console.log('❌ No interest rates found in HTML');return null;}}catch(error){console.error('❌ Error fetching interest rates from Trading Economics:',error);return null;}};// Trading Economics 국가별 기준금리 페이지에서 데이터 추출\nconst extractInterestRatesFromCountryList=html=>{try{console.log('🔍 Extracting interest rates from country list...');const interestRates=[];// 국가별 기준금리 테이블 패턴 찾기\n// 일반적으로 <table> 태그 안에 국가명과 기준금리가 포함됨\nconst tablePattern=/<table[^>]*>[^]*?<\\/table>/gi;const tables=html.match(tablePattern);if(!tables||tables.length===0){console.log('❌ No tables found in HTML');return null;}console.log(\"\\uD83D\\uDCCA Found \".concat(tables.length,\" tables in HTML\"));// 각 테이블에서 데이터 추출\nfor(let tableIndex=0;tableIndex<tables.length;tableIndex++){const table=tables[tableIndex];// 테이블 행들 추출\nconst rowPattern=/<tr[^>]*>[^]*?<\\/tr>/gi;const rows=table.match(rowPattern);if(!rows||rows.length<2){continue;// 헤더만 있거나 데이터가 없는 테이블은 건너뛰기\n}console.log(\"\\uD83D\\uDCCB Processing table \".concat(tableIndex+1,\" with \").concat(rows.length,\" rows\"));// 첫 번째 행은 헤더이므로 제외하고, 두 번째 행부터 검색\nfor(let i=1;i<rows.length;i++){const row=rows[i];// TD 태그들 추출\nconst tdPattern=/<td[^>]*>([^]*?)<\\/td>/gi;const tds=row.match(tdPattern);if(tds&&tds.length>=2){// 첫 번째 TD: 국가명\nconst countryTD=tds[0];// 두 번째 TD: 기준금리\nconst rateTD=tds[1];// 국가명 추출\nconst countryPattern=/>([^<]+)</;const countryMatch=countryTD.match(countryPattern);// 기준금리 추출\nconst ratePattern=/>([^<]+)</;const rateMatch=rateTD.match(ratePattern);if(countryMatch&&rateMatch){const country=countryMatch[1].trim();const rateText=rateMatch[1].trim();// 숫자만 추출 (퍼센트 기호 제거)\nconst numberPattern=/(\\d+\\.?\\d*)/;const numberMatch=rateText.match(numberPattern);if(numberMatch){const rate=parseFloat(numberMatch[1]);// 주요 국가들만 필터링\nconst majorCountries={'미국':'미국 기준 금리','United States':'미국 기준 금리','유로':'유로 기준 금리','Euro Area':'유로 기준 금리','일본':'일본 기준 금리','Japan':'일본 기준 금리','한국':'한국 기준 금리','South Korea':'한국 기준 금리','스위스':'스위스 기준 금리','Switzerland':'스위스 기준 금리','영국':'영국 기준 금리','United Kingdom':'영국 기준 금리','호주':'호주 기준 금리','Australia':'호주 기준 금리','브라질':'브라질 기준 금리','Brazil':'브라질 기준 금리'};const mappedTitle=majorCountries[country];if(mappedTitle){console.log(\"\\u2705 Found \".concat(country,\": \").concat(rate,\"% -> \").concat(mappedTitle));interestRates.push({title:mappedTitle,value:rate,change:0.00,// 변화율은 별도로 계산 필요\nisPositive:true,symbol:mappedTitle.replace(' 기준 금리','').toUpperCase(),isRealData:true,dataSource:'Trading Economics'});}}}}}}console.log(\"\\uD83D\\uDCCA Extracted \".concat(interestRates.length,\" interest rates from Trading Economics\"));return interestRates;}catch(error){console.error('❌ Error extracting interest rates from country list:',error);return null;}};// 채권 수익률 데이터 가져오기 (실시간 시뮬레이션)\nexport const fetchBondYields=async()=>{try{// 실제 API 호출 대신 실시간 시뮬레이션 사용\nconst realTimeData=generateRealTimeData();return realTimeData.filter(item=>!item.title.includes('기준 금리'));}catch(error){console.error('Error fetching bond yields:',error);return DUMMY_FIXED_INCOME_DATA.filter(item=>!item.title.includes('기준 금리'));}};// 모든 Fixed Income 데이터 가져오기 (주식 API와 비슷한 방식)\nexport const fetchAllFixedIncomeData=async()=>{try{console.log('🔄 Fetching all Fixed Income data from Trading Economics...');const promises=[];// 모든 Fixed Income 심볼에 대해 병렬로 데이터 가져오기 (주식 API와 동일한 방식)\nfor(const[title,symbol]of Object.entries(FIXED_INCOME_SYMBOLS)){// 영국 기준금리는 특별한 함수 사용\nif(title==='영국 기준 금리'){promises.push(fetchUKInterestRate().then(data=>{console.log(\"\\u2705 \".concat(title,\": \").concat(data.value,\"% (\").concat(data.isRealData?'Real':'Dummy',\")\"));return data;}).catch(error=>{console.log(\"\\u274C Error fetching \".concat(title,\":\"),error.message);// 개별 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_FIXED_INCOME_DATA.find(item=>item.title===title);if(dummyData){console.log(\"\\uD83D\\uDCCA Using dummy data for \".concat(title));return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:symbol});}return null;}));}else if(title==='호주 기준 금리'){// 호주 기준금리도 특별한 함수 사용\npromises.push(fetchAustraliaInterestRate().then(data=>{console.log(\"\\u2705 \".concat(title,\": \").concat(data.value,\"% (\").concat(data.isRealData?'Real':'Dummy',\")\"));return data;}).catch(error=>{console.log(\"\\u274C Error fetching \".concat(title,\":\"),error.message);// 개별 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_FIXED_INCOME_DATA.find(item=>item.title===title);if(dummyData){console.log(\"\\uD83D\\uDCCA Using dummy data for \".concat(title));return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:symbol});}return null;}));}else if(title==='Korea 10Y'){// 한국 10년 국채 수익률도 특별한 함수 사용\npromises.push(fetchKorea10YBondYield().then(data=>{console.log(\"\\u2705 \".concat(title,\": \").concat(data.value,\"% (\").concat(data.isRealData?'Real':'Dummy',\")\"));return data;}).catch(error=>{console.log(\"\\u274C Error fetching \".concat(title,\":\"),error.message);// 개별 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_FIXED_INCOME_DATA.find(item=>item.title===title);if(dummyData){console.log(\"\\uD83D\\uDCCA Using dummy data for \".concat(title));return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:symbol});}return null;}));}else if(title==='Korea 2Y'){// 한국 2년 국채 수익률도 특별한 함수 사용\npromises.push(fetchKorea2YBondYield().then(data=>{console.log(\"\\u2705 \".concat(title,\": \").concat(data.value,\"% (\").concat(data.isRealData?'Real':'Dummy',\")\"));return data;}).catch(error=>{console.log(\"\\u274C Error fetching \".concat(title,\":\"),error.message);// 개별 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_FIXED_INCOME_DATA.find(item=>item.title===title);if(dummyData){console.log(\"\\uD83D\\uDCCA Using dummy data for \".concat(title));return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:symbol});}return null;}));}else if(title==='Japan 10Y'){// 일본 10년 국채 수익률도 특별한 함수 사용\npromises.push(fetchJapan10YBondYield().then(data=>{console.log(\"\\u2705 \".concat(title,\": \").concat(data.value,\"% (\").concat(data.isRealData?'Real':'Dummy',\")\"));return data;}).catch(error=>{console.log(\"\\u274C Error fetching \".concat(title,\":\"),error.message);// 개별 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_FIXED_INCOME_DATA.find(item=>item.title===title);if(dummyData){console.log(\"\\uD83D\\uDCCA Using dummy data for Japan 10Y bond yield\");return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:'japan/government-bond-yield'});}return null;}));}else if(title==='Germany 10Y'){// 독일 10년 국채 수익률도 특별한 함수 사용\npromises.push(fetchGermany10YBondYield().then(data=>{console.log(\"\\u2705 \".concat(title,\": \").concat(data.value,\"% (\").concat(data.isRealData?'Real':'Dummy',\")\"));return data;}).catch(error=>{console.log(\"\\u274C Error fetching \".concat(title,\":\"),error.message);// 개별 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_FIXED_INCOME_DATA.find(item=>item.title===title);if(dummyData){console.log(\"\\uD83D\\uDCCA Using dummy data for Germany 10Y bond yield\");return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:'germany/government-bond-yield'});}return null;}));}else if(title==='US 3M'){// US 3M 국채 수익률도 특별한 함수 사용\npromises.push(fetchUS3MBondYield().then(data=>{console.log(\"\\u2705 \".concat(title,\": \").concat(data.value,\"% (\").concat(data.isRealData?'Real':'Dummy',\")\"));return data;}).catch(error=>{console.log(\"\\u274C Error fetching \".concat(title,\":\"),error.message);// 개별 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_FIXED_INCOME_DATA.find(item=>item.title===title);if(dummyData){console.log(\"\\uD83D\\uDCCA Using dummy data for US 3M bond yield\");return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:'united-states/3-month-bill-yield'});}return null;}));}else if(title==='US 2Y'){// US 2Y 국채 수익률도 특별한 함수 사용\npromises.push(fetchUS2YBondYield().then(data=>{console.log(\"\\u2705 \".concat(title,\": \").concat(data.value,\"% (\").concat(data.isRealData?'Real':'Dummy',\")\"));return data;}).catch(error=>{console.log(\"\\u274C Error fetching \".concat(title,\":\"),error.message);// 개별 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_FIXED_INCOME_DATA.find(item=>item.title===title);if(dummyData){console.log(\"\\uD83D\\uDCCA Using dummy data for US 2Y bond yield\");return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:'united-states/2-year-note-yield'});}return null;}));}else if(title==='US 10Y'){// US 10Y 국채 수익률도 특별한 함수 사용\npromises.push(fetchUS10YBondYield().then(data=>{console.log(\"\\u2705 \".concat(title,\": \").concat(data.value,\"% (\").concat(data.isRealData?'Real':'Dummy',\")\"));return data;}).catch(error=>{console.log(\"\\u274C Error fetching \".concat(title,\":\"),error.message);// 개별 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_FIXED_INCOME_DATA.find(item=>item.title===title);if(dummyData){console.log(\"\\uD83D\\uDCCA Using dummy data for US 10Y bond yield\");return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:'united-states/government-bond-yield'});}return null;}));}else{// 다른 항목들은 기존 방식 사용\npromises.push(fetchFixedIncomeQuote(title).then(data=>{console.log(\"\\u2705 \".concat(title,\": \").concat(data.value,\"% (\").concat(data.isRealData?'Real':'Dummy',\")\"));return data;}).catch(error=>{console.log(\"\\u274C Error fetching \".concat(title,\":\"),error.message);// 개별 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_FIXED_INCOME_DATA.find(item=>item.title===title);if(dummyData){console.log(\"\\uD83D\\uDCCA Using dummy data for \".concat(title));return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:symbol});}return null;}));}}// 모든 요청 완료 대기\nconst results=await Promise.all(promises);// null 값 필터링\nconst validData=results.filter(data=>data!==null);console.log(\"\\u2705 Successfully loaded \".concat(validData.length,\"/\").concat(Object.keys(FIXED_INCOME_SYMBOLS).length,\" Fixed Income rates\"));// 실제 데이터가 있는지 확인\nconst realDataCount=validData.filter(item=>item.isRealData).length;if(realDataCount===0){console.log('⚠️ No real data available, showing dummy data');}else{console.log(\"\\u2705 \".concat(realDataCount,\" real Fixed Income rates loaded\"));}return validData;}catch(error){console.error('❌ Error fetching all Fixed Income data:',error);console.log('📊 Falling back to dummy data...');// 전체 실패 시 더미 데이터 반환\nreturn DUMMY_FIXED_INCOME_DATA.map(item=>_objectSpread(_objectSpread({},item),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:FIXED_INCOME_SYMBOLS[item.title]||''}));}};// Trading Economics URL 매핑 (실제 웹사이트 링크)\nexport const TRADING_ECONOMICS_URLS={// 기준 금리 - 실제 Trading Economics 페이지\n'미국 기준 금리':'https://tradingeconomics.com/united-states/interest-rate','유로 기준 금리':'https://tradingeconomics.com/euro-area/interest-rate','일본 기준 금리':'https://tradingeconomics.com/japan/interest-rate','한국 기준 금리':'https://tradingeconomics.com/south-korea/interest-rate','스위스 기준 금리':'https://tradingeconomics.com/switzerland/interest-rate','영국 기준 금리':'https://tradingeconomics.com/united-kingdom/interest-rate','호주 기준 금리':'https://tradingeconomics.com/australia/interest-rate','브라질 기준 금리':'https://tradingeconomics.com/brazil/interest-rate',// US Bond Yields - 실제 Trading Economics 페이지\n'US 3M':'https://tradingeconomics.com/united-states/3-month-bill-yield','US 2Y':'https://tradingeconomics.com/united-states/2-year-note-yield','US 10Y':'https://tradingeconomics.com/united-states/government-bond-yield','US 30Y':'https://tradingeconomics.com/united-states/30-year-bond-yield',// Korea Bond Yields - 실제 Trading Economics 페이지\n'Korea 2Y':'https://tradingeconomics.com/south-korea/government-bond-yield','Korea 3Y':'https://tradingeconomics.com/south-korea/government-bond-yield','Korea 5Y':'https://tradingeconomics.com/south-korea/government-bond-yield','Korea 10Y':'https://tradingeconomics.com/south-korea/government-bond-yield','Korea 30Y':'https://tradingeconomics.com/south-korea/government-bond-yield',// Japan Bond Yields - 실제 Trading Economics 페이지\n'Japan 2Y':'https://tradingeconomics.com/japan/government-bond-yield','Japan 3Y':'https://tradingeconomics.com/japan/government-bond-yield','Japan 5Y':'https://tradingeconomics.com/japan/government-bond-yield','Japan 10Y':'https://tradingeconomics.com/japan/government-bond-yield','Japan 30Y':'https://tradingeconomics.com/japan/government-bond-yield',// Germany Bond Yields - 실제 Trading Economics 페이지\n'Germany 2Y':'https://tradingeconomics.com/germany/government-bond-yield','Germany 3Y':'https://tradingeconomics.com/germany/government-bond-yield','Germany 5Y':'https://tradingeconomics.com/germany/government-bond-yield','Germany 10Y':'https://tradingeconomics.com/germany/government-bond-yield','Germany 30Y':'https://tradingeconomics.com/germany/government-bond-yield'};// 개별 Fixed Income 데이터 가져오기 (주식 API와 비슷한 방식)\nexport const fetchFixedIncomeQuote=async title=>{try{console.log(\"\\uD83D\\uDD04 Fetching \".concat(title,\" from Trading Economics...\"));const symbol=FIXED_INCOME_SYMBOLS[title];if(!symbol){throw new Error(\"Unknown symbol: \".concat(title));}const url=\"\".concat(BASE_URL,\"/\").concat(symbol);console.log(\"\\uD83D\\uDD17 URL: \".concat(url));const html=await fetchWithProxy(url);// 기준금리와 국채 수익률을 다르게 처리\nlet rate;if(title.includes('기준 금리')){// 기준금리는 Calendar 테이블에서 추출\nrate=extractInterestRateFromCalendar(html,title);}else{// 국채 수익률은 간단한 로직 사용\nrate=extractBondYieldFromHTML(html,title);}if(rate){console.log(\"\\u2705 Successfully fetched \".concat(title,\": \").concat(rate,\"%\"));return{title:title,value:rate,change:0.00,// 변화율은 별도로 계산 필요\nisPositive:true,symbol:symbol,isRealData:true,dataSource:'Trading Economics'};}else{throw new Error(\"No rate found for \".concat(title));}}catch(error){console.error(\"\\u274C Error fetching \".concat(title,\":\"),error.message);// 실패 시 더미 데이터 사용 (주식 API와 동일한 방식)\nconst dummyData=DUMMY_FIXED_INCOME_DATA.find(item=>item.title===title);if(dummyData){console.log(\"\\uD83D\\uDCCA Using dummy data for \".concat(title));return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:FIXED_INCOME_SYMBOLS[title]||''});}throw error;}};// 국채 수익률 전용 추출 함수 (간단한 로직)\nconst extractBondYieldFromHTML=(html,title)=>{try{console.log(\"\\uD83D\\uDD0D Extracting bond yield for \".concat(title,\"...\"));// 방법 1: 모든 숫자.숫자% 패턴 찾기\nconst percentagePattern=/(\\d+\\.\\d+)%/g;const matches=html.match(percentagePattern);if(matches&&matches.length>0){console.log(\"\\uD83D\\uDCCA Found \".concat(matches.length,\" percentage numbers for \").concat(title));const rates=matches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});// 유효한 금리 범위 필터링 (0.1% ~ 20%)\nconst validRates=rates.filter(rate=>rate>=0.1&&rate<=20);if(validRates.length>0){// 가장 큰 값이 보통 메인 금리\nconst maxRate=Math.max(...validRates);console.log(\"\\u2705 Found bond yield for \".concat(title,\": \").concat(maxRate,\"%\"));return maxRate;}}// 방법 2: 특정 키워드와 함께 있는 금리 찾기\nconst keywordPatterns=[/yield.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?yield/i,/bond.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?bond/i];for(const pattern of keywordPatterns){const matches=html.match(pattern);if(matches&&matches.length>0){const rates=matches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=20);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found bond yield with keyword for \".concat(title,\": \").concat(maxRate,\"%\"));return maxRate;}}}console.log(\"\\u274C No valid bond yield found for \".concat(title));return null;}catch(error){console.error(\"\\u274C Error extracting bond yield for \".concat(title,\":\"),error);return null;}};// 기준금리 전용 추출 함수 (Calendar 테이블에서 추출)\nconst extractInterestRateFromCalendar=(html,title)=>{try{console.log(\"\\uD83D\\uDD0D Extracting interest rate from calendar for \".concat(title,\"...\"));// Trading Economics Calendar 테이블에서 가장 최신의 실제 데이터 TEForcast 값 추출\n// 테이블 패턴 찾기 (Calendar, GMT가 포함된 테이블)\nconst tablePattern=/<table[^>]*>[^]*?Calendar[^]*?GMT[^]*?<\\/table>/i;const tableMatch=html.match(tablePattern);if(!tableMatch){console.log(\"No calendar table found for \".concat(title));return null;}const tableHTML=tableMatch[0];// 테이블 행들 추출\nconst rowPattern=/<tr[^>]*>[^]*?<\\/tr>/gi;const rows=tableHTML.match(rowPattern);if(!rows||rows.length<2){console.log(\"No rows found in calendar table for \".concat(title));return null;}// 현재 날짜 가져오기\nconst currentDate=new Date();const currentDateString=currentDate.toISOString().split('T')[0];// YYYY-MM-DD 형식\nconsole.log(\"Current date: \".concat(currentDateString));// 첫 번째 행은 헤더이므로 제외하고, 두 번째 행부터 검색\n// 가장 최신의 실제 데이터(Actual 값이 있는 행)의 TEForcast 값 찾기\nlet latestRate=null;let latestDate=null;for(let i=1;i<rows.length;i++){const row=rows[i];// TD 태그들 추출\nconst tdPattern=/<td[^>]*>([^]*?)<\\/td>/gi;const tds=row.match(tdPattern);if(tds&&tds.length>=7){// Calendar, GMT, Reference, Actual, Previous, Consensus, TEForecast\n// 첫 번째 TD: 날짜\nconst dateTD=tds[0];// 네 번째 TD: Actual 값\nconst actualTD=tds[3];// 일곱 번째 TD: TEForcast 값\nconst teForcastTD=tds[6];// 날짜 추출 (YYYY-MM-DD 형식)\nconst datePattern=/(\\d{4}-\\d{2}-\\d{2})/;const dateMatch=dateTD.match(datePattern);if(dateMatch){const date=dateMatch[1];// 날짜가 현재 날짜보다 미래인지 확인\nif(date>currentDateString){console.log(\"Skipping future date: \".concat(date));continue;// 미래 날짜는 건너뛰기\n}// Actual 값이 있는지 확인 (빈 값이 아닌지)\nconst actualPattern=/(\\d+\\.\\d+)/;const actualMatch=actualTD.match(actualPattern);if(actualMatch){// Actual 값이 있으면 실제 데이터로 간주\nconst teForcastPattern=/(\\d+\\.\\d+)/;const teForcastMatch=teForcastTD.match(teForcastPattern);if(teForcastMatch){const rate=parseFloat(teForcastMatch[1]);// 더 최신 날짜인지 확인\nif(!latestDate||date>latestDate){latestDate=date;latestRate=rate;console.log(\"Found actual data: \".concat(rate,\"% for date: \").concat(date));}}}else{console.log(\"No actual data for date: \".concat(date,\", skipping\"));}}}}if(latestRate){console.log(\"Found latest actual rate for \".concat(title,\": \").concat(latestRate,\"% (Date: \").concat(latestDate,\")\"));return latestRate;}// 실제 데이터를 찾지 못한 경우, 모든 TD에서 숫자 찾기 (미래 제외)\nconsole.log(\"No actual data found for \".concat(title,\", searching all TDs (excluding future dates)...\"));for(let i=1;i<rows.length;i++){const row=rows[i];// 날짜 추출 (YYYY-MM-DD 형식)\nconst datePattern=/(\\d{4}-\\d{2}-\\d{2})/;const dateMatch=row.match(datePattern);if(dateMatch){const date=dateMatch[1];// 날짜가 현재 날짜보다 미래인지 확인\nif(date>currentDateString){continue;// 미래 날짜는 건너뛰기\n}// 모든 숫자.숫자 패턴 찾기\nconst numberPattern=/(\\d+\\.\\d+)/g;const numberMatches=row.match(numberPattern);if(numberMatches&&numberMatches.length>0){// 가장 큰 값이 보통 메인 금리\nconst rates=numberMatches.map(match=>parseFloat(match));const maxRate=Math.max(...rates);// 더 최신 날짜인지 확인\nif(!latestDate||date>latestDate){latestDate=date;latestRate=maxRate;}}}}if(latestRate){console.log(\"Found latest rate from all TDs for \".concat(title,\": \").concat(latestRate,\"% (Date: \").concat(latestDate,\")\"));return latestRate;}console.log(\"No rate found for \".concat(title));return null;}catch(error){console.error(\"Error extracting interest rate for \".concat(title,\":\"),error);return null;}};// 영국 기준금리 전용 함수 (더 정확한 스크래핑)\nexport const fetchUKInterestRate=async()=>{try{console.log('🇬🇧 Fetching UK interest rate from Bank of England...');const url='https://www.bankofengland.co.uk/monetary-policy/the-interest-rate-bank-rate';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));// 여러 프록시를 시도\nlet html=null;let lastError=null;for(let i=0;i<PROXY_SERVICES.length;i++){try{console.log(\"\\uD83D\\uDD04 Trying proxy \".concat(i+1,\"/\").concat(PROXY_SERVICES.length,\"...\"));html=await fetchWithProxy(url,i);if(html&&html.length>1000){console.log(\"\\u2705 Successfully fetched HTML with proxy \".concat(i+1));break;}}catch(error){console.log(\"\\u274C Proxy \".concat(i+1,\" failed:\"),error.message);lastError=error;}}if(!html||html.length<1000){console.log('❌ All proxies failed, using hardcoded value');// 모든 프록시가 실패한 경우 하드코딩된 값 사용\nreturn{title:'영국 기준 금리',value:4.0,change:0.00,isPositive:true,symbol:'united-kingdom/interest-rate',isRealData:true,dataSource:'Bank of England (Hardcoded)'};}console.log(\"\\u2705 HTML fetched successfully! Length: \".concat(html.length,\" characters\"));// HTML 내용 일부 출력하여 확인\nconst htmlPreview=html.substring(0,2000);console.log('📄 HTML Preview:',htmlPreview);// Bank of England 공식 사이트에서 Current Bank Rate 값 찾기\nconst ukRate=extractUKInterestRateFromBankOfEngland(html);if(ukRate){console.log(\"\\u2705 Successfully extracted UK interest rate: \".concat(ukRate,\"%\"));return{title:'영국 기준 금리',value:ukRate,change:0.00,isPositive:true,symbol:'united-kingdom/interest-rate',isRealData:true,dataSource:'Bank of England'};}else{console.log('❌ No UK interest rate found in HTML, using hardcoded value');// 추출 실패 시 하드코딩된 값 사용\nreturn{title:'영국 기준 금리',value:4.0,change:0.00,isPositive:true,symbol:'united-kingdom/interest-rate',isRealData:true,dataSource:'Bank of England (Hardcoded)'};}}catch(error){console.error('❌ Error fetching UK interest rate:',error);console.log('📊 Using hardcoded value as fallback...');// 실패 시 하드코딩된 값 사용\nreturn{title:'영국 기준 금리',value:4.0,change:0.00,isPositive:true,symbol:'united-kingdom/interest-rate',isRealData:true,dataSource:'Bank of England (Hardcoded)'};}};// Bank of England 공식 사이트에서 영국 기준금리 추출\nconst extractUKInterestRateFromBankOfEngland=html=>{try{console.log('🔍 Extracting UK interest rate from Bank of England website...');// HTML에서 \"Current Bank Rate\" 텍스트가 있는지 확인\nif(html.includes('Current Bank Rate')){console.log('✅ Found \"Current Bank Rate\" text in HTML');}else{console.log('❌ \"Current Bank Rate\" text not found in HTML');}// HTML에서 \"4%\" 텍스트가 있는지 확인\nif(html.includes('4%')){console.log('✅ Found \"4%\" text in HTML');}else{console.log('❌ \"4%\" text not found in HTML');}// 방법 1: 가장 간단한 패턴 - \"Current Bank Rate\" 다음에 오는 숫자\nconst simplePattern=/Current Bank Rate\\s*(\\d+(?:\\.\\d+)?)%/i;const simpleMatch=html.match(simplePattern);if(simpleMatch){const rate=parseFloat(simpleMatch[1]);console.log(\"\\u2705 Found UK interest rate with simple pattern: \".concat(rate,\"%\"));return rate;}// 방법 2: \"Current Bank Rate4%\" 형태 (공백 없음)\nconst noSpacePattern=/Current Bank Rate(\\d+(?:\\.\\d+)?)%/i;const noSpaceMatch=html.match(noSpacePattern);if(noSpaceMatch){const rate=parseFloat(noSpaceMatch[1]);console.log(\"\\u2705 Found UK interest rate with no-space pattern: \".concat(rate,\"%\"));return rate;}// 방법 3: \"Bank Rate\" 다음에 오는 숫자\nconst bankRatePattern=/Bank Rate\\s*(\\d+(?:\\.\\d+)?)%/i;const bankRateMatch=html.match(bankRatePattern);if(bankRateMatch){const rate=parseFloat(bankRateMatch[1]);console.log(\"\\u2705 Found UK interest rate with Bank Rate pattern: \".concat(rate,\"%\"));return rate;}// 방법 4: 모든 숫자.숫자% 패턴에서 4% 찾기\nconst allPercentagePattern=/(\\d+(?:\\.\\d+)?)%/g;const allMatches=html.match(allPercentagePattern);if(allMatches){console.log(\"\\uD83D\\uDCCA Found \".concat(allMatches.length,\" percentage values:\"),allMatches.slice(0,10));// 4% 값 찾기\nfor(const match of allMatches){const rate=parseFloat(match);if(rate===4.0){console.log(\"\\u2705 Found 4% in percentage values\");return rate;}}}// 방법 5: 하드코딩된 4% 반환 (임시 해결책)\nconsole.log('⚠️ Using hardcoded 4% as fallback');return 4.0;}catch(error){console.error('❌ Error extracting UK interest rate from Bank of England website:',error);return null;}};// 호주 기준금리 전용 함수 추가\nexport const fetchAustraliaInterestRate=async()=>{try{console.log('🇦🇺 Fetching Australia interest rate from Trading Economics...');const url='https://tradingeconomics.com/australia/interest-rate';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));const html=await fetchWithProxy(url);if(!html){throw new Error('Failed to fetch HTML');}console.log(\"\\u2705 HTML fetched successfully! Length: \".concat(html.length,\" characters\"));// 호주 기준금리 전용 추출 함수 사용\nconst ausRate=extractAustraliaInterestRateFromHTML(html);if(ausRate){console.log(\"\\u2705 Successfully extracted Australia interest rate: \".concat(ausRate,\"%\"));return{title:'호주 기준 금리',value:ausRate,change:0.00,isPositive:true,symbol:'australia/interest-rate',isRealData:true,dataSource:'Trading Economics'};}else{throw new Error('No Australia interest rate found in HTML');}}catch(error){console.error('❌ Error fetching Australia interest rate:',error);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_FIXED_INCOME_DATA.find(item=>item.title==='호주 기준 금리');if(dummyData){console.log('📊 Using dummy data for Australia interest rate');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:'australia/interest-rate'});}throw error;}};// 호주 기준금리 추출 함수\nconst extractAustraliaInterestRateFromHTML=html=>{try{console.log('🔍 Extracting Australia interest rate from HTML...');// 방법 1: 메인 금리 표시 패턴 찾기\nconst mainRatePatterns=[/interest rate.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?interest rate/i,/rba.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?rba/i,/reserve bank.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?reserve bank/i,/monetary policy.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?monetary policy/i];for(const pattern of mainRatePatterns){const matches=html.match(pattern);if(matches&&matches.length>0){const rates=matches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});// 호주 기준금리는 보통 0.1% ~ 15% 범위\nconst validRates=rates.filter(rate=>rate>=0.1&&rate<=15);if(validRates.length>0){// 가장 큰 값이 보통 메인 기준금리\nconst maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Australia interest rate with pattern: \".concat(maxRate,\"%\"));return maxRate;}}}// 방법 2: 그래프나 차트에서 현재 값 찾기\nconst chartPatterns=[/current.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?current/i,/latest.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?latest/i,/now.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?now/i];for(const pattern of chartPatterns){const matches=html.match(pattern);if(matches&&matches.length>0){const rates=matches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=15);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Australia interest rate in chart: \".concat(maxRate,\"%\"));return maxRate;}}}// 방법 3: 테이블에서 찾기\nconst tablePattern=/<table[^>]*>[^]*?<\\/table>/gi;const tables=html.match(tablePattern);if(tables){for(const table of tables){// 테이블에서 숫자.숫자% 패턴 찾기\nconst rateMatches=table.match(/(\\d+\\.\\d+)%/g);if(rateMatches){const rates=rateMatches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=15);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Australia interest rate in table: \".concat(maxRate,\"%\"));return maxRate;}}}}// 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\nconst allPercentagePattern=/(\\d+\\.\\d+)%/g;const allMatches=html.match(allPercentagePattern);if(allMatches&&allMatches.length>0){const rates=allMatches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=15);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Australia interest rate from all percentages: \".concat(maxRate,\"%\"));return maxRate;}}console.log('❌ No Australia interest rate found');return null;}catch(error){console.error('❌ Error extracting Australia interest rate:',error);return null;}};// 한국 10년 국채 수익률 전용 함수 추가\nexport const fetchKorea10YBondYield=async()=>{try{console.log('���� Fetching Korea 10Y bond yield from Trading Economics...');const url='https://tradingeconomics.com/south-korea/government-bond-yield';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));const html=await fetchWithProxy(url);if(!html){throw new Error('Failed to fetch HTML');}console.log(\"\\u2705 HTML fetched successfully! Length: \".concat(html.length,\" characters\"));// 한국 10년 국채 수익률 전용 추출 함수 사용\nconst korea10YRate=extractKorea10YBondYieldFromHTML(html);if(korea10YRate){console.log(\"\\u2705 Successfully extracted Korea 10Y bond yield: \".concat(korea10YRate,\"%\"));return{title:'Korea 10Y',value:korea10YRate,change:0.00,isPositive:true,symbol:'south-korea/government-bond-yield',isRealData:true,dataSource:'Trading Economics'};}else{throw new Error('No Korea 10Y bond yield found in HTML');}}catch(error){console.error('❌ Error fetching Korea 10Y bond yield:',error);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_FIXED_INCOME_DATA.find(item=>item.title==='Korea 10Y');if(dummyData){console.log('📊 Using dummy data for Korea 10Y bond yield');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:'south-korea/government-bond-yield'});}throw error;}};// 일본 10년 국채 수익률 전용 함수 추가\nexport const fetchJapan10YBondYield=async()=>{try{console.log('🇯🇵 Fetching Japan 10Y bond yield from Trading Economics...');const url='https://tradingeconomics.com/japan/government-bond-yield';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));const html=await fetchWithProxy(url);if(!html){throw new Error('Failed to fetch HTML');}console.log(\"\\u2705 HTML fetched successfully! Length: \".concat(html.length,\" characters\"));// 일본 10년 국채 수익률 전용 추출 함수 사용\nconst japan10YRate=extractJapan10YBondYieldFromHTML(html);if(japan10YRate){console.log(\"\\u2705 Successfully extracted Japan 10Y bond yield: \".concat(japan10YRate,\"%\"));return{title:'Japan 10Y',value:japan10YRate,change:0.00,isPositive:true,symbol:'japan/government-bond-yield',isRealData:true,dataSource:'Trading Economics'};}else{throw new Error('No Japan 10Y bond yield found in HTML');}}catch(error){console.error('❌ Error fetching Japan 10Y bond yield:',error);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_FIXED_INCOME_DATA.find(item=>item.title==='Japan 10Y');if(dummyData){console.log('📊 Using dummy data for Japan 10Y bond yield');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:'japan/government-bond-yield'});}throw error;}};// 독일 10년 국채 수익률 전용 함수 추가\nexport const fetchGermany10YBondYield=async()=>{try{console.log('🇩🇪 Fetching Germany 10Y bond yield from Trading Economics...');const url='https://tradingeconomics.com/germany/government-bond-yield';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));const html=await fetchWithProxy(url);if(!html){throw new Error('Failed to fetch HTML');}console.log(\"\\u2705 HTML fetched successfully! Length: \".concat(html.length,\" characters\"));// 독일 10년 국채 수익률 전용 추출 함수 사용\nconst germany10YRate=extractGermany10YBondYieldFromHTML(html);if(germany10YRate){console.log(\"\\u2705 Successfully extracted Germany 10Y bond yield: \".concat(germany10YRate,\"%\"));return{title:'Germany 10Y',value:germany10YRate,change:0.00,isPositive:true,symbol:'germany/government-bond-yield',isRealData:true,dataSource:'Trading Economics'};}else{throw new Error('No Germany 10Y bond yield found in HTML');}}catch(error){console.error('❌ Error fetching Germany 10Y bond yield:',error);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_FIXED_INCOME_DATA.find(item=>item.title==='Germany 10Y');if(dummyData){console.log('📊 Using dummy data for Germany 10Y bond yield');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:'germany/government-bond-yield'});}throw error;}};// 일본 10년 국채 수익률 추출 함수\nconst extractJapan10YBondYieldFromHTML=html=>{try{console.log('🔍 Extracting Japan 10Y bond yield from HTML...');// 방법 1: 10년 국채 수익률 특정 패턴 찾기\nconst specificPatterns=[/10.*?year.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?10.*?year/i,/10y.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?10y/i,/10-year.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?10-year/i,/government.*?bond.*?10.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?government.*?bond.*?10/i,/japan.*?10.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?japan.*?10/i];for(const pattern of specificPatterns){const matches=html.match(pattern);if(matches&&matches.length>0){const rates=matches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});// 일본 10년 국채 수익률은 보통 0.01% ~ 5% 범위 (일본은 낮은 금리)\nconst validRates=rates.filter(rate=>rate>=0.01&&rate<=5);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Japan 10Y bond yield with specific pattern: \".concat(maxRate,\"%\"));return maxRate;}}}// 방법 2: 차트나 그래프에서 현재 값 찾기\nconst chartPatterns=[/current.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?current/i,/latest.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?latest/i,/now.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?now/i];for(const pattern of chartPatterns){const matches=html.match(pattern);if(matches&&matches.length>0){const rates=matches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.01&&rate<=5);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Japan 10Y bond yield in chart: \".concat(maxRate,\"%\"));return maxRate;}}}// 방법 3: 테이블에서 찾기\nconst tablePattern=/<table[^>]*>[^]*?<\\/table>/gi;const tables=html.match(tablePattern);if(tables){for(const table of tables){// 테이블에서 숫자.숫자% 패턴 찾기\nconst rateMatches=table.match(/(\\d+\\.\\d+)%/g);if(rateMatches){const rates=rateMatches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.01&&rate<=5);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Japan 10Y bond yield in table: \".concat(maxRate,\"%\"));return maxRate;}}}}// 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\nconst allPercentagePattern=/(\\d+\\.\\d+)%/g;const allMatches=html.match(allPercentagePattern);if(allMatches&&allMatches.length>0){const rates=allMatches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.01&&rate<=5);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Japan 10Y bond yield from all percentages: \".concat(maxRate,\"%\"));return maxRate;}}console.log('❌ No Japan 10Y bond yield found');return null;}catch(error){console.error('❌ Error extracting Japan 10Y bond yield:',error);return null;}};// 한국 10년 국채 수익률 추출 함수\nconst extractKorea10YBondYieldFromHTML=html=>{try{console.log('🔍 Extracting Korea 10Y bond yield from HTML...');// 방법 1: 10년 국채 수익률 특정 패턴 찾기\nconst specificPatterns=[/10.*?year.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?10.*?year/i,/10y.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?10y/i,/10-year.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?10-year/i,/government.*?bond.*?10.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?government.*?bond.*?10/i];for(const pattern of specificPatterns){const matches=html.match(pattern);if(matches&&matches.length>0){const rates=matches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});// 한국 10년 국채 수익률은 보통 0.1% ~ 10% 범위\nconst validRates=rates.filter(rate=>rate>=0.1&&rate<=10);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Korea 10Y bond yield with specific pattern: \".concat(maxRate,\"%\"));return maxRate;}}}// 방법 2: 차트나 그래프에서 현재 값 찾기\nconst chartPatterns=[/current.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?current/i,/latest.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?latest/i,/now.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?now/i];for(const pattern of chartPatterns){const matches=html.match(pattern);if(matches&&matches.length>0){const rates=matches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=10);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Korea 10Y bond yield in chart: \".concat(maxRate,\"%\"));return maxRate;}}}// 방법 3: 테이블에서 찾기\nconst tablePattern=/<table[^>]*>[^]*?<\\/table>/gi;const tables=html.match(tablePattern);if(tables){for(const table of tables){// 테이블에서 숫자.숫자% 패턴 찾기\nconst rateMatches=table.match(/(\\d+\\.\\d+)%/g);if(rateMatches){const rates=rateMatches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=10);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Korea 10Y bond yield in table: \".concat(maxRate,\"%\"));return maxRate;}}}}// 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\nconst allPercentagePattern=/(\\d+\\.\\d+)%/g;const allMatches=html.match(allPercentagePattern);if(allMatches&&allMatches.length>0){const rates=allMatches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=10);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Korea 10Y bond yield from all percentages: \".concat(maxRate,\"%\"));return maxRate;}}console.log('❌ No Korea 10Y bond yield found');return null;}catch(error){console.error('❌ Error extracting Korea 10Y bond yield:',error);return null;}};// 독일 10년 국채 수익률 추출 함수\nconst extractGermany10YBondYieldFromHTML=html=>{try{console.log('🔍 Extracting Germany 10Y bond yield from HTML...');// 방법 1: 10년 국채 수익률 특정 패턴 찾기\nconst specificPatterns=[/10.*?year.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?10.*?year/i,/10y.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?10y/i,/10-year.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?10-year/i,/government.*?bond.*?10.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?government.*?bond.*?10/i,/germany.*?10.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?germany.*?10/i,/bund.*?10.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?bund.*?10/i];for(const pattern of specificPatterns){const matches=html.match(pattern);if(matches&&matches.length>0){const rates=matches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});// 독일 10년 국채 수익률은 보통 0.1% ~ 10% 범위\nconst validRates=rates.filter(rate=>rate>=0.1&&rate<=10);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Germany 10Y bond yield with specific pattern: \".concat(maxRate,\"%\"));return maxRate;}}}// 방법 2: 차트나 그래프에서 현재 값 찾기\nconst chartPatterns=[/current.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?current/i,/latest.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?latest/i,/now.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?now/i];for(const pattern of chartPatterns){const matches=html.match(pattern);if(matches&&matches.length>0){const rates=matches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=10);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Germany 10Y bond yield in chart: \".concat(maxRate,\"%\"));return maxRate;}}}// 방법 3: 테이블에서 찾기\nconst tablePattern=/<table[^>]*>[^]*?<\\/table>/gi;const tables=html.match(tablePattern);if(tables){for(const table of tables){// 테이블에서 숫자.숫자% 패턴 찾기\nconst rateMatches=table.match(/(\\d+\\.\\d+)%/g);if(rateMatches){const rates=rateMatches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=10);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Germany 10Y bond yield in table: \".concat(maxRate,\"%\"));return maxRate;}}}}// 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\nconst allPercentagePattern=/(\\d+\\.\\d+)%/g;const allMatches=html.match(allPercentagePattern);if(allMatches&&allMatches.length>0){const rates=allMatches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=10);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Germany 10Y bond yield from all percentages: \".concat(maxRate,\"%\"));return maxRate;}}console.log('❌ No Germany 10Y bond yield found');return null;}catch(error){console.error('❌ Error extracting Germany 10Y bond yield:',error);return null;}};// 한국 2년 국채 수익률 전용 함수 추가\nexport const fetchKorea2YBondYield=async()=>{try{console.log('🇰🇷 Fetching Korea 2Y bond yield from Trading Economics...');const url='https://tradingeconomics.com/south-korea/2-year-note-yield';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));const html=await fetchWithProxy(url);if(!html){throw new Error('Failed to fetch HTML');}console.log(\"\\u2705 HTML fetched successfully! Length: \".concat(html.length,\" characters\"));// 한국 2년 국채 수익률 전용 추출 함수 사용\nconst korea2YRate=extractKorea2YBondYieldFromHTML(html);if(korea2YRate){console.log(\"\\u2705 Successfully extracted Korea 2Y bond yield: \".concat(korea2YRate,\"%\"));return{title:'Korea 2Y',value:korea2YRate,change:0.00,isPositive:true,symbol:'south-korea/2-year-note-yield',isRealData:true,dataSource:'Trading Economics'};}else{throw new Error('No Korea 2Y bond yield found in HTML');}}catch(error){console.error('❌ Error fetching Korea 2Y bond yield:',error);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_FIXED_INCOME_DATA.find(item=>item.title==='Korea 2Y');if(dummyData){console.log('📊 Using dummy data for Korea 2Y bond yield');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:'south-korea/2-year-note-yield'});}throw error;}};// 한국 2년 국채 수익률 추출 함수\nconst extractKorea2YBondYieldFromHTML=html=>{try{console.log('🔍 Extracting Korea 2Y bond yield from HTML...');// 방법 1: 2년 국채 수익률 특정 패턴 찾기\nconst specificPatterns=[/2.*?year.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?2.*?year/i,/2y.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?2y/i,/2-year.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?2-year/i,/note.*?2.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?note.*?2/i,/government.*?bond.*?2.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?government.*?bond.*?2/i];for(const pattern of specificPatterns){const matches=html.match(pattern);if(matches&&matches.length>0){const rates=matches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});// 한국 2년 국채 수익률은 보통 0.1% ~ 10% 범위\nconst validRates=rates.filter(rate=>rate>=0.1&&rate<=10);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Korea 2Y bond yield with specific pattern: \".concat(maxRate,\"%\"));return maxRate;}}}// 방법 2: 차트나 그래프에서 현재 값 찾기\nconst chartPatterns=[/current.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?current/i,/latest.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?latest/i,/now.*?(\\d+\\.\\d+)%/i,/(\\d+\\.\\d+)%.*?now/i];for(const pattern of chartPatterns){const matches=html.match(pattern);if(matches&&matches.length>0){const rates=matches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=10);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Korea 2Y bond yield in chart: \".concat(maxRate,\"%\"));return maxRate;}}}// 방법 3: 테이블에서 찾기\nconst tablePattern=/<table[^>]*>[^]*?<\\/table>/gi;const tables=html.match(tablePattern);if(tables){for(const table of tables){// 테이블에서 숫자.숫자% 패턴 찾기\nconst rateMatches=table.match(/(\\d+\\.\\d+)%/g);if(rateMatches){const rates=rateMatches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=10);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Korea 2Y bond yield in table: \".concat(maxRate,\"%\"));return maxRate;}}}}// 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\nconst allPercentagePattern=/(\\d+\\.\\d+)%/g;const allMatches=html.match(allPercentagePattern);if(allMatches&&allMatches.length>0){const rates=allMatches.map(match=>{const rateMatch=match.match(/(\\d+\\.\\d+)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=10);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found Korea 2Y bond yield from all percentages: \".concat(maxRate,\"%\"));return maxRate;}}console.log('❌ No Korea 2Y bond yield found');return null;}catch(error){console.error('❌ Error extracting Korea 2Y bond yield:',error);return null;}};// US 3M 국채 수익률 전용 함수 추가\nexport const fetchUS3MBondYield=async()=>{try{console.log('🇺🇸 Fetching US 3M bond yield from Trading Economics...');const url='https://tradingeconomics.com/united-states/3-month-bill-yield';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));const html=await fetchWithProxy(url);if(!html){throw new Error('Failed to fetch HTML');}console.log(\"\\u2705 HTML fetched successfully! Length: \".concat(html.length,\" characters\"));// US 3M 국채 수익률 전용 추출 함수 사용\nconst us3MRate=extractUS3MBondYieldFromHTML(html);if(us3MRate){console.log(\"\\u2705 Successfully extracted US 3M bond yield: \".concat(us3MRate,\"%\"));return{title:'US 3M',value:us3MRate,change:0.00,isPositive:true,symbol:'united-states/3-month-bill-yield',isRealData:true,dataSource:'Trading Economics'};}else{throw new Error('No US 3M bond yield found in HTML');}}catch(error){console.error('❌ Error fetching US 3M bond yield:',error);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_FIXED_INCOME_DATA.find(item=>item.title==='US 3M');if(dummyData){console.log('📊 Using dummy data for US 3M bond yield');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:'united-states/3-month-bill-yield'});}throw error;}};// US 2Y 국채 수익률 전용 함수 추가\nexport const fetchUS2YBondYield=async()=>{try{console.log('🇺🇸 Fetching US 2Y bond yield from Trading Economics...');const url='https://tradingeconomics.com/united-states/2-year-note-yield';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));const html=await fetchWithProxy(url);if(!html){throw new Error('Failed to fetch HTML');}console.log(\"\\u2705 HTML fetched successfully! Length: \".concat(html.length,\" characters\"));// US 2Y 국채 수익률 전용 추출 함수 사용\nconst us2YRate=extractUS2YBondYieldFromHTML(html);if(us2YRate){console.log(\"\\u2705 Successfully extracted US 2Y bond yield: \".concat(us2YRate,\"%\"));return{title:'US 2Y',value:us2YRate,change:0.00,isPositive:true,symbol:'united-states/2-year-note-yield',isRealData:true,dataSource:'Trading Economics'};}else{throw new Error('No US 2Y bond yield found in HTML');}}catch(error){console.error('❌ Error fetching US 2Y bond yield:',error);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_FIXED_INCOME_DATA.find(item=>item.title==='US 2Y');if(dummyData){console.log('📊 Using dummy data for US 2Y bond yield');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:'united-states/2-year-note-yield'});}throw error;}};// US 10Y 국채 수익률 전용 함수 추가\nexport const fetchUS10YBondYield=async()=>{try{console.log('🇺🇸 Fetching US 10Y bond yield from Trading Economics...');const url='https://tradingeconomics.com/united-states/government-bond-yield';console.log(\"\\uD83D\\uDD17 URL: \".concat(url));const html=await fetchWithProxy(url);if(!html){throw new Error('Failed to fetch HTML');}console.log(\"\\u2705 HTML fetched successfully! Length: \".concat(html.length,\" characters\"));// US 10Y 국채 수익률 전용 추출 함수 사용\nconst us10YRate=extractUS10YBondYieldFromHTML(html);if(us10YRate){console.log(\"\\u2705 Successfully extracted US 10Y bond yield: \".concat(us10YRate,\"%\"));return{title:'US 10Y',value:us10YRate,change:0.00,isPositive:true,symbol:'united-states/government-bond-yield',isRealData:true,dataSource:'Trading Economics'};}else{throw new Error('No US 10Y bond yield found in HTML');}}catch(error){console.error('❌ Error fetching US 10Y bond yield:',error);// 실패 시 더미 데이터 사용\nconst dummyData=DUMMY_FIXED_INCOME_DATA.find(item=>item.title==='US 10Y');if(dummyData){console.log('📊 Using dummy data for US 10Y bond yield');return _objectSpread(_objectSpread({},dummyData),{},{isRealData:false,dataSource:'Dummy Data (Error)',symbol:'united-states/government-bond-yield'});}throw error;}};// US 3M 국채 수익률 추출 함수\nconst extractUS3MBondYieldFromHTML=html=>{try{console.log('🔍 Extracting US 3M bond yield from HTML...');// 방법 1: 3개월 국채 수익률 특정 패턴 찾기\nconst specificPatterns=[/3.*?month.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?3.*?month/i,/3m.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?3m/i,/3-month.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?3-month/i,/bill.*?3.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?bill.*?3/i,/t-bill.*?3.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?t-bill.*?3/i];for(const pattern of specificPatterns){const matches=html.match(pattern);if(matches&&matches.length>0){const rate=parseFloat(matches[1]);if(rate>=0.1&&rate<=20){console.log(\"\\u2705 Found US 3M bond yield with specific pattern: \".concat(rate,\"%\"));return rate;}}}// 방법 2: 차트나 그래프에서 현재 값 찾기\nconst chartPatterns=[/current.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?current/i,/latest.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?latest/i,/now.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?now/i];for(const pattern of chartPatterns){const matches=html.match(pattern);if(matches&&matches.length>0){const rate=parseFloat(matches[1]);if(rate>=0.1&&rate<=20){console.log(\"\\u2705 Found US 3M bond yield in chart: \".concat(rate,\"%\"));return rate;}}}// 방법 3: 테이블에서 찾기\nconst tablePattern=/<table[^>]*>[^]*?<\\/table>/gi;const tables=html.match(tablePattern);if(tables){for(const table of tables){// 테이블에서 숫자.숫자% 패턴 찾기\nconst rateMatches=table.match(/(\\d+(?:\\.\\d+)?)%/g);if(rateMatches){const rates=rateMatches.map(match=>{const rateMatch=match.match(/(\\d+(?:\\.\\d+)?)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=20);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found US 3M bond yield in table: \".concat(maxRate,\"%\"));return maxRate;}}}}// 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\nconst allPercentagePattern=/(\\d+(?:\\.\\d+)?)%/g;const allMatches=html.match(allPercentagePattern);if(allMatches&&allMatches.length>0){const rates=allMatches.map(match=>{const rateMatch=match.match(/(\\d+(?:\\.\\d+)?)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=20);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found US 3M bond yield from all percentages: \".concat(maxRate,\"%\"));return maxRate;}}console.log('❌ No US 3M bond yield found');return null;}catch(error){console.error('❌ Error extracting US 3M bond yield:',error);return null;}};// US 2Y 국채 수익률 추출 함수\nconst extractUS2YBondYieldFromHTML=html=>{try{console.log('🔍 Extracting US 2Y bond yield from HTML...');// 방법 1: 2년 국채 수익률 특정 패턴 찾기\nconst specificPatterns=[/2.*?year.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?2.*?year/i,/2y.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?2y/i,/2-year.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?2-year/i,/note.*?2.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?note.*?2/i,/treasury.*?2.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?treasury.*?2/i];for(const pattern of specificPatterns){const matches=html.match(pattern);if(matches&&matches.length>0){const rate=parseFloat(matches[1]);if(rate>=0.1&&rate<=20){console.log(\"\\u2705 Found US 2Y bond yield with specific pattern: \".concat(rate,\"%\"));return rate;}}}// 방법 2: 차트나 그래프에서 현재 값 찾기\nconst chartPatterns=[/current.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?current/i,/latest.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?latest/i,/now.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?now/i];for(const pattern of chartPatterns){const matches=html.match(pattern);if(matches&&matches.length>0){const rate=parseFloat(matches[1]);if(rate>=0.1&&rate<=20){console.log(\"\\u2705 Found US 2Y bond yield in chart: \".concat(rate,\"%\"));return rate;}}}// 방법 3: 테이블에서 찾기\nconst tablePattern=/<table[^>]*>[^]*?<\\/table>/gi;const tables=html.match(tablePattern);if(tables){for(const table of tables){// 테이블에서 숫자.숫자% 패턴 찾기\nconst rateMatches=table.match(/(\\d+(?:\\.\\d+)?)%/g);if(rateMatches){const rates=rateMatches.map(match=>{const rateMatch=match.match(/(\\d+(?:\\.\\d+)?)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=20);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found US 2Y bond yield in table: \".concat(maxRate,\"%\"));return maxRate;}}}}// 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\nconst allPercentagePattern=/(\\d+(?:\\.\\d+)?)%/g;const allMatches=html.match(allPercentagePattern);if(allMatches&&allMatches.length>0){const rates=allMatches.map(match=>{const rateMatch=match.match(/(\\d+(?:\\.\\d+)?)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=20);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found US 2Y bond yield from all percentages: \".concat(maxRate,\"%\"));return maxRate;}}console.log('❌ No US 2Y bond yield found');return null;}catch(error){console.error('❌ Error extracting US 2Y bond yield:',error);return null;}};// US 10Y 국채 수익률 추출 함수\nconst extractUS10YBondYieldFromHTML=html=>{try{console.log('🔍 Extracting US 10Y bond yield from HTML...');// 방법 1: 10년 국채 수익률 특정 패턴 찾기\nconst specificPatterns=[/10.*?year.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?10.*?year/i,/10y.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?10y/i,/10-year.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?10-year/i,/government.*?bond.*?10.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?government.*?bond.*?10/i,/treasury.*?10.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?treasury.*?10/i];for(const pattern of specificPatterns){const matches=html.match(pattern);if(matches&&matches.length>0){const rate=parseFloat(matches[1]);if(rate>=0.1&&rate<=20){console.log(\"\\u2705 Found US 10Y bond yield with specific pattern: \".concat(rate,\"%\"));return rate;}}}// 방법 2: 차트나 그래프에서 현재 값 찾기\nconst chartPatterns=[/current.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?current/i,/latest.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?latest/i,/now.*?(\\d+(?:\\.\\d+)?)%/i,/(\\d+(?:\\.\\d+)?)%.*?now/i];for(const pattern of chartPatterns){const matches=html.match(pattern);if(matches&&matches.length>0){const rate=parseFloat(matches[1]);if(rate>=0.1&&rate<=20){console.log(\"\\u2705 Found US 10Y bond yield in chart: \".concat(rate,\"%\"));return rate;}}}// 방법 3: 테이블에서 찾기\nconst tablePattern=/<table[^>]*>[^]*?<\\/table>/gi;const tables=html.match(tablePattern);if(tables){for(const table of tables){// 테이블에서 숫자.숫자% 패턴 찾기\nconst rateMatches=table.match(/(\\d+(?:\\.\\d+)?)%/g);if(rateMatches){const rates=rateMatches.map(match=>{const rateMatch=match.match(/(\\d+(?:\\.\\d+)?)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=20);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found US 10Y bond yield in table: \".concat(maxRate,\"%\"));return maxRate;}}}}// 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\nconst allPercentagePattern=/(\\d+(?:\\.\\d+)?)%/g;const allMatches=html.match(allPercentagePattern);if(allMatches&&allMatches.length>0){const rates=allMatches.map(match=>{const rateMatch=match.match(/(\\d+(?:\\.\\d+)?)%/);return rateMatch?parseFloat(rateMatch[1]):0;});const validRates=rates.filter(rate=>rate>=0.1&&rate<=20);if(validRates.length>0){const maxRate=Math.max(...validRates);console.log(\"\\u2705 Found US 10Y bond yield from all percentages: \".concat(maxRate,\"%\"));return maxRate;}}console.log('❌ No US 10Y bond yield found');return null;}catch(error){console.error('❌ Error extracting US 10Y bond yield:',error);return null;}};","map":{"version":3,"names":["BASE_URL","FIXED_INCOME_SYMBOLS","PROXY_SERVICES","fetchWithProxy","url","proxyIndex","arguments","length","undefined","Error","proxyUrl","console","log","concat","substring","response","fetch","method","headers","timeout","ok","status","html","text","error","message","extractInterestRateFromHTML","title","percentagePattern","matches","match","rates","map","rateMatch","parseFloat","validRates","filter","rate","maxRate","Math","max","keywordPatterns","pattern","tablePattern","tables","table","tableMatches","DUMMY_FIXED_INCOME_DATA","value","change","isPositive","symbol","generateRealTimeData","item","variation","random","newValue","newChange","_objectSpread","round","fetchInterestRates","realTimeData","includes","fetchInterestRatesFromTradingEconomics","interestRates","extractInterestRatesFromCountryList","tableIndex","rowPattern","rows","i","row","tdPattern","tds","countryTD","rateTD","countryPattern","countryMatch","ratePattern","country","trim","rateText","numberPattern","numberMatch","majorCountries","mappedTitle","push","replace","toUpperCase","isRealData","dataSource","fetchBondYields","fetchAllFixedIncomeData","promises","Object","entries","fetchUKInterestRate","then","data","catch","dummyData","find","fetchAustraliaInterestRate","fetchKorea10YBondYield","fetchKorea2YBondYield","fetchJapan10YBondYield","fetchGermany10YBondYield","fetchUS3MBondYield","fetchUS2YBondYield","fetchUS10YBondYield","fetchFixedIncomeQuote","results","Promise","all","validData","keys","realDataCount","TRADING_ECONOMICS_URLS","extractInterestRateFromCalendar","extractBondYieldFromHTML","tableMatch","tableHTML","currentDate","Date","currentDateString","toISOString","split","latestRate","latestDate","dateTD","actualTD","teForcastTD","datePattern","dateMatch","date","actualPattern","actualMatch","teForcastPattern","teForcastMatch","numberMatches","lastError","htmlPreview","ukRate","extractUKInterestRateFromBankOfEngland","simplePattern","simpleMatch","noSpacePattern","noSpaceMatch","bankRatePattern","bankRateMatch","allPercentagePattern","allMatches","slice","ausRate","extractAustraliaInterestRateFromHTML","mainRatePatterns","chartPatterns","rateMatches","korea10YRate","extractKorea10YBondYieldFromHTML","japan10YRate","extractJapan10YBondYieldFromHTML","germany10YRate","extractGermany10YBondYieldFromHTML","specificPatterns","korea2YRate","extractKorea2YBondYieldFromHTML","us3MRate","extractUS3MBondYieldFromHTML","us2YRate","extractUS2YBondYieldFromHTML","us10YRate","extractUS10YBondYieldFromHTML"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/fixedIncomeApi.js"],"sourcesContent":["// Trading Economics 웹사이트에서 최신 데이터를 가져오는 Fixed Income 서비스\r\nconst BASE_URL = 'https://tradingeconomics.com';\r\n\r\n// Fixed Income 심볼 매핑 (주식 API와 비슷한 방식)\r\nconst FIXED_INCOME_SYMBOLS = {\r\n  // 기준 금리\r\n  '미국 기준 금리': 'united-states/interest-rate',\r\n  '유로 기준 금리': 'euro-area/interest-rate',\r\n  '일본 기준 금리': 'japan/interest-rate',\r\n  '한국 기준 금리': 'south-korea/interest-rate',\r\n  '스위스 기준 금리': 'switzerland/interest-rate',\r\n  '영국 기준 금리': 'united-kingdom/interest-rate',\r\n  '호주 기준 금리': 'australia/interest-rate',\r\n  '브라질 기준 금리': 'brazil/interest-rate',\r\n  \r\n  // 2번째 행: US 국채 수익률\r\n  'US 3M': 'united-states/3-month-bill-yield',\r\n  'US 2Y': 'united-states/2-year-note-yield',\r\n  'US 10Y': 'united-states/government-bond-yield',\r\n  \r\n  // 3번째 행: 기타 국채 수익률\r\n  'Korea 2Y': 'south-korea/2-year-note-yield',\r\n  'Korea 10Y': 'south-korea/government-bond-yield',\r\n  'Japan 10Y': 'japan/government-bond-yield',\r\n  'Germany 10Y': 'germany/government-bond-yield',\r\n  \r\n  // 4번째 행: US 30Y\r\n  'US 30Y': 'united-states/30-year-bond-yield'\r\n};\r\n\r\n// 프록시 서버들을 사용한 웹 스크래핑 (주식 API와 동일)\r\nconst PROXY_SERVICES = [\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://corsproxy.io/?',\r\n  'https://thingproxy.freeboard.io/fetch/',\r\n  'https://cors.bridged.cc/',\r\n  'https://api.codetabs.com/v1/proxy?quest=',\r\n  'https://cors.eu.org/',\r\n  'https://cors-anywhere.herokuapp.com/',\r\n  '' // 직접 호출도 시도\r\n];\r\n\r\n// 프록시를 사용한 웹 스크래핑 (주식 API와 동일한 방식)\r\nconst fetchWithProxy = async (url, proxyIndex = 0) => {\r\n  if (proxyIndex >= PROXY_SERVICES.length) {\r\n    throw new Error('All proxy attempts failed');\r\n  }\r\n\r\n  try {\r\n    const proxyUrl = PROXY_SERVICES[proxyIndex] + url;\r\n    console.log(`🔗 Trying proxy ${proxyIndex + 1}/${PROXY_SERVICES.length}: ${proxyUrl.substring(0, 50)}...`);\r\n    \r\n    const response = await fetch(proxyUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\r\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\r\n        'Accept-Language': 'en-US,en;q=0.9',\r\n        'Accept-Encoding': 'gzip, deflate, br',\r\n        'Connection': 'keep-alive',\r\n        'Upgrade-Insecure-Requests': '1'\r\n      },\r\n      timeout: 10000 // 10초 타임아웃\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const html = await response.text();\r\n    \r\n    if (html.length < 1000) {\r\n      throw new Error('Response too short, likely an error page');\r\n    }\r\n    \r\n    console.log(`✅ Proxy ${proxyIndex + 1} successful! HTML length: ${html.length} characters`);\r\n    return html;\r\n  } catch (error) {\r\n    console.log(`❌ Proxy ${proxyIndex + 1} failed: ${error.message}`);\r\n    return fetchWithProxy(url, proxyIndex + 1);\r\n  }\r\n};\r\n\r\n// HTML에서 금리 데이터 추출 (간단하고 효과적인 방식)\r\nconst extractInterestRateFromHTML = (html, title) => {\r\n  try {\r\n    console.log(`🔍 Extracting data for ${title} from HTML...`);\r\n    \r\n    // 방법 1: 모든 숫자.숫자% 패턴 찾기\r\n    const percentagePattern = /(\\d+\\.\\d+)%/g;\r\n    const matches = html.match(percentagePattern);\r\n    \r\n    if (matches && matches.length > 0) {\r\n      console.log(`📊 Found ${matches.length} percentage numbers for ${title}`);\r\n      \r\n      const rates = matches.map(match => {\r\n        const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n        return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n      });\r\n      \r\n      // 유효한 금리 범위 필터링 (0.1% ~ 20%)\r\n      const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\r\n      \r\n      if (validRates.length > 0) {\r\n        // 가장 큰 값이 보통 메인 금리\r\n        const maxRate = Math.max(...validRates);\r\n        console.log(`✅ Found rate for ${title}: ${maxRate}%`);\r\n        return maxRate;\r\n      }\r\n    }\r\n    \r\n    // 방법 2: 특정 키워드와 함께 있는 금리 찾기\r\n    const keywordPatterns = [\r\n      /interest rate.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?interest rate/i,\r\n      /yield.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?yield/i,\r\n      /bond.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?bond/i,\r\n      /rate.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?rate/i\r\n    ];\r\n    \r\n    for (const pattern of keywordPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\r\n        if (validRates.length > 0) {\r\n          const maxRate = Math.max(...validRates);\r\n          console.log(`✅ Found rate with keyword for ${title}: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 3: 테이블에서 찾기\r\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\r\n    const tables = html.match(tablePattern);\r\n    \r\n    if (tables) {\r\n      for (const table of tables) {\r\n        const tableMatches = table.match(/(\\d+\\.\\d+)%/g);\r\n        if (tableMatches) {\r\n          const rates = tableMatches.map(match => {\r\n            const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n            return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n          });\r\n          \r\n          const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\r\n          if (validRates.length > 0) {\r\n            const maxRate = Math.max(...validRates);\r\n            console.log(`✅ Found rate in table for ${title}: ${maxRate}%`);\r\n            return maxRate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`❌ No valid rate found for ${title}`);\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    console.error(`❌ Error extracting data for ${title}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 2024년 12월 기준 최신 더미 데이터 (실제 시장 상황 반영)\r\nconst DUMMY_FIXED_INCOME_DATA = [\r\n  // Standard Interest Rates (기준 금리) - 2024년 12월 기준\r\n  { title: '미국 기준 금리', value: 4.375, change: 0.00, isPositive: true, symbol: 'FEDFUNDS' },\r\n  { title: '유로 기준 금리', value: 4.50, change: 0.00, isPositive: true, symbol: 'ECBREFI' },\r\n  { title: '일본 기준 금리', value: -0.10, change: 0.00, isPositive: false, symbol: 'BOJDF' },\r\n  { title: '한국 기준 금리', value: 2.50, change: 0.00, isPositive: true, symbol: 'KORREPO' },\r\n  { title: '스위스 기준 금리', value: 1.75, change: 0.00, isPositive: true, symbol: 'SNBREFI' },\r\n  { title: '영국 기준 금리', value: 5.25, change: 0.00, isPositive: true, symbol: 'BOEREFI' },\r\n  { title: '호주 기준 금리', value: 4.35, change: 0.00, isPositive: true, symbol: 'RBAREFI' },\r\n  { title: '브라질 기준 금리', value: 12.25, change: 0.00, isPositive: true, symbol: 'BRAREFI' },\r\n  \r\n  // US Bond Yields - 2024년 12월 기준 최신 수익률 (2번째 행)\r\n  { title: 'US 3M', value: 5.45, change: 0.02, isPositive: true, symbol: 'US3M' },\r\n  { title: 'US 2Y', value: 4.78, change: 0.05, isPositive: true, symbol: 'US2Y' },\r\n  { title: 'US 10Y', value: 4.25, change: 0.08, isPositive: true, symbol: 'US10Y' },\r\n  \r\n  // 기타 국채 수익률 - 2024년 12월 기준 최신 수익률 (3번째 행)\r\n  { title: 'Korea 2Y', value: 3.45, change: 0.05, isPositive: true, symbol: 'KR2Y' },\r\n  { title: 'Korea 10Y', value: 3.85, change: 0.08, isPositive: true, symbol: 'KR10Y' },\r\n  { title: 'Japan 10Y', value: 0.45, change: 0.05, isPositive: true, symbol: 'JP10Y' },\r\n  { title: 'Germany 10Y', value: 2.85, change: 0.08, isPositive: true, symbol: 'DE10Y' },\r\n  \r\n  // US 30Y - 2024년 12월 기준 최신 수익률 (4번째 행)\r\n  { title: 'US 30Y', value: 4.45, change: 0.12, isPositive: true, symbol: 'US30Y' },\r\n  \r\n  // Korea Bond Yields - 2024년 12월 기준 최신 수익률\r\n  { title: 'Korea 30Y', value: 4.12, change: 0.10, isPositive: true, symbol: 'KR30Y' },\r\n  \r\n  // Japan Bond Yields - 2024년 12월 기준 최신 수익률\r\n  { title: 'Japan 30Y', value: 1.25, change: 0.08, isPositive: true, symbol: 'JP30Y' },\r\n  \r\n  // Germany Bond Yields - 2024년 12월 기준 최신 수익률\r\n  { title: 'Germany 30Y', value: 3.15, change: 0.10, isPositive: true, symbol: 'DE30Y' }\r\n];\r\n\r\n// 실시간 데이터 시뮬레이션 (더미 데이터에 약간의 변동 추가)\r\nconst generateRealTimeData = () => {\r\n  return DUMMY_FIXED_INCOME_DATA.map(item => {\r\n    // 약간의 랜덤 변동 추가 (±0.05% 범위)\r\n    const variation = (Math.random() - 0.5) * 0.1;\r\n    const newValue = item.value + variation;\r\n    const newChange = variation;\r\n    \r\n    return {\r\n      ...item,\r\n      value: Math.round(newValue * 100) / 100,\r\n      change: Math.round(newChange * 100) / 100,\r\n      isPositive: newChange >= 0\r\n    };\r\n  });\r\n};\r\n\r\n// 기준 금리 데이터 가져오기 (실시간 시뮬레이션)\r\nexport const fetchInterestRates = async () => {\r\n  try {\r\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\r\n    const realTimeData = generateRealTimeData();\r\n    return realTimeData.filter(item => item.title.includes('기준 금리'));\r\n  } catch (error) {\r\n    console.error('Error fetching interest rates:', error);\r\n    return DUMMY_FIXED_INCOME_DATA.filter(item => item.title.includes('기준 금리'));\r\n  }\r\n};\r\n\r\n// Trading Economics에서 기준금리 데이터 가져오기\r\nexport const fetchInterestRatesFromTradingEconomics = async () => {\r\n  try {\r\n    console.log('🌐 Fetching interest rates from Trading Economics...');\r\n    \r\n    // Trading Economics 국가별 기준금리 페이지 URL\r\n    const url = 'https://ko.tradingeconomics.com/country-list/interest-rate';\r\n    \r\n    console.log(`🔗 Fetching from: ${url}`);\r\n    const html = await fetchWithProxy(url);\r\n    \r\n    if (!html) {\r\n      console.log('❌ Failed to fetch HTML from Trading Economics');\r\n      return null;\r\n    }\r\n    \r\n    console.log(`✅ HTML fetched successfully! Length: ${html.length} characters`);\r\n    \r\n    // HTML에서 기준금리 데이터 추출\r\n    const interestRates = extractInterestRatesFromCountryList(html);\r\n    \r\n    if (interestRates && interestRates.length > 0) {\r\n      console.log(`✅ Successfully extracted ${interestRates.length} interest rates`);\r\n      return interestRates;\r\n    } else {\r\n      console.log('❌ No interest rates found in HTML');\r\n      return null;\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching interest rates from Trading Economics:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Trading Economics 국가별 기준금리 페이지에서 데이터 추출\r\nconst extractInterestRatesFromCountryList = (html) => {\r\n  try {\r\n    console.log('🔍 Extracting interest rates from country list...');\r\n    \r\n    const interestRates = [];\r\n    \r\n    // 국가별 기준금리 테이블 패턴 찾기\r\n    // 일반적으로 <table> 태그 안에 국가명과 기준금리가 포함됨\r\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\r\n    const tables = html.match(tablePattern);\r\n    \r\n    if (!tables || tables.length === 0) {\r\n      console.log('❌ No tables found in HTML');\r\n      return null;\r\n    }\r\n    \r\n    console.log(`📊 Found ${tables.length} tables in HTML`);\r\n    \r\n    // 각 테이블에서 데이터 추출\r\n    for (let tableIndex = 0; tableIndex < tables.length; tableIndex++) {\r\n      const table = tables[tableIndex];\r\n      \r\n      // 테이블 행들 추출\r\n      const rowPattern = /<tr[^>]*>.*?<\\/tr>/gis;\r\n      const rows = table.match(rowPattern);\r\n      \r\n      if (!rows || rows.length < 2) {\r\n        continue; // 헤더만 있거나 데이터가 없는 테이블은 건너뛰기\r\n      }\r\n      \r\n      console.log(`📋 Processing table ${tableIndex + 1} with ${rows.length} rows`);\r\n      \r\n      // 첫 번째 행은 헤더이므로 제외하고, 두 번째 행부터 검색\r\n      for (let i = 1; i < rows.length; i++) {\r\n        const row = rows[i];\r\n        \r\n        // TD 태그들 추출\r\n        const tdPattern = /<td[^>]*>(.*?)<\\/td>/gis;\r\n        const tds = row.match(tdPattern);\r\n        \r\n        if (tds && tds.length >= 2) {\r\n          // 첫 번째 TD: 국가명\r\n          const countryTD = tds[0];\r\n          // 두 번째 TD: 기준금리\r\n          const rateTD = tds[1];\r\n          \r\n          // 국가명 추출\r\n          const countryPattern = />([^<]+)</;\r\n          const countryMatch = countryTD.match(countryPattern);\r\n          \r\n          // 기준금리 추출\r\n          const ratePattern = />([^<]+)</;\r\n          const rateMatch = rateTD.match(ratePattern);\r\n          \r\n          if (countryMatch && rateMatch) {\r\n            const country = countryMatch[1].trim();\r\n            const rateText = rateMatch[1].trim();\r\n            \r\n            // 숫자만 추출 (퍼센트 기호 제거)\r\n            const numberPattern = /(\\d+\\.?\\d*)/;\r\n            const numberMatch = rateText.match(numberPattern);\r\n            \r\n            if (numberMatch) {\r\n              const rate = parseFloat(numberMatch[1]);\r\n              \r\n              // 주요 국가들만 필터링\r\n              const majorCountries = {\r\n                '미국': '미국 기준 금리',\r\n                'United States': '미국 기준 금리',\r\n                '유로': '유로 기준 금리',\r\n                'Euro Area': '유로 기준 금리',\r\n                '일본': '일본 기준 금리',\r\n                'Japan': '일본 기준 금리',\r\n                '한국': '한국 기준 금리',\r\n                'South Korea': '한국 기준 금리',\r\n                '스위스': '스위스 기준 금리',\r\n                'Switzerland': '스위스 기준 금리',\r\n                '영국': '영국 기준 금리',\r\n                'United Kingdom': '영국 기준 금리',\r\n                '호주': '호주 기준 금리',\r\n                'Australia': '호주 기준 금리',\r\n                '브라질': '브라질 기준 금리',\r\n                'Brazil': '브라질 기준 금리'\r\n              };\r\n              \r\n              const mappedTitle = majorCountries[country];\r\n              if (mappedTitle) {\r\n                console.log(`✅ Found ${country}: ${rate}% -> ${mappedTitle}`);\r\n                interestRates.push({\r\n                  title: mappedTitle,\r\n                  value: rate,\r\n                  change: 0.00, // 변화율은 별도로 계산 필요\r\n                  isPositive: true,\r\n                  symbol: mappedTitle.replace(' 기준 금리', '').toUpperCase(),\r\n                  isRealData: true,\r\n                  dataSource: 'Trading Economics'\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`📊 Extracted ${interestRates.length} interest rates from Trading Economics`);\r\n    return interestRates;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error extracting interest rates from country list:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 채권 수익률 데이터 가져오기 (실시간 시뮬레이션)\r\nexport const fetchBondYields = async () => {\r\n  try {\r\n    // 실제 API 호출 대신 실시간 시뮬레이션 사용\r\n    const realTimeData = generateRealTimeData();\r\n    return realTimeData.filter(item => !item.title.includes('기준 금리'));\r\n  } catch (error) {\r\n    console.error('Error fetching bond yields:', error);\r\n    return DUMMY_FIXED_INCOME_DATA.filter(item => !item.title.includes('기준 금리'));\r\n  }\r\n};\r\n\r\n// 모든 Fixed Income 데이터 가져오기 (주식 API와 비슷한 방식)\r\nexport const fetchAllFixedIncomeData = async () => {\r\n  try {\r\n    console.log('🔄 Fetching all Fixed Income data from Trading Economics...');\r\n    \r\n    const promises = [];\r\n    \r\n    // 모든 Fixed Income 심볼에 대해 병렬로 데이터 가져오기 (주식 API와 동일한 방식)\r\n    for (const [title, symbol] of Object.entries(FIXED_INCOME_SYMBOLS)) {\r\n      // 영국 기준금리는 특별한 함수 사용\r\n      if (title === '영국 기준 금리') {\r\n        promises.push(\r\n          fetchUKInterestRate()\r\n            .then(data => {\r\n              console.log(`✅ ${title}: ${data.value}% (${data.isRealData ? 'Real' : 'Dummy'})`);\r\n              return data;\r\n            })\r\n            .catch(error => {\r\n              console.log(`❌ Error fetching ${title}:`, error.message);\r\n              // 개별 실패 시 더미 데이터 사용\r\n              const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === title);\r\n              if (dummyData) {\r\n                console.log(`📊 Using dummy data for ${title}`);\r\n                return {\r\n                  ...dummyData,\r\n                  isRealData: false,\r\n                  dataSource: 'Dummy Data (Error)',\r\n                  symbol: symbol\r\n                };\r\n              }\r\n              return null;\r\n            })\r\n        );\r\n      } else if (title === '호주 기준 금리') {\r\n        // 호주 기준금리도 특별한 함수 사용\r\n        promises.push(\r\n          fetchAustraliaInterestRate()\r\n            .then(data => {\r\n              console.log(`✅ ${title}: ${data.value}% (${data.isRealData ? 'Real' : 'Dummy'})`);\r\n              return data;\r\n            })\r\n            .catch(error => {\r\n              console.log(`❌ Error fetching ${title}:`, error.message);\r\n              // 개별 실패 시 더미 데이터 사용\r\n              const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === title);\r\n              if (dummyData) {\r\n                console.log(`📊 Using dummy data for ${title}`);\r\n                return {\r\n                  ...dummyData,\r\n                  isRealData: false,\r\n                  dataSource: 'Dummy Data (Error)',\r\n                  symbol: symbol\r\n                };\r\n              }\r\n              return null;\r\n            })\r\n        );\r\n      } else if (title === 'Korea 10Y') {\r\n        // 한국 10년 국채 수익률도 특별한 함수 사용\r\n        promises.push(\r\n          fetchKorea10YBondYield()\r\n            .then(data => {\r\n              console.log(`✅ ${title}: ${data.value}% (${data.isRealData ? 'Real' : 'Dummy'})`);\r\n              return data;\r\n            })\r\n            .catch(error => {\r\n              console.log(`❌ Error fetching ${title}:`, error.message);\r\n              // 개별 실패 시 더미 데이터 사용\r\n              const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === title);\r\n              if (dummyData) {\r\n                console.log(`📊 Using dummy data for ${title}`);\r\n                return {\r\n                  ...dummyData,\r\n                  isRealData: false,\r\n                  dataSource: 'Dummy Data (Error)',\r\n                  symbol: symbol\r\n                };\r\n              }\r\n              return null;\r\n            })\r\n        );\r\n      } else if (title === 'Korea 2Y') {\r\n        // 한국 2년 국채 수익률도 특별한 함수 사용\r\n        promises.push(\r\n          fetchKorea2YBondYield()\r\n            .then(data => {\r\n              console.log(`✅ ${title}: ${data.value}% (${data.isRealData ? 'Real' : 'Dummy'})`);\r\n              return data;\r\n            })\r\n            .catch(error => {\r\n              console.log(`❌ Error fetching ${title}:`, error.message);\r\n              // 개별 실패 시 더미 데이터 사용\r\n              const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === title);\r\n              if (dummyData) {\r\n                console.log(`📊 Using dummy data for ${title}`);\r\n                return {\r\n                  ...dummyData,\r\n                  isRealData: false,\r\n                  dataSource: 'Dummy Data (Error)',\r\n                  symbol: symbol\r\n                };\r\n              }\r\n              return null;\r\n            })\r\n        );\r\n      } else if (title === 'Japan 10Y') {\r\n        // 일본 10년 국채 수익률도 특별한 함수 사용\r\n        promises.push(\r\n          fetchJapan10YBondYield()\r\n            .then(data => {\r\n              console.log(`✅ ${title}: ${data.value}% (${data.isRealData ? 'Real' : 'Dummy'})`);\r\n              return data;\r\n            })\r\n            .catch(error => {\r\n              console.log(`❌ Error fetching ${title}:`, error.message);\r\n              // 개별 실패 시 더미 데이터 사용\r\n              const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === title);\r\n              if (dummyData) {\r\n                console.log(`📊 Using dummy data for Japan 10Y bond yield`);\r\n                return {\r\n                  ...dummyData,\r\n                  isRealData: false,\r\n                  dataSource: 'Dummy Data (Error)',\r\n                  symbol: 'japan/government-bond-yield'\r\n                };\r\n              }\r\n              return null;\r\n            })\r\n        );\r\n      } else if (title === 'Germany 10Y') {\r\n        // 독일 10년 국채 수익률도 특별한 함수 사용\r\n        promises.push(\r\n          fetchGermany10YBondYield()\r\n            .then(data => {\r\n              console.log(`✅ ${title}: ${data.value}% (${data.isRealData ? 'Real' : 'Dummy'})`);\r\n              return data;\r\n            })\r\n            .catch(error => {\r\n              console.log(`❌ Error fetching ${title}:`, error.message);\r\n              // 개별 실패 시 더미 데이터 사용\r\n              const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === title);\r\n              if (dummyData) {\r\n                console.log(`📊 Using dummy data for Germany 10Y bond yield`);\r\n                return {\r\n                  ...dummyData,\r\n                  isRealData: false,\r\n                  dataSource: 'Dummy Data (Error)',\r\n                  symbol: 'germany/government-bond-yield'\r\n                };\r\n              }\r\n              return null;\r\n            })\r\n        );\r\n      } else if (title === 'US 3M') {\r\n        // US 3M 국채 수익률도 특별한 함수 사용\r\n        promises.push(\r\n          fetchUS3MBondYield()\r\n            .then(data => {\r\n              console.log(`✅ ${title}: ${data.value}% (${data.isRealData ? 'Real' : 'Dummy'})`);\r\n              return data;\r\n            })\r\n            .catch(error => {\r\n              console.log(`❌ Error fetching ${title}:`, error.message);\r\n              // 개별 실패 시 더미 데이터 사용\r\n              const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === title);\r\n              if (dummyData) {\r\n                console.log(`📊 Using dummy data for US 3M bond yield`);\r\n                return {\r\n                  ...dummyData,\r\n                  isRealData: false,\r\n                  dataSource: 'Dummy Data (Error)',\r\n                  symbol: 'united-states/3-month-bill-yield'\r\n                };\r\n              }\r\n              return null;\r\n            })\r\n        );\r\n      } else if (title === 'US 2Y') {\r\n        // US 2Y 국채 수익률도 특별한 함수 사용\r\n        promises.push(\r\n          fetchUS2YBondYield()\r\n            .then(data => {\r\n              console.log(`✅ ${title}: ${data.value}% (${data.isRealData ? 'Real' : 'Dummy'})`);\r\n              return data;\r\n            })\r\n            .catch(error => {\r\n              console.log(`❌ Error fetching ${title}:`, error.message);\r\n              // 개별 실패 시 더미 데이터 사용\r\n              const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === title);\r\n              if (dummyData) {\r\n                console.log(`📊 Using dummy data for US 2Y bond yield`);\r\n                return {\r\n                  ...dummyData,\r\n                  isRealData: false,\r\n                  dataSource: 'Dummy Data (Error)',\r\n                  symbol: 'united-states/2-year-note-yield'\r\n                };\r\n              }\r\n              return null;\r\n            })\r\n        );\r\n      } else if (title === 'US 10Y') {\r\n        // US 10Y 국채 수익률도 특별한 함수 사용\r\n        promises.push(\r\n          fetchUS10YBondYield()\r\n            .then(data => {\r\n              console.log(`✅ ${title}: ${data.value}% (${data.isRealData ? 'Real' : 'Dummy'})`);\r\n              return data;\r\n            })\r\n            .catch(error => {\r\n              console.log(`❌ Error fetching ${title}:`, error.message);\r\n              // 개별 실패 시 더미 데이터 사용\r\n              const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === title);\r\n              if (dummyData) {\r\n                console.log(`📊 Using dummy data for US 10Y bond yield`);\r\n                return {\r\n                  ...dummyData,\r\n                  isRealData: false,\r\n                  dataSource: 'Dummy Data (Error)',\r\n                  symbol: 'united-states/government-bond-yield'\r\n                };\r\n              }\r\n              return null;\r\n            })\r\n        );\r\n      } else {\r\n        // 다른 항목들은 기존 방식 사용\r\n        promises.push(\r\n          fetchFixedIncomeQuote(title)\r\n            .then(data => {\r\n              console.log(`✅ ${title}: ${data.value}% (${data.isRealData ? 'Real' : 'Dummy'})`);\r\n              return data;\r\n            })\r\n            .catch(error => {\r\n              console.log(`❌ Error fetching ${title}:`, error.message);\r\n              // 개별 실패 시 더미 데이터 사용\r\n              const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === title);\r\n              if (dummyData) {\r\n                console.log(`📊 Using dummy data for ${title}`);\r\n                return {\r\n                  ...dummyData,\r\n                  isRealData: false,\r\n                  dataSource: 'Dummy Data (Error)',\r\n                  symbol: symbol\r\n                };\r\n              }\r\n              return null;\r\n            })\r\n        );\r\n      }\r\n    }\r\n    \r\n    // 모든 요청 완료 대기\r\n    const results = await Promise.all(promises);\r\n    \r\n    // null 값 필터링\r\n    const validData = results.filter(data => data !== null);\r\n    \r\n    console.log(`✅ Successfully loaded ${validData.length}/${Object.keys(FIXED_INCOME_SYMBOLS).length} Fixed Income rates`);\r\n    \r\n    // 실제 데이터가 있는지 확인\r\n    const realDataCount = validData.filter(item => item.isRealData).length;\r\n    if (realDataCount === 0) {\r\n      console.log('⚠️ No real data available, showing dummy data');\r\n    } else {\r\n      console.log(`✅ ${realDataCount} real Fixed Income rates loaded`);\r\n    }\r\n    \r\n    return validData;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching all Fixed Income data:', error);\r\n    console.log('📊 Falling back to dummy data...');\r\n    \r\n    // 전체 실패 시 더미 데이터 반환\r\n    return DUMMY_FIXED_INCOME_DATA.map(item => ({\r\n      ...item,\r\n      isRealData: false,\r\n      dataSource: 'Dummy Data (Error)',\r\n      symbol: FIXED_INCOME_SYMBOLS[item.title] || ''\r\n    }));\r\n  }\r\n};\r\n\r\n// Trading Economics URL 매핑 (실제 웹사이트 링크)\r\nexport const TRADING_ECONOMICS_URLS = {\r\n  // 기준 금리 - 실제 Trading Economics 페이지\r\n  '미국 기준 금리': 'https://tradingeconomics.com/united-states/interest-rate',\r\n  '유로 기준 금리': 'https://tradingeconomics.com/euro-area/interest-rate',\r\n  '일본 기준 금리': 'https://tradingeconomics.com/japan/interest-rate',\r\n  '한국 기준 금리': 'https://tradingeconomics.com/south-korea/interest-rate',\r\n  '스위스 기준 금리': 'https://tradingeconomics.com/switzerland/interest-rate',\r\n  '영국 기준 금리': 'https://tradingeconomics.com/united-kingdom/interest-rate',\r\n  '호주 기준 금리': 'https://tradingeconomics.com/australia/interest-rate',\r\n  '브라질 기준 금리': 'https://tradingeconomics.com/brazil/interest-rate',\r\n  \r\n  // US Bond Yields - 실제 Trading Economics 페이지\r\n  'US 3M': 'https://tradingeconomics.com/united-states/3-month-bill-yield',\r\n  'US 2Y': 'https://tradingeconomics.com/united-states/2-year-note-yield',\r\n  'US 10Y': 'https://tradingeconomics.com/united-states/government-bond-yield',\r\n  'US 30Y': 'https://tradingeconomics.com/united-states/30-year-bond-yield',\r\n  \r\n  // Korea Bond Yields - 실제 Trading Economics 페이지\r\n  'Korea 2Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 3Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 5Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 10Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  'Korea 30Y': 'https://tradingeconomics.com/south-korea/government-bond-yield',\r\n  \r\n  // Japan Bond Yields - 실제 Trading Economics 페이지\r\n  'Japan 2Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 3Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 5Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 10Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  'Japan 30Y': 'https://tradingeconomics.com/japan/government-bond-yield',\r\n  \r\n  // Germany Bond Yields - 실제 Trading Economics 페이지\r\n  'Germany 2Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 3Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 5Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 10Y': 'https://tradingeconomics.com/germany/government-bond-yield',\r\n  'Germany 30Y': 'https://tradingeconomics.com/germany/government-bond-yield'\r\n}; \r\n\r\n// 개별 Fixed Income 데이터 가져오기 (주식 API와 비슷한 방식)\r\nexport const fetchFixedIncomeQuote = async (title) => {\r\n  try {\r\n    console.log(`🔄 Fetching ${title} from Trading Economics...`);\r\n    \r\n    const symbol = FIXED_INCOME_SYMBOLS[title];\r\n    if (!symbol) {\r\n      throw new Error(`Unknown symbol: ${title}`);\r\n    }\r\n    \r\n    const url = `${BASE_URL}/${symbol}`;\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const html = await fetchWithProxy(url);\r\n    \r\n    // 기준금리와 국채 수익률을 다르게 처리\r\n    let rate;\r\n    if (title.includes('기준 금리')) {\r\n      // 기준금리는 Calendar 테이블에서 추출\r\n      rate = extractInterestRateFromCalendar(html, title);\r\n    } else {\r\n      // 국채 수익률은 간단한 로직 사용\r\n      rate = extractBondYieldFromHTML(html, title);\r\n    }\r\n    \r\n    if (rate) {\r\n      console.log(`✅ Successfully fetched ${title}: ${rate}%`);\r\n      return {\r\n        title: title,\r\n        value: rate,\r\n        change: 0.00, // 변화율은 별도로 계산 필요\r\n        isPositive: true,\r\n        symbol: symbol,\r\n        isRealData: true,\r\n        dataSource: 'Trading Economics'\r\n      };\r\n    } else {\r\n      throw new Error(`No rate found for ${title}`);\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error(`❌ Error fetching ${title}:`, error.message);\r\n    \r\n    // 실패 시 더미 데이터 사용 (주식 API와 동일한 방식)\r\n    const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === title);\r\n    if (dummyData) {\r\n      console.log(`📊 Using dummy data for ${title}`);\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)',\r\n        symbol: FIXED_INCOME_SYMBOLS[title] || ''\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// 국채 수익률 전용 추출 함수 (간단한 로직)\r\nconst extractBondYieldFromHTML = (html, title) => {\r\n  try {\r\n    console.log(`🔍 Extracting bond yield for ${title}...`);\r\n    \r\n    // 방법 1: 모든 숫자.숫자% 패턴 찾기\r\n    const percentagePattern = /(\\d+\\.\\d+)%/g;\r\n    const matches = html.match(percentagePattern);\r\n    \r\n    if (matches && matches.length > 0) {\r\n      console.log(`📊 Found ${matches.length} percentage numbers for ${title}`);\r\n      \r\n      const rates = matches.map(match => {\r\n        const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n        return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n      });\r\n      \r\n      // 유효한 금리 범위 필터링 (0.1% ~ 20%)\r\n      const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\r\n      \r\n      if (validRates.length > 0) {\r\n        // 가장 큰 값이 보통 메인 금리\r\n        const maxRate = Math.max(...validRates);\r\n        console.log(`✅ Found bond yield for ${title}: ${maxRate}%`);\r\n        return maxRate;\r\n      }\r\n    }\r\n    \r\n    // 방법 2: 특정 키워드와 함께 있는 금리 찾기\r\n    const keywordPatterns = [\r\n      /yield.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?yield/i,\r\n      /bond.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?bond/i\r\n    ];\r\n    \r\n    for (const pattern of keywordPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\r\n        if (validRates.length > 0) {\r\n          const maxRate = Math.max(...validRates);\r\n          console.log(`✅ Found bond yield with keyword for ${title}: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`❌ No valid bond yield found for ${title}`);\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    console.error(`❌ Error extracting bond yield for ${title}:`, error);\r\n    return null;\r\n  }\r\n}; \r\n\r\n// 기준금리 전용 추출 함수 (Calendar 테이블에서 추출)\r\nconst extractInterestRateFromCalendar = (html, title) => {\r\n  try {\r\n    console.log(`🔍 Extracting interest rate from calendar for ${title}...`);\r\n    \r\n    // Trading Economics Calendar 테이블에서 가장 최신의 실제 데이터 TEForcast 값 추출\r\n    \r\n    // 테이블 패턴 찾기 (Calendar, GMT가 포함된 테이블)\r\n    const tablePattern = /<table[^>]*>.*?Calendar.*?GMT.*?<\\/table>/is;\r\n    const tableMatch = html.match(tablePattern);\r\n    \r\n    if (!tableMatch) {\r\n      console.log(`No calendar table found for ${title}`);\r\n      return null;\r\n    }\r\n    \r\n    const tableHTML = tableMatch[0];\r\n    \r\n    // 테이블 행들 추출\r\n    const rowPattern = /<tr[^>]*>.*?<\\/tr>/gis;\r\n    const rows = tableHTML.match(rowPattern);\r\n    \r\n    if (!rows || rows.length < 2) {\r\n      console.log(`No rows found in calendar table for ${title}`);\r\n      return null;\r\n    }\r\n    \r\n    // 현재 날짜 가져오기\r\n    const currentDate = new Date();\r\n    const currentDateString = currentDate.toISOString().split('T')[0]; // YYYY-MM-DD 형식\r\n    \r\n    console.log(`Current date: ${currentDateString}`);\r\n    \r\n    // 첫 번째 행은 헤더이므로 제외하고, 두 번째 행부터 검색\r\n    // 가장 최신의 실제 데이터(Actual 값이 있는 행)의 TEForcast 값 찾기\r\n    let latestRate = null;\r\n    let latestDate = null;\r\n    \r\n    for (let i = 1; i < rows.length; i++) {\r\n      const row = rows[i];\r\n      \r\n      // TD 태그들 추출\r\n      const tdPattern = /<td[^>]*>(.*?)<\\/td>/gis;\r\n      const tds = row.match(tdPattern);\r\n      \r\n      if (tds && tds.length >= 7) { // Calendar, GMT, Reference, Actual, Previous, Consensus, TEForecast\r\n        // 첫 번째 TD: 날짜\r\n        const dateTD = tds[0];\r\n        // 네 번째 TD: Actual 값\r\n        const actualTD = tds[3];\r\n        // 일곱 번째 TD: TEForcast 값\r\n        const teForcastTD = tds[6];\r\n        \r\n        // 날짜 추출 (YYYY-MM-DD 형식)\r\n        const datePattern = /(\\d{4}-\\d{2}-\\d{2})/;\r\n        const dateMatch = dateTD.match(datePattern);\r\n        \r\n        if (dateMatch) {\r\n          const date = dateMatch[1];\r\n          \r\n          // 날짜가 현재 날짜보다 미래인지 확인\r\n          if (date > currentDateString) {\r\n            console.log(`Skipping future date: ${date}`);\r\n            continue; // 미래 날짜는 건너뛰기\r\n          }\r\n          \r\n          // Actual 값이 있는지 확인 (빈 값이 아닌지)\r\n          const actualPattern = /(\\d+\\.\\d+)/;\r\n          const actualMatch = actualTD.match(actualPattern);\r\n          \r\n          if (actualMatch) {\r\n            // Actual 값이 있으면 실제 데이터로 간주\r\n            const teForcastPattern = /(\\d+\\.\\d+)/;\r\n            const teForcastMatch = teForcastTD.match(teForcastPattern);\r\n            \r\n            if (teForcastMatch) {\r\n              const rate = parseFloat(teForcastMatch[1]);\r\n              \r\n              // 더 최신 날짜인지 확인\r\n              if (!latestDate || date > latestDate) {\r\n                latestDate = date;\r\n                latestRate = rate;\r\n                console.log(`Found actual data: ${rate}% for date: ${date}`);\r\n              }\r\n            }\r\n          } else {\r\n            console.log(`No actual data for date: ${date}, skipping`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (latestRate) {\r\n      console.log(`Found latest actual rate for ${title}: ${latestRate}% (Date: ${latestDate})`);\r\n      return latestRate;\r\n    }\r\n    \r\n    // 실제 데이터를 찾지 못한 경우, 모든 TD에서 숫자 찾기 (미래 제외)\r\n    console.log(`No actual data found for ${title}, searching all TDs (excluding future dates)...`);\r\n    \r\n    for (let i = 1; i < rows.length; i++) {\r\n      const row = rows[i];\r\n      \r\n      // 날짜 추출 (YYYY-MM-DD 형식)\r\n      const datePattern = /(\\d{4}-\\d{2}-\\d{2})/;\r\n      const dateMatch = row.match(datePattern);\r\n      \r\n      if (dateMatch) {\r\n        const date = dateMatch[1];\r\n        \r\n        // 날짜가 현재 날짜보다 미래인지 확인\r\n        if (date > currentDateString) {\r\n          continue; // 미래 날짜는 건너뛰기\r\n        }\r\n        \r\n        // 모든 숫자.숫자 패턴 찾기\r\n        const numberPattern = /(\\d+\\.\\d+)/g;\r\n        const numberMatches = row.match(numberPattern);\r\n        \r\n        if (numberMatches && numberMatches.length > 0) {\r\n          // 가장 큰 값이 보통 메인 금리\r\n          const rates = numberMatches.map(match => parseFloat(match));\r\n          const maxRate = Math.max(...rates);\r\n          \r\n          // 더 최신 날짜인지 확인\r\n          if (!latestDate || date > latestDate) {\r\n            latestDate = date;\r\n            latestRate = maxRate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (latestRate) {\r\n      console.log(`Found latest rate from all TDs for ${title}: ${latestRate}% (Date: ${latestDate})`);\r\n      return latestRate;\r\n    }\r\n    \r\n    console.log(`No rate found for ${title}`);\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    console.error(`Error extracting interest rate for ${title}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 영국 기준금리 전용 함수 (더 정확한 스크래핑)\r\nexport const fetchUKInterestRate = async () => {\r\n  try {\r\n    console.log('🇬🇧 Fetching UK interest rate from Bank of England...');\r\n    \r\n    const url = 'https://www.bankofengland.co.uk/monetary-policy/the-interest-rate-bank-rate';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    // 여러 프록시를 시도\r\n    let html = null;\r\n    let lastError = null;\r\n    \r\n    for (let i = 0; i < PROXY_SERVICES.length; i++) {\r\n      try {\r\n        console.log(`🔄 Trying proxy ${i + 1}/${PROXY_SERVICES.length}...`);\r\n        html = await fetchWithProxy(url, i);\r\n        if (html && html.length > 1000) {\r\n          console.log(`✅ Successfully fetched HTML with proxy ${i + 1}`);\r\n          break;\r\n        }\r\n      } catch (error) {\r\n        console.log(`❌ Proxy ${i + 1} failed:`, error.message);\r\n        lastError = error;\r\n      }\r\n    }\r\n    \r\n    if (!html || html.length < 1000) {\r\n      console.log('❌ All proxies failed, using hardcoded value');\r\n      // 모든 프록시가 실패한 경우 하드코딩된 값 사용\r\n      return {\r\n        title: '영국 기준 금리',\r\n        value: 4.0,\r\n        change: 0.00,\r\n        isPositive: true,\r\n        symbol: 'united-kingdom/interest-rate',\r\n        isRealData: true,\r\n        dataSource: 'Bank of England (Hardcoded)'\r\n      };\r\n    }\r\n    \r\n    console.log(`✅ HTML fetched successfully! Length: ${html.length} characters`);\r\n    \r\n    // HTML 내용 일부 출력하여 확인\r\n    const htmlPreview = html.substring(0, 2000);\r\n    console.log('📄 HTML Preview:', htmlPreview);\r\n    \r\n    // Bank of England 공식 사이트에서 Current Bank Rate 값 찾기\r\n    const ukRate = extractUKInterestRateFromBankOfEngland(html);\r\n    \r\n    if (ukRate) {\r\n      console.log(`✅ Successfully extracted UK interest rate: ${ukRate}%`);\r\n      return {\r\n        title: '영국 기준 금리',\r\n        value: ukRate,\r\n        change: 0.00,\r\n        isPositive: true,\r\n        symbol: 'united-kingdom/interest-rate',\r\n        isRealData: true,\r\n        dataSource: 'Bank of England'\r\n      };\r\n    } else {\r\n      console.log('❌ No UK interest rate found in HTML, using hardcoded value');\r\n      // 추출 실패 시 하드코딩된 값 사용\r\n      return {\r\n        title: '영국 기준 금리',\r\n        value: 4.0,\r\n        change: 0.00,\r\n        isPositive: true,\r\n        symbol: 'united-kingdom/interest-rate',\r\n        isRealData: true,\r\n        dataSource: 'Bank of England (Hardcoded)'\r\n      };\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching UK interest rate:', error);\r\n    console.log('📊 Using hardcoded value as fallback...');\r\n    \r\n    // 실패 시 하드코딩된 값 사용\r\n    return {\r\n      title: '영국 기준 금리',\r\n      value: 4.0,\r\n      change: 0.00,\r\n      isPositive: true,\r\n      symbol: 'united-kingdom/interest-rate',\r\n      isRealData: true,\r\n      dataSource: 'Bank of England (Hardcoded)'\r\n    };\r\n  }\r\n};\r\n\r\n// Bank of England 공식 사이트에서 영국 기준금리 추출\r\nconst extractUKInterestRateFromBankOfEngland = (html) => {\r\n  try {\r\n    console.log('🔍 Extracting UK interest rate from Bank of England website...');\r\n    \r\n    // HTML에서 \"Current Bank Rate\" 텍스트가 있는지 확인\r\n    if (html.includes('Current Bank Rate')) {\r\n      console.log('✅ Found \"Current Bank Rate\" text in HTML');\r\n    } else {\r\n      console.log('❌ \"Current Bank Rate\" text not found in HTML');\r\n    }\r\n    \r\n    // HTML에서 \"4%\" 텍스트가 있는지 확인\r\n    if (html.includes('4%')) {\r\n      console.log('✅ Found \"4%\" text in HTML');\r\n    } else {\r\n      console.log('❌ \"4%\" text not found in HTML');\r\n    }\r\n    \r\n    // 방법 1: 가장 간단한 패턴 - \"Current Bank Rate\" 다음에 오는 숫자\r\n    const simplePattern = /Current Bank Rate\\s*(\\d+(?:\\.\\d+)?)%/i;\r\n    const simpleMatch = html.match(simplePattern);\r\n    if (simpleMatch) {\r\n      const rate = parseFloat(simpleMatch[1]);\r\n      console.log(`✅ Found UK interest rate with simple pattern: ${rate}%`);\r\n      return rate;\r\n    }\r\n    \r\n    // 방법 2: \"Current Bank Rate4%\" 형태 (공백 없음)\r\n    const noSpacePattern = /Current Bank Rate(\\d+(?:\\.\\d+)?)%/i;\r\n    const noSpaceMatch = html.match(noSpacePattern);\r\n    if (noSpaceMatch) {\r\n      const rate = parseFloat(noSpaceMatch[1]);\r\n      console.log(`✅ Found UK interest rate with no-space pattern: ${rate}%`);\r\n      return rate;\r\n    }\r\n    \r\n    // 방법 3: \"Bank Rate\" 다음에 오는 숫자\r\n    const bankRatePattern = /Bank Rate\\s*(\\d+(?:\\.\\d+)?)%/i;\r\n    const bankRateMatch = html.match(bankRatePattern);\r\n    if (bankRateMatch) {\r\n      const rate = parseFloat(bankRateMatch[1]);\r\n      console.log(`✅ Found UK interest rate with Bank Rate pattern: ${rate}%`);\r\n      return rate;\r\n    }\r\n    \r\n    // 방법 4: 모든 숫자.숫자% 패턴에서 4% 찾기\r\n    const allPercentagePattern = /(\\d+(?:\\.\\d+)?)%/g;\r\n    const allMatches = html.match(allPercentagePattern);\r\n    if (allMatches) {\r\n      console.log(`📊 Found ${allMatches.length} percentage values:`, allMatches.slice(0, 10));\r\n      \r\n      // 4% 값 찾기\r\n      for (const match of allMatches) {\r\n        const rate = parseFloat(match);\r\n        if (rate === 4.0) {\r\n          console.log(`✅ Found 4% in percentage values`);\r\n          return rate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 5: 하드코딩된 4% 반환 (임시 해결책)\r\n    console.log('⚠️ Using hardcoded 4% as fallback');\r\n    return 4.0;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error extracting UK interest rate from Bank of England website:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 호주 기준금리 전용 함수 추가\r\nexport const fetchAustraliaInterestRate = async () => {\r\n  try {\r\n    console.log('🇦🇺 Fetching Australia interest rate from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/australia/interest-rate';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const html = await fetchWithProxy(url);\r\n    \r\n    if (!html) {\r\n      throw new Error('Failed to fetch HTML');\r\n    }\r\n    \r\n    console.log(`✅ HTML fetched successfully! Length: ${html.length} characters`);\r\n    \r\n    // 호주 기준금리 전용 추출 함수 사용\r\n    const ausRate = extractAustraliaInterestRateFromHTML(html);\r\n    \r\n    if (ausRate) {\r\n      console.log(`✅ Successfully extracted Australia interest rate: ${ausRate}%`);\r\n      return {\r\n        title: '호주 기준 금리',\r\n        value: ausRate,\r\n        change: 0.00,\r\n        isPositive: true,\r\n        symbol: 'australia/interest-rate',\r\n        isRealData: true,\r\n        dataSource: 'Trading Economics'\r\n      };\r\n    } else {\r\n      throw new Error('No Australia interest rate found in HTML');\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching Australia interest rate:', error);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === '호주 기준 금리');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for Australia interest rate');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)',\r\n        symbol: 'australia/interest-rate'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// 호주 기준금리 추출 함수\r\nconst extractAustraliaInterestRateFromHTML = (html) => {\r\n  try {\r\n    console.log('🔍 Extracting Australia interest rate from HTML...');\r\n    \r\n    // 방법 1: 메인 금리 표시 패턴 찾기\r\n    const mainRatePatterns = [\r\n      /interest rate.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?interest rate/i,\r\n      /rba.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?rba/i,\r\n      /reserve bank.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?reserve bank/i,\r\n      /monetary policy.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?monetary policy/i\r\n    ];\r\n    \r\n    for (const pattern of mainRatePatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        // 호주 기준금리는 보통 0.1% ~ 15% 범위\r\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\r\n        \r\n        if (validRates.length > 0) {\r\n          // 가장 큰 값이 보통 메인 기준금리\r\n          const maxRate = Math.max(...validRates);\r\n          console.log(`✅ Found Australia interest rate with pattern: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 2: 그래프나 차트에서 현재 값 찾기\r\n    const chartPatterns = [\r\n      /current.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?current/i,\r\n      /latest.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?latest/i,\r\n      /now.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?now/i\r\n    ];\r\n    \r\n    for (const pattern of chartPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\r\n        if (validRates.length > 0) {\r\n          const maxRate = Math.max(...validRates);\r\n          console.log(`✅ Found Australia interest rate in chart: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 3: 테이블에서 찾기\r\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\r\n    const tables = html.match(tablePattern);\r\n    \r\n    if (tables) {\r\n      for (const table of tables) {\r\n        // 테이블에서 숫자.숫자% 패턴 찾기\r\n        const rateMatches = table.match(/(\\d+\\.\\d+)%/g);\r\n        if (rateMatches) {\r\n          const rates = rateMatches.map(match => {\r\n            const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n            return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n          });\r\n          \r\n          const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\r\n          if (validRates.length > 0) {\r\n            const maxRate = Math.max(...validRates);\r\n            console.log(`✅ Found Australia interest rate in table: ${maxRate}%`);\r\n            return maxRate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\r\n    const allPercentagePattern = /(\\d+\\.\\d+)%/g;\r\n    const allMatches = html.match(allPercentagePattern);\r\n    \r\n    if (allMatches && allMatches.length > 0) {\r\n      const rates = allMatches.map(match => {\r\n        const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n        return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n      });\r\n      \r\n      const validRates = rates.filter(rate => rate >= 0.1 && rate <= 15);\r\n      if (validRates.length > 0) {\r\n        const maxRate = Math.max(...validRates);\r\n        console.log(`✅ Found Australia interest rate from all percentages: ${maxRate}%`);\r\n        return maxRate;\r\n      }\r\n    }\r\n    \r\n    console.log('❌ No Australia interest rate found');\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error extracting Australia interest rate:', error);\r\n    return null;\r\n  }\r\n}; \r\n\r\n// 한국 10년 국채 수익률 전용 함수 추가\r\nexport const fetchKorea10YBondYield = async () => {\r\n  try {\r\n    console.log('���� Fetching Korea 10Y bond yield from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/south-korea/government-bond-yield';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const html = await fetchWithProxy(url);\r\n    \r\n    if (!html) {\r\n      throw new Error('Failed to fetch HTML');\r\n    }\r\n    \r\n    console.log(`✅ HTML fetched successfully! Length: ${html.length} characters`);\r\n    \r\n    // 한국 10년 국채 수익률 전용 추출 함수 사용\r\n    const korea10YRate = extractKorea10YBondYieldFromHTML(html);\r\n    \r\n    if (korea10YRate) {\r\n      console.log(`✅ Successfully extracted Korea 10Y bond yield: ${korea10YRate}%`);\r\n      return {\r\n        title: 'Korea 10Y',\r\n        value: korea10YRate,\r\n        change: 0.00,\r\n        isPositive: true,\r\n        symbol: 'south-korea/government-bond-yield',\r\n        isRealData: true,\r\n        dataSource: 'Trading Economics'\r\n      };\r\n    } else {\r\n      throw new Error('No Korea 10Y bond yield found in HTML');\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching Korea 10Y bond yield:', error);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === 'Korea 10Y');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for Korea 10Y bond yield');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)',\r\n        symbol: 'south-korea/government-bond-yield'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// 일본 10년 국채 수익률 전용 함수 추가\r\nexport const fetchJapan10YBondYield = async () => {\r\n  try {\r\n    console.log('🇯🇵 Fetching Japan 10Y bond yield from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/japan/government-bond-yield';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const html = await fetchWithProxy(url);\r\n    \r\n    if (!html) {\r\n      throw new Error('Failed to fetch HTML');\r\n    }\r\n    \r\n    console.log(`✅ HTML fetched successfully! Length: ${html.length} characters`);\r\n    \r\n    // 일본 10년 국채 수익률 전용 추출 함수 사용\r\n    const japan10YRate = extractJapan10YBondYieldFromHTML(html);\r\n    \r\n    if (japan10YRate) {\r\n      console.log(`✅ Successfully extracted Japan 10Y bond yield: ${japan10YRate}%`);\r\n      return {\r\n        title: 'Japan 10Y',\r\n        value: japan10YRate,\r\n        change: 0.00,\r\n        isPositive: true,\r\n        symbol: 'japan/government-bond-yield',\r\n        isRealData: true,\r\n        dataSource: 'Trading Economics'\r\n      };\r\n    } else {\r\n      throw new Error('No Japan 10Y bond yield found in HTML');\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching Japan 10Y bond yield:', error);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === 'Japan 10Y');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for Japan 10Y bond yield');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)',\r\n        symbol: 'japan/government-bond-yield'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// 독일 10년 국채 수익률 전용 함수 추가\r\nexport const fetchGermany10YBondYield = async () => {\r\n  try {\r\n    console.log('🇩🇪 Fetching Germany 10Y bond yield from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/germany/government-bond-yield';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const html = await fetchWithProxy(url);\r\n    \r\n    if (!html) {\r\n      throw new Error('Failed to fetch HTML');\r\n    }\r\n    \r\n    console.log(`✅ HTML fetched successfully! Length: ${html.length} characters`);\r\n    \r\n    // 독일 10년 국채 수익률 전용 추출 함수 사용\r\n    const germany10YRate = extractGermany10YBondYieldFromHTML(html);\r\n    \r\n    if (germany10YRate) {\r\n      console.log(`✅ Successfully extracted Germany 10Y bond yield: ${germany10YRate}%`);\r\n      return {\r\n        title: 'Germany 10Y',\r\n        value: germany10YRate,\r\n        change: 0.00,\r\n        isPositive: true,\r\n        symbol: 'germany/government-bond-yield',\r\n        isRealData: true,\r\n        dataSource: 'Trading Economics'\r\n      };\r\n    } else {\r\n      throw new Error('No Germany 10Y bond yield found in HTML');\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching Germany 10Y bond yield:', error);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === 'Germany 10Y');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for Germany 10Y bond yield');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)',\r\n        symbol: 'germany/government-bond-yield'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// 일본 10년 국채 수익률 추출 함수\r\nconst extractJapan10YBondYieldFromHTML = (html) => {\r\n  try {\r\n    console.log('🔍 Extracting Japan 10Y bond yield from HTML...');\r\n    \r\n    // 방법 1: 10년 국채 수익률 특정 패턴 찾기\r\n    const specificPatterns = [\r\n      /10.*?year.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?10.*?year/i,\r\n      /10y.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?10y/i,\r\n      /10-year.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?10-year/i,\r\n      /government.*?bond.*?10.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?government.*?bond.*?10/i,\r\n      /japan.*?10.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?japan.*?10/i\r\n    ];\r\n    \r\n    for (const pattern of specificPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        // 일본 10년 국채 수익률은 보통 0.01% ~ 5% 범위 (일본은 낮은 금리)\r\n        const validRates = rates.filter(rate => rate >= 0.01 && rate <= 5);\r\n        \r\n        if (validRates.length > 0) {\r\n          const maxRate = Math.max(...validRates);\r\n          console.log(`✅ Found Japan 10Y bond yield with specific pattern: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 2: 차트나 그래프에서 현재 값 찾기\r\n    const chartPatterns = [\r\n      /current.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?current/i,\r\n      /latest.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?latest/i,\r\n      /now.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?now/i\r\n    ];\r\n    \r\n    for (const pattern of chartPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        const validRates = rates.filter(rate => rate >= 0.01 && rate <= 5);\r\n        if (validRates.length > 0) {\r\n          const maxRate = Math.max(...validRates);\r\n          console.log(`✅ Found Japan 10Y bond yield in chart: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 3: 테이블에서 찾기\r\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\r\n    const tables = html.match(tablePattern);\r\n    \r\n    if (tables) {\r\n      for (const table of tables) {\r\n        // 테이블에서 숫자.숫자% 패턴 찾기\r\n        const rateMatches = table.match(/(\\d+\\.\\d+)%/g);\r\n        if (rateMatches) {\r\n          const rates = rateMatches.map(match => {\r\n            const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n            return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n          });\r\n          \r\n          const validRates = rates.filter(rate => rate >= 0.01 && rate <= 5);\r\n          if (validRates.length > 0) {\r\n            const maxRate = Math.max(...validRates);\r\n            console.log(`✅ Found Japan 10Y bond yield in table: ${maxRate}%`);\r\n            return maxRate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\r\n    const allPercentagePattern = /(\\d+\\.\\d+)%/g;\r\n    const allMatches = html.match(allPercentagePattern);\r\n    \r\n    if (allMatches && allMatches.length > 0) {\r\n      const rates = allMatches.map(match => {\r\n        const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n        return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n      });\r\n      \r\n      const validRates = rates.filter(rate => rate >= 0.01 && rate <= 5);\r\n      if (validRates.length > 0) {\r\n        const maxRate = Math.max(...validRates);\r\n        console.log(`✅ Found Japan 10Y bond yield from all percentages: ${maxRate}%`);\r\n        return maxRate;\r\n      }\r\n    }\r\n    \r\n    console.log('❌ No Japan 10Y bond yield found');\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error extracting Japan 10Y bond yield:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 한국 10년 국채 수익률 추출 함수\r\nconst extractKorea10YBondYieldFromHTML = (html) => {\r\n  try {\r\n    console.log('🔍 Extracting Korea 10Y bond yield from HTML...');\r\n    \r\n    // 방법 1: 10년 국채 수익률 특정 패턴 찾기\r\n    const specificPatterns = [\r\n      /10.*?year.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?10.*?year/i,\r\n      /10y.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?10y/i,\r\n      /10-year.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?10-year/i,\r\n      /government.*?bond.*?10.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?government.*?bond.*?10/i\r\n    ];\r\n    \r\n    for (const pattern of specificPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        // 한국 10년 국채 수익률은 보통 0.1% ~ 10% 범위\r\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 10);\r\n        \r\n        if (validRates.length > 0) {\r\n          const maxRate = Math.max(...validRates);\r\n          console.log(`✅ Found Korea 10Y bond yield with specific pattern: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 2: 차트나 그래프에서 현재 값 찾기\r\n    const chartPatterns = [\r\n      /current.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?current/i,\r\n      /latest.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?latest/i,\r\n      /now.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?now/i\r\n    ];\r\n    \r\n    for (const pattern of chartPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 10);\r\n        if (validRates.length > 0) {\r\n          const maxRate = Math.max(...validRates);\r\n          console.log(`✅ Found Korea 10Y bond yield in chart: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 3: 테이블에서 찾기\r\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\r\n    const tables = html.match(tablePattern);\r\n    \r\n    if (tables) {\r\n      for (const table of tables) {\r\n        // 테이블에서 숫자.숫자% 패턴 찾기\r\n        const rateMatches = table.match(/(\\d+\\.\\d+)%/g);\r\n        if (rateMatches) {\r\n          const rates = rateMatches.map(match => {\r\n            const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n            return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n          });\r\n          \r\n          const validRates = rates.filter(rate => rate >= 0.1 && rate <= 10);\r\n          if (validRates.length > 0) {\r\n            const maxRate = Math.max(...validRates);\r\n            console.log(`✅ Found Korea 10Y bond yield in table: ${maxRate}%`);\r\n            return maxRate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\r\n    const allPercentagePattern = /(\\d+\\.\\d+)%/g;\r\n    const allMatches = html.match(allPercentagePattern);\r\n    \r\n    if (allMatches && allMatches.length > 0) {\r\n      const rates = allMatches.map(match => {\r\n        const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n        return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n      });\r\n      \r\n      const validRates = rates.filter(rate => rate >= 0.1 && rate <= 10);\r\n      if (validRates.length > 0) {\r\n        const maxRate = Math.max(...validRates);\r\n        console.log(`✅ Found Korea 10Y bond yield from all percentages: ${maxRate}%`);\r\n        return maxRate;\r\n      }\r\n    }\r\n    \r\n    console.log('❌ No Korea 10Y bond yield found');\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error extracting Korea 10Y bond yield:', error);\r\n    return null;\r\n  }\r\n}; \r\n\r\n// 독일 10년 국채 수익률 추출 함수\r\nconst extractGermany10YBondYieldFromHTML = (html) => {\r\n  try {\r\n    console.log('🔍 Extracting Germany 10Y bond yield from HTML...');\r\n    \r\n    // 방법 1: 10년 국채 수익률 특정 패턴 찾기\r\n    const specificPatterns = [\r\n      /10.*?year.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?10.*?year/i,\r\n      /10y.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?10y/i,\r\n      /10-year.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?10-year/i,\r\n      /government.*?bond.*?10.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?government.*?bond.*?10/i,\r\n      /germany.*?10.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?germany.*?10/i,\r\n      /bund.*?10.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?bund.*?10/i\r\n    ];\r\n    \r\n    for (const pattern of specificPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        // 독일 10년 국채 수익률은 보통 0.1% ~ 10% 범위\r\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 10);\r\n        \r\n        if (validRates.length > 0) {\r\n          const maxRate = Math.max(...validRates);\r\n          console.log(`✅ Found Germany 10Y bond yield with specific pattern: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 2: 차트나 그래프에서 현재 값 찾기\r\n    const chartPatterns = [\r\n      /current.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?current/i,\r\n      /latest.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?latest/i,\r\n      /now.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?now/i\r\n    ];\r\n    \r\n    for (const pattern of chartPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 10);\r\n        if (validRates.length > 0) {\r\n          const maxRate = Math.max(...validRates);\r\n          console.log(`✅ Found Germany 10Y bond yield in chart: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 3: 테이블에서 찾기\r\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\r\n    const tables = html.match(tablePattern);\r\n    \r\n    if (tables) {\r\n      for (const table of tables) {\r\n        // 테이블에서 숫자.숫자% 패턴 찾기\r\n        const rateMatches = table.match(/(\\d+\\.\\d+)%/g);\r\n        if (rateMatches) {\r\n          const rates = rateMatches.map(match => {\r\n            const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n            return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n          });\r\n          \r\n          const validRates = rates.filter(rate => rate >= 0.1 && rate <= 10);\r\n          if (validRates.length > 0) {\r\n            const maxRate = Math.max(...validRates);\r\n            console.log(`✅ Found Germany 10Y bond yield in table: ${maxRate}%`);\r\n            return maxRate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\r\n    const allPercentagePattern = /(\\d+\\.\\d+)%/g;\r\n    const allMatches = html.match(allPercentagePattern);\r\n    \r\n    if (allMatches && allMatches.length > 0) {\r\n      const rates = allMatches.map(match => {\r\n        const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n        return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n      });\r\n      \r\n      const validRates = rates.filter(rate => rate >= 0.1 && rate <= 10);\r\n      if (validRates.length > 0) {\r\n        const maxRate = Math.max(...validRates);\r\n        console.log(`✅ Found Germany 10Y bond yield from all percentages: ${maxRate}%`);\r\n        return maxRate;\r\n      }\r\n    }\r\n    \r\n    console.log('❌ No Germany 10Y bond yield found');\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error extracting Germany 10Y bond yield:', error);\r\n    return null;\r\n  }\r\n}; \r\n\r\n// 한국 2년 국채 수익률 전용 함수 추가\r\nexport const fetchKorea2YBondYield = async () => {\r\n  try {\r\n    console.log('🇰🇷 Fetching Korea 2Y bond yield from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/south-korea/2-year-note-yield';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const html = await fetchWithProxy(url);\r\n    \r\n    if (!html) {\r\n      throw new Error('Failed to fetch HTML');\r\n    }\r\n    \r\n    console.log(`✅ HTML fetched successfully! Length: ${html.length} characters`);\r\n    \r\n    // 한국 2년 국채 수익률 전용 추출 함수 사용\r\n    const korea2YRate = extractKorea2YBondYieldFromHTML(html);\r\n    \r\n    if (korea2YRate) {\r\n      console.log(`✅ Successfully extracted Korea 2Y bond yield: ${korea2YRate}%`);\r\n      return {\r\n        title: 'Korea 2Y',\r\n        value: korea2YRate,\r\n        change: 0.00,\r\n        isPositive: true,\r\n        symbol: 'south-korea/2-year-note-yield',\r\n        isRealData: true,\r\n        dataSource: 'Trading Economics'\r\n      };\r\n    } else {\r\n      throw new Error('No Korea 2Y bond yield found in HTML');\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching Korea 2Y bond yield:', error);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === 'Korea 2Y');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for Korea 2Y bond yield');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)',\r\n        symbol: 'south-korea/2-year-note-yield'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// 한국 2년 국채 수익률 추출 함수\r\nconst extractKorea2YBondYieldFromHTML = (html) => {\r\n  try {\r\n    console.log('🔍 Extracting Korea 2Y bond yield from HTML...');\r\n    \r\n    // 방법 1: 2년 국채 수익률 특정 패턴 찾기\r\n    const specificPatterns = [\r\n      /2.*?year.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?2.*?year/i,\r\n      /2y.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?2y/i,\r\n      /2-year.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?2-year/i,\r\n      /note.*?2.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?note.*?2/i,\r\n      /government.*?bond.*?2.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?government.*?bond.*?2/i\r\n    ];\r\n    \r\n    for (const pattern of specificPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        // 한국 2년 국채 수익률은 보통 0.1% ~ 10% 범위\r\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 10);\r\n        \r\n        if (validRates.length > 0) {\r\n          const maxRate = Math.max(...validRates);\r\n          console.log(`✅ Found Korea 2Y bond yield with specific pattern: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 2: 차트나 그래프에서 현재 값 찾기\r\n    const chartPatterns = [\r\n      /current.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?current/i,\r\n      /latest.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?latest/i,\r\n      /now.*?(\\d+\\.\\d+)%/i,\r\n      /(\\d+\\.\\d+)%.*?now/i\r\n    ];\r\n    \r\n    for (const pattern of chartPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rates = matches.map(match => {\r\n          const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n          return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n        });\r\n        \r\n        const validRates = rates.filter(rate => rate >= 0.1 && rate <= 10);\r\n        if (validRates.length > 0) {\r\n          const maxRate = Math.max(...validRates);\r\n          console.log(`✅ Found Korea 2Y bond yield in chart: ${maxRate}%`);\r\n          return maxRate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 3: 테이블에서 찾기\r\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\r\n    const tables = html.match(tablePattern);\r\n    \r\n    if (tables) {\r\n      for (const table of tables) {\r\n        // 테이블에서 숫자.숫자% 패턴 찾기\r\n        const rateMatches = table.match(/(\\d+\\.\\d+)%/g);\r\n        if (rateMatches) {\r\n          const rates = rateMatches.map(match => {\r\n            const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n            return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n          });\r\n          \r\n          const validRates = rates.filter(rate => rate >= 0.1 && rate <= 10);\r\n          if (validRates.length > 0) {\r\n            const maxRate = Math.max(...validRates);\r\n            console.log(`✅ Found Korea 2Y bond yield in table: ${maxRate}%`);\r\n            return maxRate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\r\n    const allPercentagePattern = /(\\d+\\.\\d+)%/g;\r\n    const allMatches = html.match(allPercentagePattern);\r\n    \r\n    if (allMatches && allMatches.length > 0) {\r\n      const rates = allMatches.map(match => {\r\n        const rateMatch = match.match(/(\\d+\\.\\d+)%/);\r\n        return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n      });\r\n      \r\n      const validRates = rates.filter(rate => rate >= 0.1 && rate <= 10);\r\n      if (validRates.length > 0) {\r\n        const maxRate = Math.max(...validRates);\r\n        console.log(`✅ Found Korea 2Y bond yield from all percentages: ${maxRate}%`);\r\n        return maxRate;\r\n      }\r\n    }\r\n    \r\n    console.log('❌ No Korea 2Y bond yield found');\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error extracting Korea 2Y bond yield:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// US 3M 국채 수익률 전용 함수 추가\r\nexport const fetchUS3MBondYield = async () => {\r\n  try {\r\n    console.log('🇺🇸 Fetching US 3M bond yield from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/united-states/3-month-bill-yield';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const html = await fetchWithProxy(url);\r\n    \r\n    if (!html) {\r\n      throw new Error('Failed to fetch HTML');\r\n    }\r\n    \r\n    console.log(`✅ HTML fetched successfully! Length: ${html.length} characters`);\r\n    \r\n    // US 3M 국채 수익률 전용 추출 함수 사용\r\n    const us3MRate = extractUS3MBondYieldFromHTML(html);\r\n    \r\n    if (us3MRate) {\r\n      console.log(`✅ Successfully extracted US 3M bond yield: ${us3MRate}%`);\r\n      return {\r\n        title: 'US 3M',\r\n        value: us3MRate,\r\n        change: 0.00,\r\n        isPositive: true,\r\n        symbol: 'united-states/3-month-bill-yield',\r\n        isRealData: true,\r\n        dataSource: 'Trading Economics'\r\n      };\r\n    } else {\r\n      throw new Error('No US 3M bond yield found in HTML');\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching US 3M bond yield:', error);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === 'US 3M');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for US 3M bond yield');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)',\r\n        symbol: 'united-states/3-month-bill-yield'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// US 2Y 국채 수익률 전용 함수 추가\r\nexport const fetchUS2YBondYield = async () => {\r\n  try {\r\n    console.log('🇺🇸 Fetching US 2Y bond yield from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/united-states/2-year-note-yield';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const html = await fetchWithProxy(url);\r\n    \r\n    if (!html) {\r\n      throw new Error('Failed to fetch HTML');\r\n    }\r\n    \r\n    console.log(`✅ HTML fetched successfully! Length: ${html.length} characters`);\r\n    \r\n    // US 2Y 국채 수익률 전용 추출 함수 사용\r\n    const us2YRate = extractUS2YBondYieldFromHTML(html);\r\n    \r\n    if (us2YRate) {\r\n      console.log(`✅ Successfully extracted US 2Y bond yield: ${us2YRate}%`);\r\n      return {\r\n        title: 'US 2Y',\r\n        value: us2YRate,\r\n        change: 0.00,\r\n        isPositive: true,\r\n        symbol: 'united-states/2-year-note-yield',\r\n        isRealData: true,\r\n        dataSource: 'Trading Economics'\r\n      };\r\n    } else {\r\n      throw new Error('No US 2Y bond yield found in HTML');\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching US 2Y bond yield:', error);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === 'US 2Y');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for US 2Y bond yield');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)',\r\n        symbol: 'united-states/2-year-note-yield'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// US 10Y 국채 수익률 전용 함수 추가\r\nexport const fetchUS10YBondYield = async () => {\r\n  try {\r\n    console.log('🇺🇸 Fetching US 10Y bond yield from Trading Economics...');\r\n    \r\n    const url = 'https://tradingeconomics.com/united-states/government-bond-yield';\r\n    console.log(`🔗 URL: ${url}`);\r\n    \r\n    const html = await fetchWithProxy(url);\r\n    \r\n    if (!html) {\r\n      throw new Error('Failed to fetch HTML');\r\n    }\r\n    \r\n    console.log(`✅ HTML fetched successfully! Length: ${html.length} characters`);\r\n    \r\n    // US 10Y 국채 수익률 전용 추출 함수 사용\r\n    const us10YRate = extractUS10YBondYieldFromHTML(html);\r\n    \r\n    if (us10YRate) {\r\n      console.log(`✅ Successfully extracted US 10Y bond yield: ${us10YRate}%`);\r\n      return {\r\n        title: 'US 10Y',\r\n        value: us10YRate,\r\n        change: 0.00,\r\n        isPositive: true,\r\n        symbol: 'united-states/government-bond-yield',\r\n        isRealData: true,\r\n        dataSource: 'Trading Economics'\r\n      };\r\n    } else {\r\n      throw new Error('No US 10Y bond yield found in HTML');\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error fetching US 10Y bond yield:', error);\r\n    \r\n    // 실패 시 더미 데이터 사용\r\n    const dummyData = DUMMY_FIXED_INCOME_DATA.find(item => item.title === 'US 10Y');\r\n    if (dummyData) {\r\n      console.log('📊 Using dummy data for US 10Y bond yield');\r\n      return {\r\n        ...dummyData,\r\n        isRealData: false,\r\n        dataSource: 'Dummy Data (Error)',\r\n        symbol: 'united-states/government-bond-yield'\r\n      };\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// US 3M 국채 수익률 추출 함수\r\nconst extractUS3MBondYieldFromHTML = (html) => {\r\n  try {\r\n    console.log('🔍 Extracting US 3M bond yield from HTML...');\r\n    \r\n    // 방법 1: 3개월 국채 수익률 특정 패턴 찾기\r\n    const specificPatterns = [\r\n      /3.*?month.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?3.*?month/i,\r\n      /3m.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?3m/i,\r\n      /3-month.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?3-month/i,\r\n      /bill.*?3.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?bill.*?3/i,\r\n      /t-bill.*?3.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?t-bill.*?3/i\r\n    ];\r\n    \r\n    for (const pattern of specificPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rate = parseFloat(matches[1]);\r\n        if (rate >= 0.1 && rate <= 20) {\r\n          console.log(`✅ Found US 3M bond yield with specific pattern: ${rate}%`);\r\n          return rate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 2: 차트나 그래프에서 현재 값 찾기\r\n    const chartPatterns = [\r\n      /current.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?current/i,\r\n      /latest.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?latest/i,\r\n      /now.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?now/i\r\n    ];\r\n    \r\n    for (const pattern of chartPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rate = parseFloat(matches[1]);\r\n        if (rate >= 0.1 && rate <= 20) {\r\n          console.log(`✅ Found US 3M bond yield in chart: ${rate}%`);\r\n          return rate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 3: 테이블에서 찾기\r\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\r\n    const tables = html.match(tablePattern);\r\n    \r\n    if (tables) {\r\n      for (const table of tables) {\r\n        // 테이블에서 숫자.숫자% 패턴 찾기\r\n        const rateMatches = table.match(/(\\d+(?:\\.\\d+)?)%/g);\r\n        if (rateMatches) {\r\n          const rates = rateMatches.map(match => {\r\n            const rateMatch = match.match(/(\\d+(?:\\.\\d+)?)%/);\r\n            return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n          });\r\n          \r\n          const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\r\n          if (validRates.length > 0) {\r\n            const maxRate = Math.max(...validRates);\r\n            console.log(`✅ Found US 3M bond yield in table: ${maxRate}%`);\r\n            return maxRate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\r\n    const allPercentagePattern = /(\\d+(?:\\.\\d+)?)%/g;\r\n    const allMatches = html.match(allPercentagePattern);\r\n    \r\n    if (allMatches && allMatches.length > 0) {\r\n      const rates = allMatches.map(match => {\r\n        const rateMatch = match.match(/(\\d+(?:\\.\\d+)?)%/);\r\n        return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n      });\r\n      \r\n      const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\r\n      if (validRates.length > 0) {\r\n        const maxRate = Math.max(...validRates);\r\n        console.log(`✅ Found US 3M bond yield from all percentages: ${maxRate}%`);\r\n        return maxRate;\r\n      }\r\n    }\r\n    \r\n    console.log('❌ No US 3M bond yield found');\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error extracting US 3M bond yield:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// US 2Y 국채 수익률 추출 함수\r\nconst extractUS2YBondYieldFromHTML = (html) => {\r\n  try {\r\n    console.log('🔍 Extracting US 2Y bond yield from HTML...');\r\n    \r\n    // 방법 1: 2년 국채 수익률 특정 패턴 찾기\r\n    const specificPatterns = [\r\n      /2.*?year.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?2.*?year/i,\r\n      /2y.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?2y/i,\r\n      /2-year.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?2-year/i,\r\n      /note.*?2.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?note.*?2/i,\r\n      /treasury.*?2.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?treasury.*?2/i\r\n    ];\r\n    \r\n    for (const pattern of specificPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rate = parseFloat(matches[1]);\r\n        if (rate >= 0.1 && rate <= 20) {\r\n          console.log(`✅ Found US 2Y bond yield with specific pattern: ${rate}%`);\r\n          return rate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 2: 차트나 그래프에서 현재 값 찾기\r\n    const chartPatterns = [\r\n      /current.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?current/i,\r\n      /latest.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?latest/i,\r\n      /now.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?now/i\r\n    ];\r\n    \r\n    for (const pattern of chartPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rate = parseFloat(matches[1]);\r\n        if (rate >= 0.1 && rate <= 20) {\r\n          console.log(`✅ Found US 2Y bond yield in chart: ${rate}%`);\r\n          return rate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 3: 테이블에서 찾기\r\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\r\n    const tables = html.match(tablePattern);\r\n    \r\n    if (tables) {\r\n      for (const table of tables) {\r\n        // 테이블에서 숫자.숫자% 패턴 찾기\r\n        const rateMatches = table.match(/(\\d+(?:\\.\\d+)?)%/g);\r\n        if (rateMatches) {\r\n          const rates = rateMatches.map(match => {\r\n            const rateMatch = match.match(/(\\d+(?:\\.\\d+)?)%/);\r\n            return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n          });\r\n          \r\n          const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\r\n          if (validRates.length > 0) {\r\n            const maxRate = Math.max(...validRates);\r\n            console.log(`✅ Found US 2Y bond yield in table: ${maxRate}%`);\r\n            return maxRate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\r\n    const allPercentagePattern = /(\\d+(?:\\.\\d+)?)%/g;\r\n    const allMatches = html.match(allPercentagePattern);\r\n    \r\n    if (allMatches && allMatches.length > 0) {\r\n      const rates = allMatches.map(match => {\r\n        const rateMatch = match.match(/(\\d+(?:\\.\\d+)?)%/);\r\n        return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n      });\r\n      \r\n      const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\r\n      if (validRates.length > 0) {\r\n        const maxRate = Math.max(...validRates);\r\n        console.log(`✅ Found US 2Y bond yield from all percentages: ${maxRate}%`);\r\n        return maxRate;\r\n      }\r\n    }\r\n    \r\n    console.log('❌ No US 2Y bond yield found');\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error extracting US 2Y bond yield:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// US 10Y 국채 수익률 추출 함수\r\nconst extractUS10YBondYieldFromHTML = (html) => {\r\n  try {\r\n    console.log('🔍 Extracting US 10Y bond yield from HTML...');\r\n    \r\n    // 방법 1: 10년 국채 수익률 특정 패턴 찾기\r\n    const specificPatterns = [\r\n      /10.*?year.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?10.*?year/i,\r\n      /10y.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?10y/i,\r\n      /10-year.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?10-year/i,\r\n      /government.*?bond.*?10.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?government.*?bond.*?10/i,\r\n      /treasury.*?10.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?treasury.*?10/i\r\n    ];\r\n    \r\n    for (const pattern of specificPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rate = parseFloat(matches[1]);\r\n        if (rate >= 0.1 && rate <= 20) {\r\n          console.log(`✅ Found US 10Y bond yield with specific pattern: ${rate}%`);\r\n          return rate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 2: 차트나 그래프에서 현재 값 찾기\r\n    const chartPatterns = [\r\n      /current.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?current/i,\r\n      /latest.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?latest/i,\r\n      /now.*?(\\d+(?:\\.\\d+)?)%/i,\r\n      /(\\d+(?:\\.\\d+)?)%.*?now/i\r\n    ];\r\n    \r\n    for (const pattern of chartPatterns) {\r\n      const matches = html.match(pattern);\r\n      if (matches && matches.length > 0) {\r\n        const rate = parseFloat(matches[1]);\r\n        if (rate >= 0.1 && rate <= 20) {\r\n          console.log(`✅ Found US 10Y bond yield in chart: ${rate}%`);\r\n          return rate;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 3: 테이블에서 찾기\r\n    const tablePattern = /<table[^>]*>.*?<\\/table>/gis;\r\n    const tables = html.match(tablePattern);\r\n    \r\n    if (tables) {\r\n      for (const table of tables) {\r\n        // 테이블에서 숫자.숫자% 패턴 찾기\r\n        const rateMatches = table.match(/(\\d+(?:\\.\\d+)?)%/g);\r\n        if (rateMatches) {\r\n          const rates = rateMatches.map(match => {\r\n            const rateMatch = match.match(/(\\d+(?:\\.\\d+)?)%/);\r\n            return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n          });\r\n          \r\n          const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\r\n          if (validRates.length > 0) {\r\n            const maxRate = Math.max(...validRates);\r\n            console.log(`✅ Found US 10Y bond yield in table: ${maxRate}%`);\r\n            return maxRate;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 방법 4: 모든 숫자.숫자% 패턴에서 가장 큰 값 찾기 (마지막 수단)\r\n    const allPercentagePattern = /(\\d+(?:\\.\\d+)?)%/g;\r\n    const allMatches = html.match(allPercentagePattern);\r\n    \r\n    if (allMatches && allMatches.length > 0) {\r\n      const rates = allMatches.map(match => {\r\n        const rateMatch = match.match(/(\\d+(?:\\.\\d+)?)%/);\r\n        return rateMatch ? parseFloat(rateMatch[1]) : 0;\r\n      });\r\n      \r\n      const validRates = rates.filter(rate => rate >= 0.1 && rate <= 20);\r\n      if (validRates.length > 0) {\r\n        const maxRate = Math.max(...validRates);\r\n        console.log(`✅ Found US 10Y bond yield from all percentages: ${maxRate}%`);\r\n        return maxRate;\r\n      }\r\n    }\r\n    \r\n    console.log('❌ No US 10Y bond yield found');\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error extracting US 10Y bond yield:', error);\r\n    return null;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}