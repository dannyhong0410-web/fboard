{"ast":null,"code":"// Yahoo Finance API를 사용한 주식 데이터 서비스\nconst BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\n\n// 주식 심볼별 차트 데이터 가져오기\nexport const fetchStockChartData = async (symbol, range = '1mo', interval = '1d') => {\n  try {\n    const response = await fetch(`${BASE_URL}/${symbol}?interval=${interval}&range=${range}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\n      throw new Error('No chart data available');\n    }\n    const result = data.chart.result[0];\n    const timestamps = result.timestamp;\n    const quotes = result.indicators.quote[0];\n\n    // 데이터 정리 및 변환\n    const chartData = timestamps.map((timestamp, index) => {\n      const date = new Date(timestamp * 1000);\n      return {\n        date: date.toLocaleDateString('ko-KR'),\n        timestamp: timestamp,\n        open: quotes.open[index] || 0,\n        high: quotes.high[index] || 0,\n        low: quotes.low[index] || 0,\n        close: quotes.close[index] || 0,\n        volume: quotes.volume[index] || 0\n      };\n    }).filter(item => item.close > 0); // 유효한 데이터만 필터링\n\n    return chartData;\n  } catch (error) {\n    console.error('Error fetching stock data:', error);\n    throw error;\n  }\n};\n\n// 주식 실시간 가격 정보 가져오기\nexport const fetchStockQuote = async symbol => {\n  try {\n    const response = await fetch(`${BASE_URL}/${symbol}?interval=1m&range=1d`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\n      throw new Error('No quote data available');\n    }\n    const result = data.chart.result[0];\n    const meta = result.meta;\n    const quotes = result.indicators.quote[0];\n\n    // 가장 최근 데이터\n    const latestIndex = quotes.close.length - 1;\n    return {\n      symbol: symbol,\n      price: meta.regularMarketPrice || quotes.close[latestIndex] || 0,\n      change: meta.regularMarketPrice - meta.previousClose || 0,\n      changePercent: (meta.regularMarketPrice - meta.previousClose) / meta.previousClose * 100 || 0,\n      previousClose: meta.previousClose || 0,\n      open: quotes.open[latestIndex] || 0,\n      high: quotes.high[latestIndex] || 0,\n      low: quotes.low[latestIndex] || 0,\n      volume: quotes.volume[latestIndex] || 0,\n      marketCap: meta.marketCap || 0,\n      currency: meta.currency || 'USD'\n    };\n  } catch (error) {\n    console.error('Error fetching stock quote:', error);\n    throw error;\n  }\n};\n\n// 여러 주식 심볼의 실시간 데이터 가져오기\nexport const fetchMultipleStockQuotes = async symbols => {\n  try {\n    const promises = symbols.map(symbol => fetchStockQuote(symbol));\n    const results = await Promise.allSettled(promises);\n    return results.map((result, index) => {\n      if (result.status === 'fulfilled') {\n        return result.value;\n      } else {\n        console.error(`Failed to fetch ${symbols[index]}:`, result.reason);\n        return {\n          symbol: symbols[index],\n          error: true,\n          message: result.reason.message\n        };\n      }\n    });\n  } catch (error) {\n    console.error('Error fetching multiple stock quotes:', error);\n    throw error;\n  }\n};\n\n// 인기 주식 심볼들\nexport const POPULAR_STOCKS = ['^GSPC',\n// S&P 500\n'^IXIC',\n// NASDAQ\n'^DJI',\n// DOW JONES\n'^VIX',\n// VIX\n'^KS11',\n// KOSPI\n'^KQ11' // KOSDAQ\n];","map":{"version":3,"names":["BASE_URL","fetchStockChartData","symbol","range","interval","response","fetch","ok","Error","status","data","json","chart","result","length","timestamps","timestamp","quotes","indicators","quote","chartData","map","index","date","Date","toLocaleDateString","open","high","low","close","volume","filter","item","error","console","fetchStockQuote","meta","latestIndex","price","regularMarketPrice","change","previousClose","changePercent","marketCap","currency","fetchMultipleStockQuotes","symbols","promises","results","Promise","allSettled","value","reason","message","POPULAR_STOCKS"],"sources":["C:/Users/홍성관/Desktop/FBoard/src/services/stockApi.js"],"sourcesContent":["// Yahoo Finance API를 사용한 주식 데이터 서비스\r\nconst BASE_URL = 'https://query1.finance.yahoo.com/v8/finance/chart';\r\n\r\n// 주식 심볼별 차트 데이터 가져오기\r\nexport const fetchStockChartData = async (symbol, range = '1mo', interval = '1d') => {\r\n  try {\r\n    const response = await fetch(\r\n      `${BASE_URL}/${symbol}?interval=${interval}&range=${range}`\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\r\n      throw new Error('No chart data available');\r\n    }\r\n    \r\n    const result = data.chart.result[0];\r\n    const timestamps = result.timestamp;\r\n    const quotes = result.indicators.quote[0];\r\n    \r\n    // 데이터 정리 및 변환\r\n    const chartData = timestamps.map((timestamp, index) => {\r\n      const date = new Date(timestamp * 1000);\r\n      return {\r\n        date: date.toLocaleDateString('ko-KR'),\r\n        timestamp: timestamp,\r\n        open: quotes.open[index] || 0,\r\n        high: quotes.high[index] || 0,\r\n        low: quotes.low[index] || 0,\r\n        close: quotes.close[index] || 0,\r\n        volume: quotes.volume[index] || 0\r\n      };\r\n    }).filter(item => item.close > 0); // 유효한 데이터만 필터링\r\n    \r\n    return chartData;\r\n  } catch (error) {\r\n    console.error('Error fetching stock data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 주식 실시간 가격 정보 가져오기\r\nexport const fetchStockQuote = async (symbol) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${BASE_URL}/${symbol}?interval=1m&range=1d`\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!data.chart || !data.chart.result || data.chart.result.length === 0) {\r\n      throw new Error('No quote data available');\r\n    }\r\n    \r\n    const result = data.chart.result[0];\r\n    const meta = result.meta;\r\n    const quotes = result.indicators.quote[0];\r\n    \r\n    // 가장 최근 데이터\r\n    const latestIndex = quotes.close.length - 1;\r\n    \r\n    return {\r\n      symbol: symbol,\r\n      price: meta.regularMarketPrice || quotes.close[latestIndex] || 0,\r\n      change: meta.regularMarketPrice - meta.previousClose || 0,\r\n      changePercent: ((meta.regularMarketPrice - meta.previousClose) / meta.previousClose * 100) || 0,\r\n      previousClose: meta.previousClose || 0,\r\n      open: quotes.open[latestIndex] || 0,\r\n      high: quotes.high[latestIndex] || 0,\r\n      low: quotes.low[latestIndex] || 0,\r\n      volume: quotes.volume[latestIndex] || 0,\r\n      marketCap: meta.marketCap || 0,\r\n      currency: meta.currency || 'USD'\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching stock quote:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 여러 주식 심볼의 실시간 데이터 가져오기\r\nexport const fetchMultipleStockQuotes = async (symbols) => {\r\n  try {\r\n    const promises = symbols.map(symbol => fetchStockQuote(symbol));\r\n    const results = await Promise.allSettled(promises);\r\n    \r\n    return results.map((result, index) => {\r\n      if (result.status === 'fulfilled') {\r\n        return result.value;\r\n      } else {\r\n        console.error(`Failed to fetch ${symbols[index]}:`, result.reason);\r\n        return {\r\n          symbol: symbols[index],\r\n          error: true,\r\n          message: result.reason.message\r\n        };\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching multiple stock quotes:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 인기 주식 심볼들\r\nexport const POPULAR_STOCKS = [\r\n  '^GSPC',    // S&P 500\r\n  '^IXIC',    // NASDAQ\r\n  '^DJI',     // DOW JONES\r\n  '^VIX',     // VIX\r\n  '^KS11',    // KOSPI\r\n  '^KQ11'     // KOSDAQ\r\n]; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}